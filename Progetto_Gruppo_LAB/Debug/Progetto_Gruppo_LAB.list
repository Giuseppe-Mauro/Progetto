
Progetto_Gruppo_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08008a48  08008a48  00009a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e8  080090e8  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f0  080090f0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f0  080090f0  0000a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080090f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200001e0  080092d4  0000b1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  080092d4  0000b698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec3b  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217b  00000000  00000000  00019e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af3  00000000  00000000  0001cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888c  00000000  00000000  0001d8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa10  00000000  00000000  0003614f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bbaa  00000000  00000000  00045b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000502c  00000000  00000000  000e174c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e6778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a2c 	.word	0x08008a2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008a2c 	.word	0x08008a2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 f895 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f969 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fb39 	bl	8001568 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ef6:	f000 fa23 	bl	8001340 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000efa:	f000 f9cf 	bl	800129c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000efe:	f000 fb09 	bl	8001514 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f02:	f000 fa6b 	bl	80013dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f06:	f000 fab7 	bl	8001478 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000f0a:	4b94      	ldr	r3, [pc, #592]	@ (800115c <main+0x278>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d128      	bne.n	8000f68 <main+0x84>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000f16:	4b91      	ldr	r3, [pc, #580]	@ (800115c <main+0x278>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a90      	ldr	r2, [pc, #576]	@ (800115c <main+0x278>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6013      	str	r3, [r2, #0]

		/** ESCO DALLA MODALITA' STANDBY **/
		sprintf(bufferTx, "Avvio, LD2 lampeggerà dopodichè inizierà la prova.\r\n");
 8000f22:	498f      	ldr	r1, [pc, #572]	@ (8001160 <main+0x27c>)
 8000f24:	488f      	ldr	r0, [pc, #572]	@ (8001164 <main+0x280>)
 8000f26:	f004 fae1 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen (bufferTx), 1000);
 8000f2a:	488e      	ldr	r0, [pc, #568]	@ (8001164 <main+0x280>)
 8000f2c:	f7ff f9a8 	bl	8000280 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f38:	498a      	ldr	r1, [pc, #552]	@ (8001164 <main+0x280>)
 8000f3a:	488b      	ldr	r0, [pc, #556]	@ (8001168 <main+0x284>)
 8000f3c:	f003 f996 	bl	800426c <HAL_UART_Transmit>

		/** Blink the LED **/
		for (int i=0; i<20; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	e009      	b.n	8000f5a <main+0x76>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f46:	2120      	movs	r1, #32
 8000f48:	4888      	ldr	r0, [pc, #544]	@ (800116c <main+0x288>)
 8000f4a:	f001 ffac 	bl	8002ea6 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000f4e:	20c8      	movs	r0, #200	@ 0xc8
 8000f50:	f001 f8d4 	bl	80020fc <HAL_Delay>
		for (int i=0; i<20; i++)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b13      	cmp	r3, #19
 8000f5e:	ddf2      	ble.n	8000f46 <main+0x62>
		}

		/** DISABILITO IL WAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000f60:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f64:	f001 fff0 	bl	8002f48 <HAL_PWR_DisableWakeUpPin>


	}
	HAL_TIM_Base_Start_IT(&htim2);
 8000f68:	4881      	ldr	r0, [pc, #516]	@ (8001170 <main+0x28c>)
 8000f6a:	f002 fd41 	bl	80039f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000f6e:	4881      	ldr	r0, [pc, #516]	@ (8001174 <main+0x290>)
 8000f70:	f002 fd3e 	bl	80039f0 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET); // resetto il LED a "spento"
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7a:	487c      	ldr	r0, [pc, #496]	@ (800116c <main+0x288>)
 8000f7c:	f001 ff7a 	bl	8002e74 <HAL_GPIO_WritePin>
	srand(HAL_GetTick()); // seed random
 8000f80:	f001 f8b0 	bl	80020e4 <HAL_GetTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fd2c 	bl	80049e4 <srand>

	HAL_ADC_Start(&hadc1);
 8000f8c:	487a      	ldr	r0, [pc, #488]	@ (8001178 <main+0x294>)
 8000f8e:	f001 f93d 	bl	800220c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);  // ACQUISISCO DAL PIN PA1 E USO IL VALORE IN DIGITALE PER IMPOSTARE LA SOGLIA DI DIFFICOLTA'
 8000f92:	2164      	movs	r1, #100	@ 0x64
 8000f94:	4878      	ldr	r0, [pc, #480]	@ (8001178 <main+0x294>)
 8000f96:	f001 fa20 	bl	80023da <HAL_ADC_PollForConversion>
	uiAnalogData = HAL_ADC_GetValue(&hadc1);
 8000f9a:	4877      	ldr	r0, [pc, #476]	@ (8001178 <main+0x294>)
 8000f9c:	f001 faa8 	bl	80024f0 <HAL_ADC_GetValue>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a76      	ldr	r2, [pc, #472]	@ (800117c <main+0x298>)
 8000fa4:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8000fa6:	4874      	ldr	r0, [pc, #464]	@ (8001178 <main+0x294>)
 8000fa8:	f001 f9e4 	bl	8002374 <HAL_ADC_Stop>

	if(uiAnalogData > 3000){
 8000fac:	4b73      	ldr	r3, [pc, #460]	@ (800117c <main+0x298>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d915      	bls.n	8000fe4 <main+0x100>
		sprintf(bufferTx, "Difficoltà selezionata: ALTA\r\n");
 8000fb8:	4971      	ldr	r1, [pc, #452]	@ (8001180 <main+0x29c>)
 8000fba:	486a      	ldr	r0, [pc, #424]	@ (8001164 <main+0x280>)
 8000fbc:	f004 fa96 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen(bufferTx), 1000);
 8000fc0:	4868      	ldr	r0, [pc, #416]	@ (8001164 <main+0x280>)
 8000fc2:	f7ff f95d 	bl	8000280 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	4965      	ldr	r1, [pc, #404]	@ (8001164 <main+0x280>)
 8000fd0:	4865      	ldr	r0, [pc, #404]	@ (8001168 <main+0x284>)
 8000fd2:	f003 f94b 	bl	800426c <HAL_UART_Transmit>
		sogliams = 250;
 8000fd6:	496b      	ldr	r1, [pc, #428]	@ (8001184 <main+0x2a0>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <main+0x2a4>)
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
 8000fe2:	e030      	b.n	8001046 <main+0x162>
	}
	else if (uiAnalogData > 1300){
 8000fe4:	4b65      	ldr	r3, [pc, #404]	@ (800117c <main+0x298>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f240 5214 	movw	r2, #1300	@ 0x514
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d915      	bls.n	800101c <main+0x138>
		sprintf(bufferTx, "Difficoltà selezionata: MEDIA\r\n");
 8000ff0:	4966      	ldr	r1, [pc, #408]	@ (800118c <main+0x2a8>)
 8000ff2:	485c      	ldr	r0, [pc, #368]	@ (8001164 <main+0x280>)
 8000ff4:	f004 fa7a 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen(bufferTx), 1000);
 8000ff8:	485a      	ldr	r0, [pc, #360]	@ (8001164 <main+0x280>)
 8000ffa:	f7ff f941 	bl	8000280 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001006:	4957      	ldr	r1, [pc, #348]	@ (8001164 <main+0x280>)
 8001008:	4857      	ldr	r0, [pc, #348]	@ (8001168 <main+0x284>)
 800100a:	f003 f92f 	bl	800426c <HAL_UART_Transmit>
		sogliams = 400;
 800100e:	495d      	ldr	r1, [pc, #372]	@ (8001184 <main+0x2a0>)
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b5e      	ldr	r3, [pc, #376]	@ (8001190 <main+0x2ac>)
 8001016:	e9c1 2300 	strd	r2, r3, [r1]
 800101a:	e014      	b.n	8001046 <main+0x162>
	}
	else {
		sprintf(bufferTx, "Difficoltà selezionata: BASSA\r\n");
 800101c:	495d      	ldr	r1, [pc, #372]	@ (8001194 <main+0x2b0>)
 800101e:	4851      	ldr	r0, [pc, #324]	@ (8001164 <main+0x280>)
 8001020:	f004 fa64 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen(bufferTx), 1000);
 8001024:	484f      	ldr	r0, [pc, #316]	@ (8001164 <main+0x280>)
 8001026:	f7ff f92b 	bl	8000280 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	494c      	ldr	r1, [pc, #304]	@ (8001164 <main+0x280>)
 8001034:	484c      	ldr	r0, [pc, #304]	@ (8001168 <main+0x284>)
 8001036:	f003 f919 	bl	800426c <HAL_UART_Transmit>
		sogliams = 800;
 800103a:	4952      	ldr	r1, [pc, #328]	@ (8001184 <main+0x2a0>)
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b55      	ldr	r3, [pc, #340]	@ (8001198 <main+0x2b4>)
 8001042:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		sprintf(bufferTx, "Sessione iniziata! \r\n");
 8001046:	4955      	ldr	r1, [pc, #340]	@ (800119c <main+0x2b8>)
 8001048:	4846      	ldr	r0, [pc, #280]	@ (8001164 <main+0x280>)
 800104a:	f004 fa4f 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen(bufferTx), 100);
 800104e:	4845      	ldr	r0, [pc, #276]	@ (8001164 <main+0x280>)
 8001050:	f7ff f916 	bl	8000280 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	4942      	ldr	r1, [pc, #264]	@ (8001164 <main+0x280>)
 800105c:	4842      	ldr	r0, [pc, #264]	@ (8001168 <main+0x284>)
 800105e:	f003 f905 	bl	800426c <HAL_UART_Transmit>

		// Entra in sleep e si sveglia con interrupt timer2, timer3 o interrupt esterno sul pin PA10
		HAL_SuspendTick();
 8001062:	f001 f86f 	bl	8002144 <HAL_SuspendTick>
		HAL_PWR_EnableSleepOnExit();
 8001066:	f001 ffbb 	bl	8002fe0 <HAL_PWR_EnableSleepOnExit>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800106a:	2101      	movs	r1, #1
 800106c:	2000      	movs	r0, #0
 800106e:	f001 ff7f 	bl	8002f70 <HAL_PWR_EnterSLEEPMode>


		// se si supera il timeout di 3 secondi, si completa la prova o si preme il pulsante troppo presto
		// ci si sveglia permanentemente dalla modalità sleep e si esegue un codice comune ai 3 casi mandando in STANDBY il dispositivo
		HAL_ResumeTick();
 8001072:	f001 f877 	bl	8002164 <HAL_ResumeTick>
		sprintf(bufferTx, "Sessione terminata, vado in standby.\r\n");
 8001076:	494a      	ldr	r1, [pc, #296]	@ (80011a0 <main+0x2bc>)
 8001078:	483a      	ldr	r0, [pc, #232]	@ (8001164 <main+0x280>)
 800107a:	f004 fa37 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen(bufferTx), 100);
 800107e:	4839      	ldr	r0, [pc, #228]	@ (8001164 <main+0x280>)
 8001080:	f7ff f8fe 	bl	8000280 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	4936      	ldr	r1, [pc, #216]	@ (8001164 <main+0x280>)
 800108c:	4836      	ldr	r0, [pc, #216]	@ (8001168 <main+0x284>)
 800108e:	f003 f8ed 	bl	800426c <HAL_UART_Transmit>

		if(vittoria == 1){
 8001092:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <main+0x2c0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d153      	bne.n	8001142 <main+0x25e>
			for (int i = 0; i < 5; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	e016      	b.n	80010ce <main+0x1ea>
			{
				sprintf(bufferTx, "Tempo %u° prova = %lu ms\r\n", i+1, risultati[i]);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	4940      	ldr	r1, [pc, #256]	@ (80011a8 <main+0x2c4>)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ac:	493f      	ldr	r1, [pc, #252]	@ (80011ac <main+0x2c8>)
 80010ae:	482d      	ldr	r0, [pc, #180]	@ (8001164 <main+0x280>)
 80010b0:	f004 fa1c 	bl	80054ec <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)bufferTx, strlen(bufferTx), 100);
 80010b4:	482b      	ldr	r0, [pc, #172]	@ (8001164 <main+0x280>)
 80010b6:	f7ff f8e3 	bl	8000280 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	2364      	movs	r3, #100	@ 0x64
 80010c0:	4928      	ldr	r1, [pc, #160]	@ (8001164 <main+0x280>)
 80010c2:	4829      	ldr	r0, [pc, #164]	@ (8001168 <main+0x284>)
 80010c4:	f003 f8d2 	bl	800426c <HAL_UART_Transmit>
			for (int i = 0; i < 5; i++)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	dde5      	ble.n	80010a0 <main+0x1bc>

			}

			sprintf(bufferTx, "Media = %2.2f ms.\r\n", somma/5);
 80010d4:	4b36      	ldr	r3, [pc, #216]	@ (80011b0 <main+0x2cc>)
 80010d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <main+0x2d0>)
 80010e0:	f7ff fbbc 	bl	800085c <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4933      	ldr	r1, [pc, #204]	@ (80011b8 <main+0x2d4>)
 80010ea:	481e      	ldr	r0, [pc, #120]	@ (8001164 <main+0x280>)
 80010ec:	f004 f9fe 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)bufferTx, strlen(bufferTx), 100);
 80010f0:	481c      	ldr	r0, [pc, #112]	@ (8001164 <main+0x280>)
 80010f2:	f7ff f8c5 	bl	8000280 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	2364      	movs	r3, #100	@ 0x64
 80010fc:	4919      	ldr	r1, [pc, #100]	@ (8001164 <main+0x280>)
 80010fe:	481a      	ldr	r0, [pc, #104]	@ (8001168 <main+0x284>)
 8001100:	f003 f8b4 	bl	800426c <HAL_UART_Transmit>

			sprintf(bufferTx, "Hai ottenuto un punteggio totale di: %d. \r\n",(int)round(punteggio));
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <main+0x2d8>)
 8001106:	ed93 7b00 	vldr	d7, [r3]
 800110a:	eeb0 0a47 	vmov.f32	s0, s14
 800110e:	eef0 0a67 	vmov.f32	s1, s15
 8001112:	f006 fbe5 	bl	80078e0 <round>
 8001116:	ec53 2b10 	vmov	r2, r3, d0
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd23 	bl	8000b68 <__aeabi_d2iz>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4926      	ldr	r1, [pc, #152]	@ (80011c0 <main+0x2dc>)
 8001128:	480e      	ldr	r0, [pc, #56]	@ (8001164 <main+0x280>)
 800112a:	f004 f9df 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)bufferTx, strlen(bufferTx), 100);
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <main+0x280>)
 8001130:	f7ff f8a6 	bl	8000280 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	2364      	movs	r3, #100	@ 0x64
 800113a:	490a      	ldr	r1, [pc, #40]	@ (8001164 <main+0x280>)
 800113c:	480a      	ldr	r0, [pc, #40]	@ (8001168 <main+0x284>)
 800113e:	f003 f895 	bl	800426c <HAL_UART_Transmit>
		}

		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001142:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001146:	f001 feed 	bl	8002f24 <HAL_PWR_EnableWakeUpPin>

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <main+0x278>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a03      	ldr	r2, [pc, #12]	@ (800115c <main+0x278>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6013      	str	r3, [r2, #0]

		HAL_PWR_EnterSTANDBYMode();
 8001156:	f001 ff2b 	bl	8002fb0 <HAL_PWR_EnterSTANDBYMode>
		sprintf(bufferTx, "Sessione iniziata! \r\n");
 800115a:	e774      	b.n	8001046 <main+0x162>
 800115c:	40007000 	.word	0x40007000
 8001160:	08008a48 	.word	0x08008a48
 8001164:	20000364 	.word	0x20000364
 8001168:	2000031c 	.word	0x2000031c
 800116c:	40020000 	.word	0x40020000
 8001170:	20000244 	.word	0x20000244
 8001174:	200002d4 	.word	0x200002d4
 8001178:	200001fc 	.word	0x200001fc
 800117c:	20000448 	.word	0x20000448
 8001180:	08008a80 	.word	0x08008a80
 8001184:	20000450 	.word	0x20000450
 8001188:	406f4000 	.word	0x406f4000
 800118c:	08008aa0 	.word	0x08008aa0
 8001190:	40790000 	.word	0x40790000
 8001194:	08008ac4 	.word	0x08008ac4
 8001198:	40890000 	.word	0x40890000
 800119c:	08008ae8 	.word	0x08008ae8
 80011a0:	08008b00 	.word	0x08008b00
 80011a4:	20000444 	.word	0x20000444
 80011a8:	20000430 	.word	0x20000430
 80011ac:	08008b28 	.word	0x08008b28
 80011b0:	20000460 	.word	0x20000460
 80011b4:	40140000 	.word	0x40140000
 80011b8:	08008b44 	.word	0x08008b44
 80011bc:	20000458 	.word	0x20000458
 80011c0:	08008b58 	.word	0x08008b58

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	@ 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	@ 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 f9ef 	bl	80055b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <SystemClock_Config+0xd0>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <SystemClock_Config+0xd0>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <SystemClock_Config+0xd0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <SystemClock_Config+0xd4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <SystemClock_Config+0xd4>)
 8001212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <SystemClock_Config+0xd4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2310      	movs	r3, #16
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001238:	2310      	movs	r3, #16
 800123a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800123c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001240:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001242:	2304      	movs	r3, #4
 8001244:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001246:	2307      	movs	r3, #7
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fee6 	bl	8003020 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800125a:	f000 fa0b 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 f948 	bl	8003510 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001286:	f000 f9f5 	bl	8001674 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	@ 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012b0:	4a21      	ldr	r2, [pc, #132]	@ (8001338 <MX_ADC1_Init+0x9c>)
 80012b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <MX_ADC1_Init+0xa0>)
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012fc:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_ADC1_Init+0x98>)
 80012fe:	f000 ff41 	bl	8002184 <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001308:	f000 f9b4 	bl	8001674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800130c:	2301      	movs	r3, #1
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_ADC1_Init+0x98>)
 800131e:	f001 f8f5 	bl	800250c <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001328:	f000 f9a4 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001fc 	.word	0x200001fc
 8001338:	40012000 	.word	0x40012000
 800133c:	0f000001 	.word	0x0f000001

08001340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135c:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <MX_TIM2_Init+0x98>)
 800135e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001364:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <MX_TIM2_Init+0x98>)
 8001366:	f242 720f 	movw	r2, #9999	@ 0x270f
 800136a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_TIM2_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16799;
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <MX_TIM2_Init+0x98>)
 8001374:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_TIM2_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_TIM2_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001386:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <MX_TIM2_Init+0x98>)
 8001388:	f002 fae2 	bl	8003950 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001392:	f000 f96f 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <MX_TIM2_Init+0x98>)
 80013a4:	f002 fc76 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ae:	f000 f961 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <MX_TIM2_Init+0x98>)
 80013c0:	f002 fe82 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ca:	f000 f953 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000244 	.word	0x20000244

080013dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <MX_TIM3_Init+0x94>)
 80013fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <MX_TIM3_Init+0x98>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001400:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001404:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25199;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_TIM3_Init+0x94>)
 800140e:	f246 226f 	movw	r2, #25199	@ 0x626f
 8001412:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_TIM3_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001420:	4813      	ldr	r0, [pc, #76]	@ (8001470 <MX_TIM3_Init+0x94>)
 8001422:	f002 fa95 	bl	8003950 <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800142c:	f000 f922 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <MX_TIM3_Init+0x94>)
 800143e:	f002 fc29 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001448:	f000 f914 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_TIM3_Init+0x94>)
 800145a:	f002 fe35 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 f906 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000028c 	.word	0x2000028c
 8001474:	40000400 	.word	0x40000400

08001478 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <MX_TIM4_Init+0x94>)
 8001496:	4a1e      	ldr	r2, [pc, #120]	@ (8001510 <MX_TIM4_Init+0x98>)
 8001498:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_TIM4_Init+0x94>)
 800149c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_TIM4_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_TIM4_Init+0x94>)
 80014aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_TIM4_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_TIM4_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014bc:	4813      	ldr	r0, [pc, #76]	@ (800150c <MX_TIM4_Init+0x94>)
 80014be:	f002 fa47 	bl	8003950 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80014c8:	f000 f8d4 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_TIM4_Init+0x94>)
 80014da:	f002 fbdb 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80014e4:	f000 f8c6 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_TIM4_Init+0x94>)
 80014f6:	f002 fde7 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001500:	f000 f8b8 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002d4 	.word	0x200002d4
 8001510:	40000800 	.word	0x40000800

08001514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_USART2_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_USART2_UART_Init+0x4c>)
 800154c:	f002 fe3e 	bl	80041cc <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f000 f88d 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000031c 	.word	0x2000031c
 8001564:	40004400 	.word	0x40004400

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b39      	ldr	r3, [pc, #228]	@ (8001668 <MX_GPIO_Init+0x100>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a38      	ldr	r2, [pc, #224]	@ (8001668 <MX_GPIO_Init+0x100>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <MX_GPIO_Init+0x100>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b32      	ldr	r3, [pc, #200]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a31      	ldr	r2, [pc, #196]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a2a      	ldr	r2, [pc, #168]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <MX_GPIO_Init+0x100>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LEDG_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80015f4:	481d      	ldr	r0, [pc, #116]	@ (800166c <MX_GPIO_Init+0x104>)
 80015f6:	f001 fc3d 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001600:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4817      	ldr	r0, [pc, #92]	@ (8001670 <MX_GPIO_Init+0x108>)
 8001612:	f001 faab 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001616:	2301      	movs	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4810      	ldr	r0, [pc, #64]	@ (800166c <MX_GPIO_Init+0x104>)
 800162c:	f001 fa9e 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LEDG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LEDG_Pin;
 8001630:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <MX_GPIO_Init+0x104>)
 800164a:	f001 fa8f 	bl	8002b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2006      	movs	r0, #6
 8001654:	f001 fa53 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001658:	2006      	movs	r0, #6
 800165a:	f001 fa6c 	bl	8002b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020800 	.word	0x40020800

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <Error_Handler+0x8>

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016be:	2007      	movs	r0, #7
 80016c0:	f001 fa12 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	@ (800174c <HAL_ADC_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_ADC_MspInit+0x80>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_ADC_MspInit+0x80>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_ADC_MspInit+0x80>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_ADC_MspInit+0x80>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_ADC_MspInit+0x80>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_ADC_MspInit+0x80>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800172a:	2302      	movs	r3, #2
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172e:	2303      	movs	r3, #3
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <HAL_ADC_MspInit+0x84>)
 800173e:	f001 fa15 	bl	8002b6c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40012000 	.word	0x40012000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001768:	d116      	bne.n	8001798 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a23      	ldr	r2, [pc, #140]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	201c      	movs	r0, #28
 800178c:	f001 f9b7 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001790:	201c      	movs	r0, #28
 8001792:	f001 f9d0 	bl	8002b36 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001796:	e02e      	b.n	80017f6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_TIM_Base_MspInit+0xac>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d116      	bne.n	80017d0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a15      	ldr	r2, [pc, #84]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201d      	movs	r0, #29
 80017c4:	f001 f99b 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c8:	201d      	movs	r0, #29
 80017ca:	f001 f9b4 	bl	8002b36 <HAL_NVIC_EnableIRQ>
}
 80017ce:	e012      	b.n	80017f6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001808 <HAL_TIM_Base_MspInit+0xb0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10d      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_TIM_Base_MspInit+0xa8>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40000400 	.word	0x40000400
 8001808:	40000800 	.word	0x40000800

0800180c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <HAL_UART_MspInit+0x84>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12b      	bne.n	8001886 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <HAL_UART_MspInit+0x88>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_UART_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <HAL_UART_MspInit+0x88>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_UART_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001866:	230c      	movs	r3, #12
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001876:	2307      	movs	r3, #7
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	@ (8001898 <HAL_UART_MspInit+0x8c>)
 8001882:	f001 f973 	bl	8002b6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	@ 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40004400 	.word	0x40004400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <NMI_Handler+0x4>

080018a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <MemManage_Handler+0x4>

080018b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 fbe3 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	0000      	movs	r0, r0
 80018fc:	0000      	movs	r0, r0
	...

08001900 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001906:	2001      	movs	r0, #1
 8001908:	f001 fae8 	bl	8002edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

	current_time = __HAL_TIM_GET_COUNTER(&htim4);
 800190c:	4b80      	ldr	r3, [pc, #512]	@ (8001b10 <EXTI0_IRQHandler+0x210>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	4a80      	ldr	r2, [pc, #512]	@ (8001b14 <EXTI0_IRQHandler+0x214>)
 8001914:	6013      	str	r3, [r2, #0]

	if(current_time - last_interrupt_time > 1000){// debounce di circa 60ms, gestisci il pulsante solo se si tratta di pressione intenzionale
 8001916:	4b7f      	ldr	r3, [pc, #508]	@ (8001b14 <EXTI0_IRQHandler+0x214>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b18 <EXTI0_IRQHandler+0x218>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001924:	f240 81a7 	bls.w	8001c76 <EXTI0_IRQHandler+0x376>
		if (led_on == 1) // gestiscici il caso in cui il led si sia effettivamente acceso
 8001928:	4b7c      	ldr	r3, [pc, #496]	@ (8001b1c <EXTI0_IRQHandler+0x21c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f040 8192 	bne.w	8001c56 <EXTI0_IRQHandler+0x356>
		{
			last_interrupt_time = current_time;
 8001932:	4b78      	ldr	r3, [pc, #480]	@ (8001b14 <EXTI0_IRQHandler+0x214>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a78      	ldr	r2, [pc, #480]	@ (8001b18 <EXTI0_IRQHandler+0x218>)
 8001938:	6013      	str	r3, [r2, #0]


			sprintf(buffer, "Successo! Pulsante premuto per la %u° volta.\r\n", cont+1);
 800193a:	4b79      	ldr	r3, [pc, #484]	@ (8001b20 <EXTI0_IRQHandler+0x220>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	461a      	mov	r2, r3
 8001942:	4978      	ldr	r1, [pc, #480]	@ (8001b24 <EXTI0_IRQHandler+0x224>)
 8001944:	4878      	ldr	r0, [pc, #480]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 8001946:	f003 fdd1 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 800194a:	4877      	ldr	r0, [pc, #476]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 800194c:	f7fe fc98 	bl	8000280 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	2364      	movs	r3, #100	@ 0x64
 8001956:	4974      	ldr	r1, [pc, #464]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 8001958:	4874      	ldr	r0, [pc, #464]	@ (8001b2c <EXTI0_IRQHandler+0x22c>)
 800195a:	f002 fc87 	bl	800426c <HAL_UART_Transmit>

			// Spegni LED
			HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001964:	4872      	ldr	r0, [pc, #456]	@ (8001b30 <EXTI0_IRQHandler+0x230>)
 8001966:	f001 fa85 	bl	8002e74 <HAL_GPIO_WritePin>
			led_on = 0;
 800196a:	4b6c      	ldr	r3, [pc, #432]	@ (8001b1c <EXTI0_IRQHandler+0x21c>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

			t = __HAL_TIM_GET_COUNTER(&htim3);
 8001970:	4b70      	ldr	r3, [pc, #448]	@ (8001b34 <EXTI0_IRQHandler+0x234>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	4a70      	ldr	r2, [pc, #448]	@ (8001b38 <EXTI0_IRQHandler+0x238>)
 8001978:	6013      	str	r3, [r2, #0]
			sprintf(buffer, "Tempo di risposta = %lu ms.\r\n", (t*1000)/8400);
 800197a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b38 <EXTI0_IRQHandler+0x238>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	4a6d      	ldr	r2, [pc, #436]	@ (8001b3c <EXTI0_IRQHandler+0x23c>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	0b5b      	lsrs	r3, r3, #13
 800198e:	461a      	mov	r2, r3
 8001990:	496b      	ldr	r1, [pc, #428]	@ (8001b40 <EXTI0_IRQHandler+0x240>)
 8001992:	4865      	ldr	r0, [pc, #404]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 8001994:	f003 fdaa 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8001998:	4863      	ldr	r0, [pc, #396]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 800199a:	f7fe fc71 	bl	8000280 <strlen>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	2364      	movs	r3, #100	@ 0x64
 80019a4:	4960      	ldr	r1, [pc, #384]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 80019a6:	4861      	ldr	r0, [pc, #388]	@ (8001b2c <EXTI0_IRQHandler+0x22c>)
 80019a8:	f002 fc60 	bl	800426c <HAL_UART_Transmit>
			risultati[cont] = (t*1000)/8400;  // tempo di reazione in millisecondi
 80019ac:	4b62      	ldr	r3, [pc, #392]	@ (8001b38 <EXTI0_IRQHandler+0x238>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <EXTI0_IRQHandler+0x220>)
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4611      	mov	r1, r2
 80019be:	4a5f      	ldr	r2, [pc, #380]	@ (8001b3c <EXTI0_IRQHandler+0x23c>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0b5b      	lsrs	r3, r3, #13
 80019c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b44 <EXTI0_IRQHandler+0x244>)
 80019c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

			cont++;
 80019cc:	4b54      	ldr	r3, [pc, #336]	@ (8001b20 <EXTI0_IRQHandler+0x220>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b52      	ldr	r3, [pc, #328]	@ (8001b20 <EXTI0_IRQHandler+0x220>)
 80019d6:	701a      	strb	r2, [r3, #0]

			// Ferma Timer3
			__HAL_TIM_DISABLE(&htim3);
 80019d8:	4b56      	ldr	r3, [pc, #344]	@ (8001b34 <EXTI0_IRQHandler+0x234>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <EXTI0_IRQHandler+0x108>
 80019e8:	4b52      	ldr	r3, [pc, #328]	@ (8001b34 <EXTI0_IRQHandler+0x234>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <EXTI0_IRQHandler+0x108>
 80019f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001b34 <EXTI0_IRQHandler+0x234>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001b34 <EXTI0_IRQHandler+0x234>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001a08:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <EXTI0_IRQHandler+0x234>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24

			timeout = 1.0f + ((float)rand() / RAND_MAX) * 3.0f;
 8001a10:	f003 f816 	bl	8004a40 <rand>
 8001a14:	ee07 0a90 	vmov	s15, r0
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001b48 <EXTI0_IRQHandler+0x248>
 8001a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a24:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a34:	4b45      	ldr	r3, [pc, #276]	@ (8001b4c <EXTI0_IRQHandler+0x24c>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
			sprintf(buffer, "Il led si accenderà fra: %2.2f secondi.\r\n", timeout);
 8001a3a:	4b44      	ldr	r3, [pc, #272]	@ (8001b4c <EXTI0_IRQHandler+0x24c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd8a 	bl	8000558 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4941      	ldr	r1, [pc, #260]	@ (8001b50 <EXTI0_IRQHandler+0x250>)
 8001a4a:	4837      	ldr	r0, [pc, #220]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 8001a4c:	f003 fd4e 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8001a50:	4835      	ldr	r0, [pc, #212]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 8001a52:	f7fe fc15 	bl	8000280 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	2364      	movs	r3, #100	@ 0x64
 8001a5c:	4932      	ldr	r1, [pc, #200]	@ (8001b28 <EXTI0_IRQHandler+0x228>)
 8001a5e:	4833      	ldr	r0, [pc, #204]	@ (8001b2c <EXTI0_IRQHandler+0x22c>)
 8001a60:	f002 fc04 	bl	800426c <HAL_UART_Transmit>
			CP = (uint32_t)(timeout * (84000000.0f / (9999 + 1)));  // calcolo il valore di timeout ed il corrispettivo counter period per generare un segnale alla frequenza mediafreq
 8001a64:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <EXTI0_IRQHandler+0x24c>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001b54 <EXTI0_IRQHandler+0x254>
 8001a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <EXTI0_IRQHandler+0x258>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]

			if(cont<5){
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <EXTI0_IRQHandler+0x220>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d83c      	bhi.n	8001b02 <EXTI0_IRQHandler+0x202>

				__HAL_TIM_DISABLE(&htim2);
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a1a      	ldr	r2, [r3, #32]
 8001a8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10f      	bne.n	8001ab8 <EXTI0_IRQHandler+0x1b8>
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <EXTI0_IRQHandler+0x1b8>
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0201 	mvn.w	r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
				__HAL_TIM_SET_AUTORELOAD(&htim2, CP);
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <EXTI0_IRQHandler+0x258>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad0:	ee17 2a90 	vmov	r2, s15
 8001ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <EXTI0_IRQHandler+0x258>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001ae6:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	@ 0x24
				__HAL_TIM_ENABLE(&htim2);
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <EXTI0_IRQHandler+0x25c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
			HAL_PWR_DisableSleepOnExit ();
		}
	}

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b00:	e0b9      	b.n	8001c76 <EXTI0_IRQHandler+0x376>
				vittoria = 1;
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <EXTI0_IRQHandler+0x260>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<5; i++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e03e      	b.n	8001b8c <EXTI0_IRQHandler+0x28c>
 8001b0e:	bf00      	nop
 8001b10:	200002d4 	.word	0x200002d4
 8001b14:	20000538 	.word	0x20000538
 8001b18:	20000534 	.word	0x20000534
 8001b1c:	2000053c 	.word	0x2000053c
 8001b20:	20000530 	.word	0x20000530
 8001b24:	08008b84 	.word	0x08008b84
 8001b28:	20000468 	.word	0x20000468
 8001b2c:	2000031c 	.word	0x2000031c
 8001b30:	40020000 	.word	0x40020000
 8001b34:	2000028c 	.word	0x2000028c
 8001b38:	20000540 	.word	0x20000540
 8001b3c:	f9a9342d 	.word	0xf9a9342d
 8001b40:	08008bb4 	.word	0x08008bb4
 8001b44:	20000430 	.word	0x20000430
 8001b48:	4f000000 	.word	0x4f000000
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	08008bd4 	.word	0x08008bd4
 8001b54:	46034000 	.word	0x46034000
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	20000244 	.word	0x20000244
 8001b60:	20000444 	.word	0x20000444
					somma += risultati[i];
 8001b64:	4a4a      	ldr	r2, [pc, #296]	@ (8001c90 <EXTI0_IRQHandler+0x390>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcd1 	bl	8000514 <__aeabi_ui2d>
 8001b72:	4b48      	ldr	r3, [pc, #288]	@ (8001c94 <EXTI0_IRQHandler+0x394>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fb90 	bl	800029c <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4944      	ldr	r1, [pc, #272]	@ (8001c94 <EXTI0_IRQHandler+0x394>)
 8001b82:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i = 0; i<5; i++){
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	dde8      	ble.n	8001b64 <EXTI0_IRQHandler+0x264>
				punteggio=100*(exp(-pow((((somma/5)-sogliams)/60.2168),2))-1)*((somma/5)-sogliams);
 8001b92:	4b40      	ldr	r3, [pc, #256]	@ (8001c94 <EXTI0_IRQHandler+0x394>)
 8001b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c98 <EXTI0_IRQHandler+0x398>)
 8001b9e:	f7fe fe5d 	bl	800085c <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4b3c      	ldr	r3, [pc, #240]	@ (8001c9c <EXTI0_IRQHandler+0x39c>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fb72 	bl	8000298 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	a330      	add	r3, pc, #192	@ (adr r3, 8001c80 <EXTI0_IRQHandler+0x380>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fe4b 	bl	800085c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	ec43 2b17 	vmov	d7, r2, r3
 8001bce:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8001c88 <EXTI0_IRQHandler+0x388>
 8001bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd6:	eef0 0a67 	vmov.f32	s1, s15
 8001bda:	f005 fe05 	bl	80077e8 <pow>
 8001bde:	ec53 2b10 	vmov	r2, r3, d0
 8001be2:	4614      	mov	r4, r2
 8001be4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001be8:	ec45 4b10 	vmov	d0, r4, r5
 8001bec:	f005 fdb4 	bl	8007758 <exp>
 8001bf0:	ec51 0b10 	vmov	r0, r1, d0
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <EXTI0_IRQHandler+0x3a0>)
 8001bfa:	f7fe fb4d 	bl	8000298 <__aeabi_dsub>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <EXTI0_IRQHandler+0x3a4>)
 8001c0c:	f7fe fcfc 	bl	8000608 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <EXTI0_IRQHandler+0x394>)
 8001c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <EXTI0_IRQHandler+0x398>)
 8001c24:	f7fe fe1a 	bl	800085c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <EXTI0_IRQHandler+0x39c>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fb2f 	bl	8000298 <__aeabi_dsub>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4620      	mov	r0, r4
 8001c40:	4629      	mov	r1, r5
 8001c42:	f7fe fce1 	bl	8000608 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4917      	ldr	r1, [pc, #92]	@ (8001ca8 <EXTI0_IRQHandler+0x3a8>)
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_PWR_DisableSleepOnExit (); // caso in cui si è completata la prova con successo
 8001c50:	f001 f9d6 	bl	8003000 <HAL_PWR_DisableSleepOnExit>
}
 8001c54:	e00f      	b.n	8001c76 <EXTI0_IRQHandler+0x376>
			sprintf(buffer, "Hai premuto il pulsante troppo presto! La sessione è andata persa. \r\n");
 8001c56:	4915      	ldr	r1, [pc, #84]	@ (8001cac <EXTI0_IRQHandler+0x3ac>)
 8001c58:	4815      	ldr	r0, [pc, #84]	@ (8001cb0 <EXTI0_IRQHandler+0x3b0>)
 8001c5a:	f003 fc47 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8001c5e:	4814      	ldr	r0, [pc, #80]	@ (8001cb0 <EXTI0_IRQHandler+0x3b0>)
 8001c60:	f7fe fb0e 	bl	8000280 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2364      	movs	r3, #100	@ 0x64
 8001c6a:	4911      	ldr	r1, [pc, #68]	@ (8001cb0 <EXTI0_IRQHandler+0x3b0>)
 8001c6c:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <EXTI0_IRQHandler+0x3b4>)
 8001c6e:	f002 fafd 	bl	800426c <HAL_UART_Transmit>
			HAL_PWR_DisableSleepOnExit ();
 8001c72:	f001 f9c5 	bl	8003000 <HAL_PWR_DisableSleepOnExit>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	1a36e2eb 	.word	0x1a36e2eb
 8001c84:	404e1bc0 	.word	0x404e1bc0
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40000000 	.word	0x40000000
 8001c90:	20000430 	.word	0x20000430
 8001c94:	20000460 	.word	0x20000460
 8001c98:	40140000 	.word	0x40140000
 8001c9c:	20000450 	.word	0x20000450
 8001ca0:	3ff00000 	.word	0x3ff00000
 8001ca4:	40590000 	.word	0x40590000
 8001ca8:	20000458 	.word	0x20000458
 8001cac:	08008c00 	.word	0x08008c00
 8001cb0:	20000468 	.word	0x20000468
 8001cb4:	2000031c 	.word	0x2000031c

08001cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cbc:	4829      	ldr	r0, [pc, #164]	@ (8001d64 <TIM2_IRQHandler+0xac>)
 8001cbe:	f001 fef9 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	led_on = 1;
 8001cc2:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <TIM2_IRQHandler+0xb0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
	sprintf(buffer, "LED acceso!\r\n");
 8001cc8:	4928      	ldr	r1, [pc, #160]	@ (8001d6c <TIM2_IRQHandler+0xb4>)
 8001cca:	4829      	ldr	r0, [pc, #164]	@ (8001d70 <TIM2_IRQHandler+0xb8>)
 8001ccc:	f003 fc0e 	bl	80054ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8001cd0:	4827      	ldr	r0, [pc, #156]	@ (8001d70 <TIM2_IRQHandler+0xb8>)
 8001cd2:	f7fe fad5 	bl	8000280 <strlen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	2364      	movs	r3, #100	@ 0x64
 8001cdc:	4924      	ldr	r1, [pc, #144]	@ (8001d70 <TIM2_IRQHandler+0xb8>)
 8001cde:	4825      	ldr	r0, [pc, #148]	@ (8001d74 <TIM2_IRQHandler+0xbc>)
 8001ce0:	f002 fac4 	bl	800426c <HAL_UART_Transmit>

	// Ferma Timer2 per non far scattare ripetutamente l'IRQ
	__HAL_TIM_DISABLE(&htim2);
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <TIM2_IRQHandler+0xac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <TIM2_IRQHandler+0x5c>
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <TIM2_IRQHandler+0xac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	f240 4344 	movw	r3, #1092	@ 0x444
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <TIM2_IRQHandler+0x5c>
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <TIM2_IRQHandler+0xac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <TIM2_IRQHandler+0xac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <TIM2_IRQHandler+0xac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24

	// faccio partire la base dei tempi di tim3 solo alla prima run
	if(a == 0){
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <TIM2_IRQHandler+0xc0>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <TIM2_IRQHandler+0x82>
		a = 1;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <TIM2_IRQHandler+0xc0>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <TIM2_IRQHandler+0xc4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim3);}
 8001d32:	4812      	ldr	r0, [pc, #72]	@ (8001d7c <TIM2_IRQHandler+0xc4>)
 8001d34:	f001 fe5c 	bl	80039f0 <HAL_TIM_Base_Start_IT>
 8001d38:	e00b      	b.n	8001d52 <TIM2_IRQHandler+0x9a>
	else{
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <TIM2_IRQHandler+0xc4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_ENABLE(&htim3);
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <TIM2_IRQHandler+0xc4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <TIM2_IRQHandler+0xc4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
	}
	// Accendi LED
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d58:	4809      	ldr	r0, [pc, #36]	@ (8001d80 <TIM2_IRQHandler+0xc8>)
 8001d5a:	f001 f88b 	bl	8002e74 <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000244 	.word	0x20000244
 8001d68:	2000053c 	.word	0x2000053c
 8001d6c:	08008c48 	.word	0x08008c48
 8001d70:	20000468 	.word	0x20000468
 8001d74:	2000031c 	.word	0x2000031c
 8001d78:	2000042c 	.word	0x2000042c
 8001d7c:	2000028c 	.word	0x2000028c
 8001d80:	40020000 	.word	0x40020000

08001d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d88:	481c      	ldr	r0, [pc, #112]	@ (8001dfc <TIM3_IRQHandler+0x78>)
 8001d8a:	f001 fe93 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	sprintf(buffer, "Sono passati 3 secondi, la sessione è andata persa.\r\n");
 8001d8e:	491c      	ldr	r1, [pc, #112]	@ (8001e00 <TIM3_IRQHandler+0x7c>)
 8001d90:	481c      	ldr	r0, [pc, #112]	@ (8001e04 <TIM3_IRQHandler+0x80>)
 8001d92:	f003 fbab 	bl	80054ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8001d96:	481b      	ldr	r0, [pc, #108]	@ (8001e04 <TIM3_IRQHandler+0x80>)
 8001d98:	f7fe fa72 	bl	8000280 <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	2364      	movs	r3, #100	@ 0x64
 8001da2:	4918      	ldr	r1, [pc, #96]	@ (8001e04 <TIM3_IRQHandler+0x80>)
 8001da4:	4818      	ldr	r0, [pc, #96]	@ (8001e08 <TIM3_IRQHandler+0x84>)
 8001da6:	f002 fa61 	bl	800426c <HAL_UART_Transmit>
	// Spegni LED
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001db0:	4816      	ldr	r0, [pc, #88]	@ (8001e0c <TIM3_IRQHandler+0x88>)
 8001db2:	f001 f85f 	bl	8002e74 <HAL_GPIO_WritePin>
	led_on = 0;
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <TIM3_IRQHandler+0x8c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]

	// Ferma Timer3
	__HAL_TIM_DISABLE(&htim3);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <TIM3_IRQHandler+0x78>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <TIM3_IRQHandler+0x68>
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <TIM3_IRQHandler+0x78>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <TIM3_IRQHandler+0x68>
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <TIM3_IRQHandler+0x78>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <TIM3_IRQHandler+0x78>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <TIM3_IRQHandler+0x78>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_PWR_DisableSleepOnExit ();
 8001df4:	f001 f904 	bl	8003000 <HAL_PWR_DisableSleepOnExit>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000028c 	.word	0x2000028c
 8001e00:	08008c58 	.word	0x08008c58
 8001e04:	20000468 	.word	0x20000468
 8001e08:	2000031c 	.word	0x2000031c
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	2000053c 	.word	0x2000053c

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_kill>:

int _kill(int pid, int sig)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e2e:	f003 fc15 	bl	800565c <__errno>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2216      	movs	r2, #22
 8001e36:	601a      	str	r2, [r3, #0]
  return -1;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_exit>:

void _exit (int status)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ffe7 	bl	8001e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e56:	bf00      	nop
 8001e58:	e7fd      	b.n	8001e56 <_exit+0x12>

08001e5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e00a      	b.n	8001e82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6c:	f3af 8000 	nop.w
 8001e70:	4601      	mov	r1, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	60ba      	str	r2, [r7, #8]
 8001e78:	b2ca      	uxtb	r2, r1
 8001e7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf0      	blt.n	8001e6c <_read+0x12>
  }

  return len;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	e009      	b.n	8001eba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	60ba      	str	r2, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbf1      	blt.n	8001ea6 <_write+0x12>
  }
  return len;
 8001ec2:	687b      	ldr	r3, [r7, #4]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_close>:

int _close(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_isatty>:

int _isatty(int file)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <_sbrk+0x5c>)
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <_sbrk+0x60>)
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <_sbrk+0x64>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <_sbrk+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d207      	bcs.n	8001f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f64:	f003 fb7a 	bl	800565c <__errno>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20018000 	.word	0x20018000
 8001f94:	00000400 	.word	0x00000400
 8001f98:	20000544 	.word	0x20000544
 8001f9c:	20000698 	.word	0x20000698

08001fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fc8:	f7ff ffea 	bl	8001fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	@ (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f003 fb39 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7fe ff75 	bl	8000ee4 <main>
  bx  lr    
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ffc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002008:	080090f8 	.word	0x080090f8
  ldr r2, =_sbss
 800200c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002010:	20000698 	.word	0x20000698

08002014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0d      	ldr	r2, [pc, #52]	@ (8002058 <HAL_Init+0x40>)
 8002022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_Init+0x40>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	@ (8002058 <HAL_Init+0x40>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f000 fd51 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	2000      	movs	r0, #0
 8002048:	f000 f808 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fb18 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd69 	bl	8002b52 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f000 fd31 	bl	8002afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	@ (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000010 	.word	0x20000010
 80020b8:	2000000c 	.word	0x2000000c

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000010 	.word	0x20000010
 80020e0:	20000548 	.word	0x20000548

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000548 	.word	0x20000548

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000010 	.word	0x20000010

08002144 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_SuspendTick+0x1c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_SuspendTick+0x1c>)
 800214e:	f023 0302 	bic.w	r3, r3, #2
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_ResumeTick+0x1c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <HAL_ResumeTick+0x1c>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e033      	b.n	8002202 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fa94 	bl	80016d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ca:	f023 0302 	bic.w	r3, r3, #2
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 faba 	bl	8002750 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80021f2:	e001      	b.n	80021f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ADC_Start+0x1a>
 8002222:	2302      	movs	r3, #2
 8002224:	e097      	b.n	8002356 <HAL_ADC_Start+0x14a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d018      	beq.n	800226e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800224c:	4b45      	ldr	r3, [pc, #276]	@ (8002364 <HAL_ADC_Start+0x158>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a45      	ldr	r2, [pc, #276]	@ (8002368 <HAL_ADC_Start+0x15c>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9a      	lsrs	r2, r3, #18
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002260:	e002      	b.n	8002268 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3b01      	subs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f9      	bne.n	8002262 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d15f      	bne.n	800233c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ba:	d106      	bne.n	80022ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f023 0206 	bic.w	r2, r3, #6
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80022c8:	e002      	b.n	80022d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_ADC_Start+0x160>)
 80022da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022e4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10f      	bne.n	8002312 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d129      	bne.n	8002354 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e020      	b.n	8002354 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a16      	ldr	r2, [pc, #88]	@ (8002370 <HAL_ADC_Start+0x164>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d11b      	bne.n	8002354 <HAL_ADC_Start+0x148>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d114      	bne.n	8002354 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	e00b      	b.n	8002354 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f043 0210 	orr.w	r2, r3, #16
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000008 	.word	0x20000008
 8002368:	431bde83 	.word	0x431bde83
 800236c:	40012300 	.word	0x40012300
 8002370:	40012000 	.word	0x40012000

08002374 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Stop+0x16>
 8002386:	2302      	movs	r3, #2
 8002388:	e021      	b.n	80023ce <HAL_ADC_Stop+0x5a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f6:	d113      	bne.n	8002420 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e063      	b.n	80024e8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7ff fe60 	bl	80020e4 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002426:	e021      	b.n	800246c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d01d      	beq.n	800246c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_ADC_PollForConversion+0x6c>
 8002436:	f7ff fe55 	bl	80020e4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d212      	bcs.n	800246c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d00b      	beq.n	800246c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0204 	orr.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03d      	b.n	80024e8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d1d6      	bne.n	8002428 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0212 	mvn.w	r2, #18
 8002482:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d123      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d11f      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d111      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e105      	b.n	8002734 <HAL_ADC_ConfigChannel+0x228>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d925      	bls.n	8002584 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	3b1e      	subs	r3, #30
 800254e:	2207      	movs	r2, #7
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43da      	mvns	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	400a      	ands	r2, r1
 800255c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68d9      	ldr	r1, [r3, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	4603      	mov	r3, r0
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4403      	add	r3, r0
 8002576:	3b1e      	subs	r3, #30
 8002578:	409a      	lsls	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	e022      	b.n	80025ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	2207      	movs	r2, #7
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6919      	ldr	r1, [r3, #16]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4403      	add	r3, r0
 80025c0:	409a      	lsls	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d824      	bhi.n	800261c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3b05      	subs	r3, #5
 80025e4:	221f      	movs	r2, #31
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	fa00 f203 	lsl.w	r2, r0, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	@ 0x34
 800261a:	e04c      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d824      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b23      	subs	r3, #35	@ 0x23
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4618      	mov	r0, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b23      	subs	r3, #35	@ 0x23
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	631a      	str	r2, [r3, #48]	@ 0x30
 800266c:	e023      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b41      	subs	r3, #65	@ 0x41
 8002680:	221f      	movs	r2, #31
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	400a      	ands	r2, r1
 800268e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	@ 0x41
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b6:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <HAL_ADC_ConfigChannel+0x234>)
 80026b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <HAL_ADC_ConfigChannel+0x238>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d109      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x1cc>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	@ (8002744 <HAL_ADC_ConfigChannel+0x238>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d123      	bne.n	800272a <HAL_ADC_ConfigChannel+0x21e>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d003      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x1e6>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d11b      	bne.n	800272a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d111      	bne.n	800272a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_ADC_ConfigChannel+0x23c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <HAL_ADC_ConfigChannel+0x240>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9a      	lsrs	r2, r3, #18
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800271c:	e002      	b.n	8002724 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3b01      	subs	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f9      	bne.n	800271e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40012300 	.word	0x40012300
 8002744:	40012000 	.word	0x40012000
 8002748:	20000008 	.word	0x20000008
 800274c:	431bde83 	.word	0x431bde83

08002750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002758:	4b79      	ldr	r3, [pc, #484]	@ (8002940 <ADC_Init+0x1f0>)
 800275a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e2:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <ADC_Init+0x1f4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	e00f      	b.n	800284e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800283c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0202 	bic.w	r2, r2, #2
 800285c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e1b      	ldrb	r3, [r3, #24]
 8002868:	005a      	lsls	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800289a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	3b01      	subs	r3, #1
 80028a8:	035a      	lsls	r2, r3, #13
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e007      	b.n	80028c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	3b01      	subs	r3, #1
 80028e0:	051a      	lsls	r2, r3, #20
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002906:	025a      	lsls	r2, r3, #9
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	029a      	lsls	r2, r3, #10
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40012300 	.word	0x40012300
 8002944:	0f000001 	.word	0x0f000001

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	@ (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	@ (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	@ (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	@ (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	@ 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab4:	d301      	bcc.n	8002aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00f      	b.n	8002ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <SysTick_Config+0x40>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f7ff ff8e 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <SysTick_Config+0x40>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <SysTick_Config+0x40>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff29 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b10:	f7ff ff3e 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f7ff ff8e 	bl	8002a3c <NVIC_EncodePriority>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5d 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff31 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ffa2 	bl	8002aa4 <SysTick_Config>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	@ 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e159      	b.n	8002e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	f040 8148 	bne.w	8002e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d005      	beq.n	8002bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d130      	bne.n	8002c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 0201 	and.w	r2, r3, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d017      	beq.n	8002c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d123      	bne.n	8002cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3208      	adds	r2, #8
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	69b9      	ldr	r1, [r7, #24]
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a2 	beq.w	8002e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b57      	ldr	r3, [pc, #348]	@ (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d02:	4b54      	ldr	r3, [pc, #336]	@ (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d0e:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_GPIO_Init+0x2ec>)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a49      	ldr	r2, [pc, #292]	@ (8002e5c <HAL_GPIO_Init+0x2f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0x202>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a48      	ldr	r2, [pc, #288]	@ (8002e60 <HAL_GPIO_Init+0x2f4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_GPIO_Init+0x1fe>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a47      	ldr	r2, [pc, #284]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00d      	beq.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a46      	ldr	r2, [pc, #280]	@ (8002e68 <HAL_GPIO_Init+0x2fc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <HAL_GPIO_Init+0x1f6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a45      	ldr	r2, [pc, #276]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_GPIO_Init+0x1f2>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e008      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d5e:	2307      	movs	r3, #7
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x204>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d80:	4935      	ldr	r1, [pc, #212]	@ (8002e58 <HAL_GPIO_Init+0x2ec>)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8e:	4b38      	ldr	r3, [pc, #224]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db2:	4a2f      	ldr	r2, [pc, #188]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ddc:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de2:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e06:	4a1a      	ldr	r2, [pc, #104]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e30:	4a0f      	ldr	r2, [pc, #60]	@ (8002e70 <HAL_GPIO_Init+0x304>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	f67f aea2 	bls.w	8002b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40013c00 	.word	0x40013c00

08002e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e84:	787b      	ldrb	r3, [r7, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e90:	e003      	b.n	8002e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	619a      	str	r2, [r3, #24]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eb8:	887a      	ldrh	r2, [r7, #2]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	041a      	lsls	r2, r3, #16
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43d9      	mvns	r1, r3
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ef2:	4a05      	ldr	r2, [pc, #20]	@ (8002f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f806 	bl	8002f0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4904      	ldr	r1, [pc, #16]	@ (8002f44 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40007000 	.word	0x40007000

08002f48 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <HAL_PWR_DisableWakeUpPin+0x24>)
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4904      	ldr	r1, [pc, #16]	@ (8002f6c <HAL_PWR_DisableWakeUpPin+0x24>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40007000 	.word	0x40007000

08002f70 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_PWR_EnterSLEEPMode+0x3c>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_PWR_EnterSLEEPMode+0x3c>)
 8002f82:	f023 0304 	bic.w	r3, r3, #4
 8002f86:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8002f8e:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8002f90:	e005      	b.n	8002f9e <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d001      	beq.n	8002f9c <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8002f98:	bf40      	sev
      __WFE();
 8002f9a:	bf20      	wfe
    __WFE();
 8002f9c:	bf20      	wfe
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002fb4:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002fcc:	bf30      	wfi
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_PWR_EnableSleepOnExit+0x1c>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	@ (8002ffc <HAL_PWR_EnableSleepOnExit+0x1c>)
 8002fea:	f043 0302 	orr.w	r3, r3, #2
 8002fee:	6113      	str	r3, [r2, #16]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4a04      	ldr	r2, [pc, #16]	@ (800301c <HAL_PWR_DisableSleepOnExit+0x1c>)
 800300a:	f023 0302 	bic.w	r3, r3, #2
 800300e:	6113      	str	r3, [r2, #16]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e267      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d075      	beq.n	800312a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800303e:	4b88      	ldr	r3, [pc, #544]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00c      	beq.n	8003064 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304a:	4b85      	ldr	r3, [pc, #532]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003052:	2b08      	cmp	r3, #8
 8003054:	d112      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b82      	ldr	r3, [pc, #520]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003062:	d10b      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	4b7e      	ldr	r3, [pc, #504]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05b      	beq.n	8003128 <HAL_RCC_OscConfig+0x108>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d157      	bne.n	8003128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e242      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003084:	d106      	bne.n	8003094 <HAL_RCC_OscConfig+0x74>
 8003086:	4b76      	ldr	r3, [pc, #472]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a75      	ldr	r2, [pc, #468]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x98>
 800309e:	4b70      	ldr	r3, [pc, #448]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 80030b8:	4b69      	ldr	r3, [pc, #420]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a68      	ldr	r2, [pc, #416]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b66      	ldr	r3, [pc, #408]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a65      	ldr	r2, [pc, #404]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff f804 	bl	80020e4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7ff f800 	bl	80020e4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	@ 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e207      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xc0>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fff0 	bl	80020e4 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe ffec 	bl	80020e4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1f3      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b51      	ldr	r3, [pc, #324]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0xe8>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003136:	4b4a      	ldr	r3, [pc, #296]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003142:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	4b44      	ldr	r3, [pc, #272]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b41      	ldr	r3, [pc, #260]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c7      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4937      	ldr	r1, [pc, #220]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b34      	ldr	r3, [pc, #208]	@ (8003264 <HAL_RCC_OscConfig+0x244>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe ffa5 	bl	80020e4 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe ffa1 	bl	80020e4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a8      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4925      	ldr	r1, [pc, #148]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <HAL_RCC_OscConfig+0x244>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe ff84 	bl	80020e4 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe ff80 	bl	80020e4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e187      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d036      	beq.n	8003278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <HAL_RCC_OscConfig+0x248>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe ff64 	bl	80020e4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe ff60 	bl	80020e4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e167      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_OscConfig+0x240>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x200>
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_OscConfig+0x248>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fe ff4d 	bl	80020e4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e00e      	b.n	800326c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324e:	f7fe ff49 	bl	80020e4 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d907      	bls.n	800326c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e150      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
 8003260:	40023800 	.word	0x40023800
 8003264:	42470000 	.word	0x42470000
 8003268:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b88      	ldr	r3, [pc, #544]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ea      	bne.n	800324e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8097 	beq.w	80033b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b81      	ldr	r3, [pc, #516]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10f      	bne.n	80032b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b7d      	ldr	r3, [pc, #500]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	4a7c      	ldr	r2, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b77      	ldr	r3, [pc, #476]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c2:	4b74      	ldr	r3, [pc, #464]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a73      	ldr	r2, [pc, #460]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fe ff09 	bl	80020e4 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fe ff05 	bl	80020e4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e10c      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003494 <HAL_RCC_OscConfig+0x474>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x2ea>
 80032fc:	4b64      	ldr	r3, [pc, #400]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003300:	4a63      	ldr	r2, [pc, #396]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	@ 0x70
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x324>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x30c>
 8003312:	4b5f      	ldr	r3, [pc, #380]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	4a5e      	ldr	r2, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	@ 0x70
 800331e:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	4a5b      	ldr	r2, [pc, #364]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	@ 0x70
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0x324>
 800332c:	4b58      	ldr	r3, [pc, #352]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a57      	ldr	r2, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	4b55      	ldr	r3, [pc, #340]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a54      	ldr	r2, [pc, #336]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe feca 	bl	80020e4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe fec6 	bl	80020e4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0cb      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ee      	beq.n	8003354 <HAL_RCC_OscConfig+0x334>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003378:	f7fe feb4 	bl	80020e4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe feb0 	bl	80020e4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0b5      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003396:	4b3e      	ldr	r3, [pc, #248]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ee      	bne.n	8003380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a8:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	4a38      	ldr	r2, [pc, #224]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a1 	beq.w	8003500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033be:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d05c      	beq.n	8003484 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d141      	bne.n	8003456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <HAL_RCC_OscConfig+0x478>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fe84 	bl	80020e4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fe80 	bl	80020e4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e087      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x478>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe fe59 	bl	80020e4 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe fe55 	bl	80020e4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e05c      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x416>
 8003454:	e054      	b.n	8003500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fe42 	bl	80020e4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fe3e 	bl	80020e4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e045      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x444>
 8003482:	e03d      	b.n	8003500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e038      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
 8003498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800349c:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x4ec>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d028      	beq.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d121      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fe fd70 	bl	80020e4 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe fd6c 	bl	80020e4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fcd0 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08008c90 	.word	0x08008c90
 80036d4:	20000008 	.word	0x20000008
 80036d8:	2000000c 	.word	0x2000000c

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b094      	sub	sp, #80	@ 0x50
 80036e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f4:	4b79      	ldr	r3, [pc, #484]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d00d      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x40>
 8003700:	2b08      	cmp	r3, #8
 8003702:	f200 80e1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x34>
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x3a>
 800370e:	e0db      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b73      	ldr	r3, [pc, #460]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003714:	e0db      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b73      	ldr	r3, [pc, #460]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003718:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800371a:	e0d8      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003724:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b6d      	ldr	r3, [pc, #436]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b6a      	ldr	r3, [pc, #424]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	2200      	movs	r2, #0
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800373c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	633b      	str	r3, [r7, #48]	@ 0x30
 8003746:	2300      	movs	r3, #0
 8003748:	637b      	str	r3, [r7, #52]	@ 0x34
 800374a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	0159      	lsls	r1, r3, #5
 800375c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003760:	0150      	lsls	r0, r2, #5
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4621      	mov	r1, r4
 8003768:	1a51      	subs	r1, r2, r1
 800376a:	6139      	str	r1, [r7, #16]
 800376c:	4629      	mov	r1, r5
 800376e:	eb63 0301 	sbc.w	r3, r3, r1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003780:	4659      	mov	r1, fp
 8003782:	018b      	lsls	r3, r1, #6
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800378a:	4651      	mov	r1, sl
 800378c:	018a      	lsls	r2, r1, #6
 800378e:	4651      	mov	r1, sl
 8003790:	ebb2 0801 	subs.w	r8, r2, r1
 8003794:	4659      	mov	r1, fp
 8003796:	eb63 0901 	sbc.w	r9, r3, r1
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	eb18 0303 	adds.w	r3, r8, r3
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	462b      	mov	r3, r5
 80037bc:	eb49 0303 	adc.w	r3, r9, r3
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ce:	4629      	mov	r1, r5
 80037d0:	024b      	lsls	r3, r1, #9
 80037d2:	4621      	mov	r1, r4
 80037d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d8:	4621      	mov	r1, r4
 80037da:	024a      	lsls	r2, r1, #9
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e2:	2200      	movs	r2, #0
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037ec:	f7fd f9e4 	bl	8000bb8 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f8:	e058      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	2200      	movs	r2, #0
 8003802:	4618      	mov	r0, r3
 8003804:	4611      	mov	r1, r2
 8003806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003826:	0150      	lsls	r0, r2, #5
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4641      	mov	r1, r8
 800382e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003832:	4649      	mov	r1, r9
 8003834:	eb63 0b01 	sbc.w	fp, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800384c:	ebb2 040a 	subs.w	r4, r2, sl
 8003850:	eb63 050b 	sbc.w	r5, r3, fp
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	00eb      	lsls	r3, r5, #3
 800385e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	4614      	mov	r4, r2
 8003866:	461d      	mov	r5, r3
 8003868:	4643      	mov	r3, r8
 800386a:	18e3      	adds	r3, r4, r3
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	464b      	mov	r3, r9
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003882:	4629      	mov	r1, r5
 8003884:	028b      	lsls	r3, r1, #10
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800388c:	4621      	mov	r1, r4
 800388e:	028a      	lsls	r2, r1, #10
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	61fa      	str	r2, [r7, #28]
 800389c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a0:	f7fd f98a 	bl	8000bb8 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3750      	adds	r7, #80	@ 0x50
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000008 	.word	0x20000008

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08008ca0 	.word	0x08008ca0

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08008ca0 	.word	0x08008ca0

08003950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e041      	b.n	80039e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd feee 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 fa7a 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e044      	b.n	8003a92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d018      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x6c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a32:	d013      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x6c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00e      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x6c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x6c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_TIM_Base_Start_IT+0xbc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x6c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d111      	bne.n	8003a80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d010      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	e007      	b.n	8003a90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40014000 	.word	0x40014000

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9a3 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f995 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9a6 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f97d 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f96f 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f980 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f957 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f949 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f95a 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f931 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f923 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f934 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f901 	bl	8003e22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 faba 	bl	80041b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f905 	bl	8003e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa8c 	bl	80041a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0b4      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x186>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce8:	d03e      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xd4>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cee:	f200 8087 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	f000 8086 	beq.w	8003e06 <HAL_TIM_ConfigClockSource+0x172>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfe:	d87f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b70      	cmp	r3, #112	@ 0x70
 8003d02:	d01a      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xa6>
 8003d04:	2b70      	cmp	r3, #112	@ 0x70
 8003d06:	d87b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b60      	cmp	r3, #96	@ 0x60
 8003d0a:	d050      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x11a>
 8003d0c:	2b60      	cmp	r3, #96	@ 0x60
 8003d0e:	d877      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b50      	cmp	r3, #80	@ 0x50
 8003d12:	d03c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xfa>
 8003d14:	2b50      	cmp	r3, #80	@ 0x50
 8003d16:	d873      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d058      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x13a>
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d86f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d064      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d86b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d060      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d867      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d05a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	e062      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	f000 f99d 	bl	8004088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e04f      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	f000 f986 	bl	8004088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e03c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 f8fa 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2150      	movs	r1, #80	@ 0x50
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f953 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dac:	e02c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 f919 	bl	8003ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2160      	movs	r1, #96	@ 0x60
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f943 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e01c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f8da 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2140      	movs	r1, #64	@ 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f933 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 f92a 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a37      	ldr	r2, [pc, #220]	@ (8003f78 <TIM_Base_SetConfig+0xf0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00f      	beq.n	8003ec0 <TIM_Base_SetConfig+0x38>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0x38>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a34      	ldr	r2, [pc, #208]	@ (8003f7c <TIM_Base_SetConfig+0xf4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0x38>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	@ (8003f80 <TIM_Base_SetConfig+0xf8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0x38>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a32      	ldr	r2, [pc, #200]	@ (8003f84 <TIM_Base_SetConfig+0xfc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <TIM_Base_SetConfig+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01b      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee0:	d017      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	@ (8003f7c <TIM_Base_SetConfig+0xf4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a24      	ldr	r2, [pc, #144]	@ (8003f80 <TIM_Base_SetConfig+0xf8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00f      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <TIM_Base_SetConfig+0xfc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00b      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a22      	ldr	r2, [pc, #136]	@ (8003f88 <TIM_Base_SetConfig+0x100>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a21      	ldr	r2, [pc, #132]	@ (8003f8c <TIM_Base_SetConfig+0x104>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a20      	ldr	r2, [pc, #128]	@ (8003f90 <TIM_Base_SetConfig+0x108>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d108      	bne.n	8003f24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <TIM_Base_SetConfig+0xf0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d103      	bne.n	8003f52 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f023 0210 	bic.w	r2, r3, #16
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800401c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	031b      	lsls	r3, r3, #12
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800402e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 0307 	orr.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e050      	b.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d013      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a18      	ldr	r2, [pc, #96]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a15      	ldr	r2, [pc, #84]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10c      	bne.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4313      	orrs	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40014000 	.word	0x40014000

080041a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e042      	b.n	8004264 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd fb0a 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2224      	movs	r2, #36	@ 0x24
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800420e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f973 	bl	80044fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	@ 0x28
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b20      	cmp	r3, #32
 800428a:	d175      	bne.n	8004378 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Transmit+0x2c>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e06e      	b.n	800437a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	@ 0x21
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042aa:	f7fd ff1b 	bl	80020e4 <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	88fa      	ldrh	r2, [r7, #6]
 80042b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	d108      	bne.n	80042d8 <HAL_UART_Transmit+0x6c>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	e003      	b.n	80042e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042e0:	e02e      	b.n	8004340 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f848 	bl	8004382 <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e03a      	b.n	800437a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	3302      	adds	r3, #2
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e007      	b.n	8004332 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	3301      	adds	r3, #1
 8004330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1cb      	bne.n	80042e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2200      	movs	r2, #0
 8004352:	2140      	movs	r1, #64	@ 0x40
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f814 	bl	8004382 <UART_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e006      	b.n	800437a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	e03b      	b.n	800440c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d037      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439c:	f7fd fea2 	bl	80020e4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e03a      	b.n	800442c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d023      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x8a>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b80      	cmp	r3, #128	@ 0x80
 80043c8:	d020      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x8a>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d01d      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d116      	bne.n	800440c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f81d 	bl	8004434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2208      	movs	r2, #8
 80043fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e00f      	b.n	800442c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	429a      	cmp	r2, r3
 8004428:	d0b4      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b095      	sub	sp, #84	@ 0x54
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800445c:	643a      	str	r2, [r7, #64]	@ 0x40
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004462:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800446a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004490:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d119      	bne.n	80044e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044cc:	61ba      	str	r2, [r7, #24]
 80044ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6979      	ldr	r1, [r7, #20]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	613b      	str	r3, [r7, #16]
   return(result);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044ee:	bf00      	nop
 80044f0:	3754      	adds	r7, #84	@ 0x54
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b0c0      	sub	sp, #256	@ 0x100
 8004502:	af00      	add	r7, sp, #0
 8004504:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	68d9      	ldr	r1, [r3, #12]
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	ea40 0301 	orr.w	r3, r0, r1
 8004524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	431a      	orrs	r2, r3
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	431a      	orrs	r2, r3
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004554:	f021 010c 	bic.w	r1, r1, #12
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004562:	430b      	orrs	r3, r1
 8004564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	6999      	ldr	r1, [r3, #24]
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	ea40 0301 	orr.w	r3, r0, r1
 8004582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b8f      	ldr	r3, [pc, #572]	@ (80047c8 <UART_SetConfig+0x2cc>)
 800458c:	429a      	cmp	r2, r3
 800458e:	d005      	beq.n	800459c <UART_SetConfig+0xa0>
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b8d      	ldr	r3, [pc, #564]	@ (80047cc <UART_SetConfig+0x2d0>)
 8004598:	429a      	cmp	r2, r3
 800459a:	d104      	bne.n	80045a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800459c:	f7ff f9c4 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 80045a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045a4:	e003      	b.n	80045ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a6:	f7ff f9ab 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80045aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b8:	f040 810c 	bne.w	80047d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045d6:	415b      	adcs	r3, r3
 80045d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045de:	4621      	mov	r1, r4
 80045e0:	eb12 0801 	adds.w	r8, r2, r1
 80045e4:	4629      	mov	r1, r5
 80045e6:	eb43 0901 	adc.w	r9, r3, r1
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fe:	4690      	mov	r8, r2
 8004600:	4699      	mov	r9, r3
 8004602:	4623      	mov	r3, r4
 8004604:	eb18 0303 	adds.w	r3, r8, r3
 8004608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800460c:	462b      	mov	r3, r5
 800460e:	eb49 0303 	adc.w	r3, r9, r3
 8004612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004622:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800462a:	460b      	mov	r3, r1
 800462c:	18db      	adds	r3, r3, r3
 800462e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004630:	4613      	mov	r3, r2
 8004632:	eb42 0303 	adc.w	r3, r2, r3
 8004636:	657b      	str	r3, [r7, #84]	@ 0x54
 8004638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800463c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004640:	f7fc faba 	bl	8000bb8 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4b61      	ldr	r3, [pc, #388]	@ (80047d0 <UART_SetConfig+0x2d4>)
 800464a:	fba3 2302 	umull	r2, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	011c      	lsls	r4, r3, #4
 8004652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800465c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800466c:	415b      	adcs	r3, r3
 800466e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004674:	4641      	mov	r1, r8
 8004676:	eb12 0a01 	adds.w	sl, r2, r1
 800467a:	4649      	mov	r1, r9
 800467c:	eb43 0b01 	adc.w	fp, r3, r1
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800468c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004694:	4692      	mov	sl, r2
 8004696:	469b      	mov	fp, r3
 8004698:	4643      	mov	r3, r8
 800469a:	eb1a 0303 	adds.w	r3, sl, r3
 800469e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046a2:	464b      	mov	r3, r9
 80046a4:	eb4b 0303 	adc.w	r3, fp, r3
 80046a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046c0:	460b      	mov	r3, r1
 80046c2:	18db      	adds	r3, r3, r3
 80046c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c6:	4613      	mov	r3, r2
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046d6:	f7fc fa6f 	bl	8000bb8 <__aeabi_uldivmod>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	4b3b      	ldr	r3, [pc, #236]	@ (80047d0 <UART_SetConfig+0x2d4>)
 80046e2:	fba3 2301 	umull	r2, r3, r3, r1
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2264      	movs	r2, #100	@ 0x64
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	1acb      	subs	r3, r1, r3
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046f6:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <UART_SetConfig+0x2d4>)
 80046f8:	fba3 2302 	umull	r2, r3, r3, r2
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004704:	441c      	add	r4, r3
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004710:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	1891      	adds	r1, r2, r2
 800471e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004720:	415b      	adcs	r3, r3
 8004722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004728:	4641      	mov	r1, r8
 800472a:	1851      	adds	r1, r2, r1
 800472c:	6339      	str	r1, [r7, #48]	@ 0x30
 800472e:	4649      	mov	r1, r9
 8004730:	414b      	adcs	r3, r1
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004740:	4659      	mov	r1, fp
 8004742:	00cb      	lsls	r3, r1, #3
 8004744:	4651      	mov	r1, sl
 8004746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474a:	4651      	mov	r1, sl
 800474c:	00ca      	lsls	r2, r1, #3
 800474e:	4610      	mov	r0, r2
 8004750:	4619      	mov	r1, r3
 8004752:	4603      	mov	r3, r0
 8004754:	4642      	mov	r2, r8
 8004756:	189b      	adds	r3, r3, r2
 8004758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800475c:	464b      	mov	r3, r9
 800475e:	460a      	mov	r2, r1
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004774:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800477c:	460b      	mov	r3, r1
 800477e:	18db      	adds	r3, r3, r3
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004782:	4613      	mov	r3, r2
 8004784:	eb42 0303 	adc.w	r3, r2, r3
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800478a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800478e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004792:	f7fc fa11 	bl	8000bb8 <__aeabi_uldivmod>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <UART_SetConfig+0x2d4>)
 800479c:	fba3 1302 	umull	r1, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	2164      	movs	r1, #100	@ 0x64
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	3332      	adds	r3, #50	@ 0x32
 80047ae:	4a08      	ldr	r2, [pc, #32]	@ (80047d0 <UART_SetConfig+0x2d4>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	f003 0207 	and.w	r2, r3, #7
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4422      	add	r2, r4
 80047c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047c4:	e106      	b.n	80049d4 <UART_SetConfig+0x4d8>
 80047c6:	bf00      	nop
 80047c8:	40011000 	.word	0x40011000
 80047cc:	40011400 	.word	0x40011400
 80047d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d8:	2200      	movs	r2, #0
 80047da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047e6:	4642      	mov	r2, r8
 80047e8:	464b      	mov	r3, r9
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	6239      	str	r1, [r7, #32]
 80047ee:	415b      	adcs	r3, r3
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047f6:	4641      	mov	r1, r8
 80047f8:	1854      	adds	r4, r2, r1
 80047fa:	4649      	mov	r1, r9
 80047fc:	eb43 0501 	adc.w	r5, r3, r1
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	00eb      	lsls	r3, r5, #3
 800480a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480e:	00e2      	lsls	r2, r4, #3
 8004810:	4614      	mov	r4, r2
 8004812:	461d      	mov	r5, r3
 8004814:	4643      	mov	r3, r8
 8004816:	18e3      	adds	r3, r4, r3
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800481c:	464b      	mov	r3, r9
 800481e:	eb45 0303 	adc.w	r3, r5, r3
 8004822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004842:	4629      	mov	r1, r5
 8004844:	008b      	lsls	r3, r1, #2
 8004846:	4621      	mov	r1, r4
 8004848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484c:	4621      	mov	r1, r4
 800484e:	008a      	lsls	r2, r1, #2
 8004850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004854:	f7fc f9b0 	bl	8000bb8 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b60      	ldr	r3, [pc, #384]	@ (80049e0 <UART_SetConfig+0x4e4>)
 800485e:	fba3 2302 	umull	r2, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	011c      	lsls	r4, r3, #4
 8004866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	61b9      	str	r1, [r7, #24]
 8004880:	415b      	adcs	r3, r3
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004888:	4641      	mov	r1, r8
 800488a:	1851      	adds	r1, r2, r1
 800488c:	6139      	str	r1, [r7, #16]
 800488e:	4649      	mov	r1, r9
 8004890:	414b      	adcs	r3, r1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a0:	4659      	mov	r1, fp
 80048a2:	00cb      	lsls	r3, r1, #3
 80048a4:	4651      	mov	r1, sl
 80048a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048aa:	4651      	mov	r1, sl
 80048ac:	00ca      	lsls	r2, r1, #3
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	4642      	mov	r2, r8
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048bc:	464b      	mov	r3, r9
 80048be:	460a      	mov	r2, r1
 80048c0:	eb42 0303 	adc.w	r3, r2, r3
 80048c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048e0:	4649      	mov	r1, r9
 80048e2:	008b      	lsls	r3, r1, #2
 80048e4:	4641      	mov	r1, r8
 80048e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ea:	4641      	mov	r1, r8
 80048ec:	008a      	lsls	r2, r1, #2
 80048ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048f2:	f7fc f961 	bl	8000bb8 <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	4b38      	ldr	r3, [pc, #224]	@ (80049e0 <UART_SetConfig+0x4e4>)
 80048fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2264      	movs	r2, #100	@ 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	1acb      	subs	r3, r1, r3
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	3332      	adds	r3, #50	@ 0x32
 8004910:	4a33      	ldr	r2, [pc, #204]	@ (80049e0 <UART_SetConfig+0x4e4>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800491c:	441c      	add	r4, r3
 800491e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004922:	2200      	movs	r2, #0
 8004924:	673b      	str	r3, [r7, #112]	@ 0x70
 8004926:	677a      	str	r2, [r7, #116]	@ 0x74
 8004928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	415b      	adcs	r3, r3
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800496e:	464b      	mov	r3, r9
 8004970:	460a      	mov	r2, r1
 8004972:	eb42 0303 	adc.w	r3, r2, r3
 8004976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	663b      	str	r3, [r7, #96]	@ 0x60
 8004982:	667a      	str	r2, [r7, #100]	@ 0x64
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004990:	4649      	mov	r1, r9
 8004992:	008b      	lsls	r3, r1, #2
 8004994:	4641      	mov	r1, r8
 8004996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499a:	4641      	mov	r1, r8
 800499c:	008a      	lsls	r2, r1, #2
 800499e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049a2:	f7fc f909 	bl	8000bb8 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <UART_SetConfig+0x4e4>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	@ 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	3332      	adds	r3, #50	@ 0x32
 80049be:	4a08      	ldr	r2, [pc, #32]	@ (80049e0 <UART_SetConfig+0x4e4>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 020f 	and.w	r2, r3, #15
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4422      	add	r2, r4
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049da:	46bd      	mov	sp, r7
 80049dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e0:	51eb851f 	.word	0x51eb851f

080049e4 <srand>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <srand+0x44>)
 80049e8:	681d      	ldr	r5, [r3, #0]
 80049ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80049ec:	4604      	mov	r4, r0
 80049ee:	b9b3      	cbnz	r3, 8004a1e <srand+0x3a>
 80049f0:	2018      	movs	r0, #24
 80049f2:	f001 fd23 	bl	800643c <malloc>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6328      	str	r0, [r5, #48]	@ 0x30
 80049fa:	b920      	cbnz	r0, 8004a06 <srand+0x22>
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <srand+0x48>)
 80049fe:	480c      	ldr	r0, [pc, #48]	@ (8004a30 <srand+0x4c>)
 8004a00:	2146      	movs	r1, #70	@ 0x46
 8004a02:	f000 fe59 	bl	80056b8 <__assert_func>
 8004a06:	490b      	ldr	r1, [pc, #44]	@ (8004a34 <srand+0x50>)
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <srand+0x54>)
 8004a0a:	e9c0 1300 	strd	r1, r3, [r0]
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <srand+0x58>)
 8004a10:	6083      	str	r3, [r0, #8]
 8004a12:	230b      	movs	r3, #11
 8004a14:	8183      	strh	r3, [r0, #12]
 8004a16:	2100      	movs	r1, #0
 8004a18:	2001      	movs	r0, #1
 8004a1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a1e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a20:	2200      	movs	r2, #0
 8004a22:	611c      	str	r4, [r3, #16]
 8004a24:	615a      	str	r2, [r3, #20]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000020 	.word	0x20000020
 8004a2c:	08008ca8 	.word	0x08008ca8
 8004a30:	08008cbf 	.word	0x08008cbf
 8004a34:	abcd330e 	.word	0xabcd330e
 8004a38:	e66d1234 	.word	0xe66d1234
 8004a3c:	0005deec 	.word	0x0005deec

08004a40 <rand>:
 8004a40:	4b16      	ldr	r3, [pc, #88]	@ (8004a9c <rand+0x5c>)
 8004a42:	b510      	push	{r4, lr}
 8004a44:	681c      	ldr	r4, [r3, #0]
 8004a46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a48:	b9b3      	cbnz	r3, 8004a78 <rand+0x38>
 8004a4a:	2018      	movs	r0, #24
 8004a4c:	f001 fcf6 	bl	800643c <malloc>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6320      	str	r0, [r4, #48]	@ 0x30
 8004a54:	b920      	cbnz	r0, 8004a60 <rand+0x20>
 8004a56:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <rand+0x60>)
 8004a58:	4812      	ldr	r0, [pc, #72]	@ (8004aa4 <rand+0x64>)
 8004a5a:	2152      	movs	r1, #82	@ 0x52
 8004a5c:	f000 fe2c 	bl	80056b8 <__assert_func>
 8004a60:	4911      	ldr	r1, [pc, #68]	@ (8004aa8 <rand+0x68>)
 8004a62:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <rand+0x6c>)
 8004a64:	e9c0 1300 	strd	r1, r3, [r0]
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <rand+0x70>)
 8004a6a:	6083      	str	r3, [r0, #8]
 8004a6c:	230b      	movs	r3, #11
 8004a6e:	8183      	strh	r3, [r0, #12]
 8004a70:	2100      	movs	r1, #0
 8004a72:	2001      	movs	r0, #1
 8004a74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004a78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a7a:	480e      	ldr	r0, [pc, #56]	@ (8004ab4 <rand+0x74>)
 8004a7c:	690b      	ldr	r3, [r1, #16]
 8004a7e:	694c      	ldr	r4, [r1, #20]
 8004a80:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab8 <rand+0x78>)
 8004a82:	4358      	muls	r0, r3
 8004a84:	fb02 0004 	mla	r0, r2, r4, r0
 8004a88:	fba3 3202 	umull	r3, r2, r3, r2
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	eb40 0002 	adc.w	r0, r0, r2
 8004a92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004a96:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	20000020 	.word	0x20000020
 8004aa0:	08008ca8 	.word	0x08008ca8
 8004aa4:	08008cbf 	.word	0x08008cbf
 8004aa8:	abcd330e 	.word	0xabcd330e
 8004aac:	e66d1234 	.word	0xe66d1234
 8004ab0:	0005deec 	.word	0x0005deec
 8004ab4:	5851f42d 	.word	0x5851f42d
 8004ab8:	4c957f2d 	.word	0x4c957f2d

08004abc <__cvt>:
 8004abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	ec57 6b10 	vmov	r6, r7, d0
 8004ac4:	2f00      	cmp	r7, #0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4619      	mov	r1, r3
 8004aca:	463b      	mov	r3, r7
 8004acc:	bfbb      	ittet	lt
 8004ace:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ad2:	461f      	movlt	r7, r3
 8004ad4:	2300      	movge	r3, #0
 8004ad6:	232d      	movlt	r3, #45	@ 0x2d
 8004ad8:	700b      	strb	r3, [r1, #0]
 8004ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004adc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	f023 0820 	bic.w	r8, r3, #32
 8004ae6:	bfbc      	itt	lt
 8004ae8:	4632      	movlt	r2, r6
 8004aea:	4616      	movlt	r6, r2
 8004aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004af0:	d005      	beq.n	8004afe <__cvt+0x42>
 8004af2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004af6:	d100      	bne.n	8004afa <__cvt+0x3e>
 8004af8:	3401      	adds	r4, #1
 8004afa:	2102      	movs	r1, #2
 8004afc:	e000      	b.n	8004b00 <__cvt+0x44>
 8004afe:	2103      	movs	r1, #3
 8004b00:	ab03      	add	r3, sp, #12
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	ab02      	add	r3, sp, #8
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	ec47 6b10 	vmov	d0, r6, r7
 8004b0c:	4653      	mov	r3, sl
 8004b0e:	4622      	mov	r2, r4
 8004b10:	f000 fe7a 	bl	8005808 <_dtoa_r>
 8004b14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b18:	4605      	mov	r5, r0
 8004b1a:	d119      	bne.n	8004b50 <__cvt+0x94>
 8004b1c:	f019 0f01 	tst.w	r9, #1
 8004b20:	d00e      	beq.n	8004b40 <__cvt+0x84>
 8004b22:	eb00 0904 	add.w	r9, r0, r4
 8004b26:	2200      	movs	r2, #0
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	f7fb ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b32:	b108      	cbz	r0, 8004b38 <__cvt+0x7c>
 8004b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b38:	2230      	movs	r2, #48	@ 0x30
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	454b      	cmp	r3, r9
 8004b3e:	d31e      	bcc.n	8004b7e <__cvt+0xc2>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b44:	1b5b      	subs	r3, r3, r5
 8004b46:	4628      	mov	r0, r5
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	b004      	add	sp, #16
 8004b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b54:	eb00 0904 	add.w	r9, r0, r4
 8004b58:	d1e5      	bne.n	8004b26 <__cvt+0x6a>
 8004b5a:	7803      	ldrb	r3, [r0, #0]
 8004b5c:	2b30      	cmp	r3, #48	@ 0x30
 8004b5e:	d10a      	bne.n	8004b76 <__cvt+0xba>
 8004b60:	2200      	movs	r2, #0
 8004b62:	2300      	movs	r3, #0
 8004b64:	4630      	mov	r0, r6
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b6c:	b918      	cbnz	r0, 8004b76 <__cvt+0xba>
 8004b6e:	f1c4 0401 	rsb	r4, r4, #1
 8004b72:	f8ca 4000 	str.w	r4, [sl]
 8004b76:	f8da 3000 	ldr.w	r3, [sl]
 8004b7a:	4499      	add	r9, r3
 8004b7c:	e7d3      	b.n	8004b26 <__cvt+0x6a>
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	9103      	str	r1, [sp, #12]
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e7d9      	b.n	8004b3a <__cvt+0x7e>

08004b86 <__exponent>:
 8004b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	bfba      	itte	lt
 8004b8c:	4249      	neglt	r1, r1
 8004b8e:	232d      	movlt	r3, #45	@ 0x2d
 8004b90:	232b      	movge	r3, #43	@ 0x2b
 8004b92:	2909      	cmp	r1, #9
 8004b94:	7002      	strb	r2, [r0, #0]
 8004b96:	7043      	strb	r3, [r0, #1]
 8004b98:	dd29      	ble.n	8004bee <__exponent+0x68>
 8004b9a:	f10d 0307 	add.w	r3, sp, #7
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	270a      	movs	r7, #10
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ba8:	fb07 1416 	mls	r4, r7, r6, r1
 8004bac:	3430      	adds	r4, #48	@ 0x30
 8004bae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	2c63      	cmp	r4, #99	@ 0x63
 8004bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bba:	4631      	mov	r1, r6
 8004bbc:	dcf1      	bgt.n	8004ba2 <__exponent+0x1c>
 8004bbe:	3130      	adds	r1, #48	@ 0x30
 8004bc0:	1e94      	subs	r4, r2, #2
 8004bc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bc6:	1c41      	adds	r1, r0, #1
 8004bc8:	4623      	mov	r3, r4
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	d30a      	bcc.n	8004be4 <__exponent+0x5e>
 8004bce:	f10d 0309 	add.w	r3, sp, #9
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ac      	cmp	r4, r5
 8004bd6:	bf88      	it	hi
 8004bd8:	2300      	movhi	r3, #0
 8004bda:	3302      	adds	r3, #2
 8004bdc:	4403      	add	r3, r0
 8004bde:	1a18      	subs	r0, r3, r0
 8004be0:	b003      	add	sp, #12
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004be8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bec:	e7ed      	b.n	8004bca <__exponent+0x44>
 8004bee:	2330      	movs	r3, #48	@ 0x30
 8004bf0:	3130      	adds	r1, #48	@ 0x30
 8004bf2:	7083      	strb	r3, [r0, #2]
 8004bf4:	70c1      	strb	r1, [r0, #3]
 8004bf6:	1d03      	adds	r3, r0, #4
 8004bf8:	e7f1      	b.n	8004bde <__exponent+0x58>
	...

08004bfc <_printf_float>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	b08d      	sub	sp, #52	@ 0x34
 8004c02:	460c      	mov	r4, r1
 8004c04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c08:	4616      	mov	r6, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	f000 fcdb 	bl	80055c8 <_localeconv_r>
 8004c12:	6803      	ldr	r3, [r0, #0]
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fb fb32 	bl	8000280 <strlen>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c20:	f8d8 3000 	ldr.w	r3, [r8]
 8004c24:	9005      	str	r0, [sp, #20]
 8004c26:	3307      	adds	r3, #7
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	f103 0208 	add.w	r2, r3, #8
 8004c30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c34:	f8d4 b000 	ldr.w	fp, [r4]
 8004c38:	f8c8 2000 	str.w	r2, [r8]
 8004c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c44:	9307      	str	r3, [sp, #28]
 8004c46:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c52:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec4 <_printf_float+0x2c8>)
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	f7fb ff70 	bl	8000b3c <__aeabi_dcmpun>
 8004c5c:	bb70      	cbnz	r0, 8004cbc <_printf_float+0xc0>
 8004c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c62:	4b98      	ldr	r3, [pc, #608]	@ (8004ec4 <_printf_float+0x2c8>)
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	f7fb ff4a 	bl	8000b00 <__aeabi_dcmple>
 8004c6c:	bb30      	cbnz	r0, 8004cbc <_printf_float+0xc0>
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2300      	movs	r3, #0
 8004c72:	4640      	mov	r0, r8
 8004c74:	4649      	mov	r1, r9
 8004c76:	f7fb ff39 	bl	8000aec <__aeabi_dcmplt>
 8004c7a:	b110      	cbz	r0, 8004c82 <_printf_float+0x86>
 8004c7c:	232d      	movs	r3, #45	@ 0x2d
 8004c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c82:	4a91      	ldr	r2, [pc, #580]	@ (8004ec8 <_printf_float+0x2cc>)
 8004c84:	4b91      	ldr	r3, [pc, #580]	@ (8004ecc <_printf_float+0x2d0>)
 8004c86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c8a:	bf8c      	ite	hi
 8004c8c:	4690      	movhi	r8, r2
 8004c8e:	4698      	movls	r8, r3
 8004c90:	2303      	movs	r3, #3
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	f02b 0304 	bic.w	r3, fp, #4
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	f04f 0900 	mov.w	r9, #0
 8004c9e:	9700      	str	r7, [sp, #0]
 8004ca0:	4633      	mov	r3, r6
 8004ca2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f9d2 	bl	8005050 <_printf_common>
 8004cac:	3001      	adds	r0, #1
 8004cae:	f040 808d 	bne.w	8004dcc <_printf_float+0x1d0>
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	b00d      	add	sp, #52	@ 0x34
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	f7fb ff3a 	bl	8000b3c <__aeabi_dcmpun>
 8004cc8:	b140      	cbz	r0, 8004cdc <_printf_float+0xe0>
 8004cca:	464b      	mov	r3, r9
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bfbc      	itt	lt
 8004cd0:	232d      	movlt	r3, #45	@ 0x2d
 8004cd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed0 <_printf_float+0x2d4>)
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed4 <_printf_float+0x2d8>)
 8004cda:	e7d4      	b.n	8004c86 <_printf_float+0x8a>
 8004cdc:	6863      	ldr	r3, [r4, #4]
 8004cde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ce2:	9206      	str	r2, [sp, #24]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	d13b      	bne.n	8004d60 <_printf_float+0x164>
 8004ce8:	2306      	movs	r3, #6
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6022      	str	r2, [r4, #0]
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004cf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004cfc:	ab09      	add	r3, sp, #36	@ 0x24
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	6861      	ldr	r1, [r4, #4]
 8004d02:	ec49 8b10 	vmov	d0, r8, r9
 8004d06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7ff fed6 	bl	8004abc <__cvt>
 8004d10:	9b06      	ldr	r3, [sp, #24]
 8004d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d14:	2b47      	cmp	r3, #71	@ 0x47
 8004d16:	4680      	mov	r8, r0
 8004d18:	d129      	bne.n	8004d6e <_printf_float+0x172>
 8004d1a:	1cc8      	adds	r0, r1, #3
 8004d1c:	db02      	blt.n	8004d24 <_printf_float+0x128>
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	4299      	cmp	r1, r3
 8004d22:	dd41      	ble.n	8004da8 <_printf_float+0x1ac>
 8004d24:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d28:	fa5f fa8a 	uxtb.w	sl, sl
 8004d2c:	3901      	subs	r1, #1
 8004d2e:	4652      	mov	r2, sl
 8004d30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d34:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d36:	f7ff ff26 	bl	8004b86 <__exponent>
 8004d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d3c:	1813      	adds	r3, r2, r0
 8004d3e:	2a01      	cmp	r2, #1
 8004d40:	4681      	mov	r9, r0
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	dc02      	bgt.n	8004d4c <_printf_float+0x150>
 8004d46:	6822      	ldr	r2, [r4, #0]
 8004d48:	07d2      	lsls	r2, r2, #31
 8004d4a:	d501      	bpl.n	8004d50 <_printf_float+0x154>
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0a2      	beq.n	8004c9e <_printf_float+0xa2>
 8004d58:	232d      	movs	r3, #45	@ 0x2d
 8004d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5e:	e79e      	b.n	8004c9e <_printf_float+0xa2>
 8004d60:	9a06      	ldr	r2, [sp, #24]
 8004d62:	2a47      	cmp	r2, #71	@ 0x47
 8004d64:	d1c2      	bne.n	8004cec <_printf_float+0xf0>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1c0      	bne.n	8004cec <_printf_float+0xf0>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e7bd      	b.n	8004cea <_printf_float+0xee>
 8004d6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d72:	d9db      	bls.n	8004d2c <_printf_float+0x130>
 8004d74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d78:	d118      	bne.n	8004dac <_printf_float+0x1b0>
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	dd0b      	ble.n	8004d98 <_printf_float+0x19c>
 8004d80:	6121      	str	r1, [r4, #16]
 8004d82:	b913      	cbnz	r3, 8004d8a <_printf_float+0x18e>
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	07d0      	lsls	r0, r2, #31
 8004d88:	d502      	bpl.n	8004d90 <_printf_float+0x194>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	440b      	add	r3, r1
 8004d8e:	6123      	str	r3, [r4, #16]
 8004d90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d92:	f04f 0900 	mov.w	r9, #0
 8004d96:	e7db      	b.n	8004d50 <_printf_float+0x154>
 8004d98:	b913      	cbnz	r3, 8004da0 <_printf_float+0x1a4>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	07d2      	lsls	r2, r2, #31
 8004d9e:	d501      	bpl.n	8004da4 <_printf_float+0x1a8>
 8004da0:	3302      	adds	r3, #2
 8004da2:	e7f4      	b.n	8004d8e <_printf_float+0x192>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7f2      	b.n	8004d8e <_printf_float+0x192>
 8004da8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dae:	4299      	cmp	r1, r3
 8004db0:	db05      	blt.n	8004dbe <_printf_float+0x1c2>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	6121      	str	r1, [r4, #16]
 8004db6:	07d8      	lsls	r0, r3, #31
 8004db8:	d5ea      	bpl.n	8004d90 <_printf_float+0x194>
 8004dba:	1c4b      	adds	r3, r1, #1
 8004dbc:	e7e7      	b.n	8004d8e <_printf_float+0x192>
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	bfd4      	ite	le
 8004dc2:	f1c1 0202 	rsble	r2, r1, #2
 8004dc6:	2201      	movgt	r2, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	e7e0      	b.n	8004d8e <_printf_float+0x192>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	055a      	lsls	r2, r3, #21
 8004dd0:	d407      	bmi.n	8004de2 <_printf_float+0x1e6>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d12b      	bne.n	8004e38 <_printf_float+0x23c>
 8004de0:	e767      	b.n	8004cb2 <_printf_float+0xb6>
 8004de2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004de6:	f240 80dd 	bls.w	8004fa4 <_printf_float+0x3a8>
 8004dea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dee:	2200      	movs	r2, #0
 8004df0:	2300      	movs	r3, #0
 8004df2:	f7fb fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d033      	beq.n	8004e62 <_printf_float+0x266>
 8004dfa:	4a37      	ldr	r2, [pc, #220]	@ (8004ed8 <_printf_float+0x2dc>)
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f af54 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e0e:	4543      	cmp	r3, r8
 8004e10:	db02      	blt.n	8004e18 <_printf_float+0x21c>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	07d8      	lsls	r0, r3, #31
 8004e16:	d50f      	bpl.n	8004e38 <_printf_float+0x23c>
 8004e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4628      	mov	r0, r5
 8004e20:	47b8      	blx	r7
 8004e22:	3001      	adds	r0, #1
 8004e24:	f43f af45 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e28:	f04f 0900 	mov.w	r9, #0
 8004e2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e30:	f104 0a1a 	add.w	sl, r4, #26
 8004e34:	45c8      	cmp	r8, r9
 8004e36:	dc09      	bgt.n	8004e4c <_printf_float+0x250>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	079b      	lsls	r3, r3, #30
 8004e3c:	f100 8103 	bmi.w	8005046 <_printf_float+0x44a>
 8004e40:	68e0      	ldr	r0, [r4, #12]
 8004e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e44:	4298      	cmp	r0, r3
 8004e46:	bfb8      	it	lt
 8004e48:	4618      	movlt	r0, r3
 8004e4a:	e734      	b.n	8004cb6 <_printf_float+0xba>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4652      	mov	r2, sl
 8004e50:	4631      	mov	r1, r6
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f af2b 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e5c:	f109 0901 	add.w	r9, r9, #1
 8004e60:	e7e8      	b.n	8004e34 <_printf_float+0x238>
 8004e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc39      	bgt.n	8004edc <_printf_float+0x2e0>
 8004e68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed8 <_printf_float+0x2dc>)
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f af1d 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e7c:	ea59 0303 	orrs.w	r3, r9, r3
 8004e80:	d102      	bne.n	8004e88 <_printf_float+0x28c>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	07d9      	lsls	r1, r3, #31
 8004e86:	d5d7      	bpl.n	8004e38 <_printf_float+0x23c>
 8004e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b8      	blx	r7
 8004e92:	3001      	adds	r0, #1
 8004e94:	f43f af0d 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	f104 0b1a 	add.w	fp, r4, #26
 8004ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea2:	425b      	negs	r3, r3
 8004ea4:	4553      	cmp	r3, sl
 8004ea6:	dc01      	bgt.n	8004eac <_printf_float+0x2b0>
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	e793      	b.n	8004dd4 <_printf_float+0x1d8>
 8004eac:	2301      	movs	r3, #1
 8004eae:	465a      	mov	r2, fp
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f aefb 	beq.w	8004cb2 <_printf_float+0xb6>
 8004ebc:	f10a 0a01 	add.w	sl, sl, #1
 8004ec0:	e7ee      	b.n	8004ea0 <_printf_float+0x2a4>
 8004ec2:	bf00      	nop
 8004ec4:	7fefffff 	.word	0x7fefffff
 8004ec8:	08008d1b 	.word	0x08008d1b
 8004ecc:	08008d17 	.word	0x08008d17
 8004ed0:	08008d23 	.word	0x08008d23
 8004ed4:	08008d1f 	.word	0x08008d1f
 8004ed8:	08008d27 	.word	0x08008d27
 8004edc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ede:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ee2:	4553      	cmp	r3, sl
 8004ee4:	bfa8      	it	ge
 8004ee6:	4653      	movge	r3, sl
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	4699      	mov	r9, r3
 8004eec:	dc36      	bgt.n	8004f5c <_printf_float+0x360>
 8004eee:	f04f 0b00 	mov.w	fp, #0
 8004ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ef6:	f104 021a 	add.w	r2, r4, #26
 8004efa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004efc:	9306      	str	r3, [sp, #24]
 8004efe:	eba3 0309 	sub.w	r3, r3, r9
 8004f02:	455b      	cmp	r3, fp
 8004f04:	dc31      	bgt.n	8004f6a <_printf_float+0x36e>
 8004f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f08:	459a      	cmp	sl, r3
 8004f0a:	dc3a      	bgt.n	8004f82 <_printf_float+0x386>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	07da      	lsls	r2, r3, #31
 8004f10:	d437      	bmi.n	8004f82 <_printf_float+0x386>
 8004f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f14:	ebaa 0903 	sub.w	r9, sl, r3
 8004f18:	9b06      	ldr	r3, [sp, #24]
 8004f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1e:	4599      	cmp	r9, r3
 8004f20:	bfa8      	it	ge
 8004f22:	4699      	movge	r9, r3
 8004f24:	f1b9 0f00 	cmp.w	r9, #0
 8004f28:	dc33      	bgt.n	8004f92 <_printf_float+0x396>
 8004f2a:	f04f 0800 	mov.w	r8, #0
 8004f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f32:	f104 0b1a 	add.w	fp, r4, #26
 8004f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f38:	ebaa 0303 	sub.w	r3, sl, r3
 8004f3c:	eba3 0309 	sub.w	r3, r3, r9
 8004f40:	4543      	cmp	r3, r8
 8004f42:	f77f af79 	ble.w	8004e38 <_printf_float+0x23c>
 8004f46:	2301      	movs	r3, #1
 8004f48:	465a      	mov	r2, fp
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	f43f aeae 	beq.w	8004cb2 <_printf_float+0xb6>
 8004f56:	f108 0801 	add.w	r8, r8, #1
 8004f5a:	e7ec      	b.n	8004f36 <_printf_float+0x33a>
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	d1c2      	bne.n	8004eee <_printf_float+0x2f2>
 8004f68:	e6a3      	b.n	8004cb2 <_printf_float+0xb6>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4628      	mov	r0, r5
 8004f70:	9206      	str	r2, [sp, #24]
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f ae9c 	beq.w	8004cb2 <_printf_float+0xb6>
 8004f7a:	9a06      	ldr	r2, [sp, #24]
 8004f7c:	f10b 0b01 	add.w	fp, fp, #1
 8004f80:	e7bb      	b.n	8004efa <_printf_float+0x2fe>
 8004f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d1c0      	bne.n	8004f12 <_printf_float+0x316>
 8004f90:	e68f      	b.n	8004cb2 <_printf_float+0xb6>
 8004f92:	9a06      	ldr	r2, [sp, #24]
 8004f94:	464b      	mov	r3, r9
 8004f96:	4442      	add	r2, r8
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d1c3      	bne.n	8004f2a <_printf_float+0x32e>
 8004fa2:	e686      	b.n	8004cb2 <_printf_float+0xb6>
 8004fa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fa8:	f1ba 0f01 	cmp.w	sl, #1
 8004fac:	dc01      	bgt.n	8004fb2 <_printf_float+0x3b6>
 8004fae:	07db      	lsls	r3, r3, #31
 8004fb0:	d536      	bpl.n	8005020 <_printf_float+0x424>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f43f ae78 	beq.w	8004cb2 <_printf_float+0xb6>
 8004fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f43f ae70 	beq.w	8004cb2 <_printf_float+0xb6>
 8004fd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fde:	f7fb fd7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fe2:	b9c0      	cbnz	r0, 8005016 <_printf_float+0x41a>
 8004fe4:	4653      	mov	r3, sl
 8004fe6:	f108 0201 	add.w	r2, r8, #1
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d10c      	bne.n	800500e <_printf_float+0x412>
 8004ff4:	e65d      	b.n	8004cb2 <_printf_float+0xb6>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	465a      	mov	r2, fp
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	f43f ae56 	beq.w	8004cb2 <_printf_float+0xb6>
 8005006:	f108 0801 	add.w	r8, r8, #1
 800500a:	45d0      	cmp	r8, sl
 800500c:	dbf3      	blt.n	8004ff6 <_printf_float+0x3fa>
 800500e:	464b      	mov	r3, r9
 8005010:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005014:	e6df      	b.n	8004dd6 <_printf_float+0x1da>
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	f104 0b1a 	add.w	fp, r4, #26
 800501e:	e7f4      	b.n	800500a <_printf_float+0x40e>
 8005020:	2301      	movs	r3, #1
 8005022:	4642      	mov	r2, r8
 8005024:	e7e1      	b.n	8004fea <_printf_float+0x3ee>
 8005026:	2301      	movs	r3, #1
 8005028:	464a      	mov	r2, r9
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	f43f ae3e 	beq.w	8004cb2 <_printf_float+0xb6>
 8005036:	f108 0801 	add.w	r8, r8, #1
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800503e:	1a5b      	subs	r3, r3, r1
 8005040:	4543      	cmp	r3, r8
 8005042:	dcf0      	bgt.n	8005026 <_printf_float+0x42a>
 8005044:	e6fc      	b.n	8004e40 <_printf_float+0x244>
 8005046:	f04f 0800 	mov.w	r8, #0
 800504a:	f104 0919 	add.w	r9, r4, #25
 800504e:	e7f4      	b.n	800503a <_printf_float+0x43e>

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4616      	mov	r6, r2
 8005056:	4698      	mov	r8, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005060:	4293      	cmp	r3, r2
 8005062:	bfb8      	it	lt
 8005064:	4613      	movlt	r3, r2
 8005066:	6033      	str	r3, [r6, #0]
 8005068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800506c:	4607      	mov	r7, r0
 800506e:	460c      	mov	r4, r1
 8005070:	b10a      	cbz	r2, 8005076 <_printf_common+0x26>
 8005072:	3301      	adds	r3, #1
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	0699      	lsls	r1, r3, #26
 800507a:	bf42      	ittt	mi
 800507c:	6833      	ldrmi	r3, [r6, #0]
 800507e:	3302      	addmi	r3, #2
 8005080:	6033      	strmi	r3, [r6, #0]
 8005082:	6825      	ldr	r5, [r4, #0]
 8005084:	f015 0506 	ands.w	r5, r5, #6
 8005088:	d106      	bne.n	8005098 <_printf_common+0x48>
 800508a:	f104 0a19 	add.w	sl, r4, #25
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	6832      	ldr	r2, [r6, #0]
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	42ab      	cmp	r3, r5
 8005096:	dc26      	bgt.n	80050e6 <_printf_common+0x96>
 8005098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800509c:	6822      	ldr	r2, [r4, #0]
 800509e:	3b00      	subs	r3, #0
 80050a0:	bf18      	it	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	0692      	lsls	r2, r2, #26
 80050a6:	d42b      	bmi.n	8005100 <_printf_common+0xb0>
 80050a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050ac:	4641      	mov	r1, r8
 80050ae:	4638      	mov	r0, r7
 80050b0:	47c8      	blx	r9
 80050b2:	3001      	adds	r0, #1
 80050b4:	d01e      	beq.n	80050f4 <_printf_common+0xa4>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	6922      	ldr	r2, [r4, #16]
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf02      	ittt	eq
 80050c2:	68e5      	ldreq	r5, [r4, #12]
 80050c4:	6833      	ldreq	r3, [r6, #0]
 80050c6:	1aed      	subeq	r5, r5, r3
 80050c8:	68a3      	ldr	r3, [r4, #8]
 80050ca:	bf0c      	ite	eq
 80050cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d0:	2500      	movne	r5, #0
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bfc4      	itt	gt
 80050d6:	1a9b      	subgt	r3, r3, r2
 80050d8:	18ed      	addgt	r5, r5, r3
 80050da:	2600      	movs	r6, #0
 80050dc:	341a      	adds	r4, #26
 80050de:	42b5      	cmp	r5, r6
 80050e0:	d11a      	bne.n	8005118 <_printf_common+0xc8>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e008      	b.n	80050f8 <_printf_common+0xa8>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4652      	mov	r2, sl
 80050ea:	4641      	mov	r1, r8
 80050ec:	4638      	mov	r0, r7
 80050ee:	47c8      	blx	r9
 80050f0:	3001      	adds	r0, #1
 80050f2:	d103      	bne.n	80050fc <_printf_common+0xac>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fc:	3501      	adds	r5, #1
 80050fe:	e7c6      	b.n	800508e <_printf_common+0x3e>
 8005100:	18e1      	adds	r1, r4, r3
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	2030      	movs	r0, #48	@ 0x30
 8005106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800510a:	4422      	add	r2, r4
 800510c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005114:	3302      	adds	r3, #2
 8005116:	e7c7      	b.n	80050a8 <_printf_common+0x58>
 8005118:	2301      	movs	r3, #1
 800511a:	4622      	mov	r2, r4
 800511c:	4641      	mov	r1, r8
 800511e:	4638      	mov	r0, r7
 8005120:	47c8      	blx	r9
 8005122:	3001      	adds	r0, #1
 8005124:	d0e6      	beq.n	80050f4 <_printf_common+0xa4>
 8005126:	3601      	adds	r6, #1
 8005128:	e7d9      	b.n	80050de <_printf_common+0x8e>
	...

0800512c <_printf_i>:
 800512c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	7e0f      	ldrb	r7, [r1, #24]
 8005132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005134:	2f78      	cmp	r7, #120	@ 0x78
 8005136:	4691      	mov	r9, r2
 8005138:	4680      	mov	r8, r0
 800513a:	460c      	mov	r4, r1
 800513c:	469a      	mov	sl, r3
 800513e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005142:	d807      	bhi.n	8005154 <_printf_i+0x28>
 8005144:	2f62      	cmp	r7, #98	@ 0x62
 8005146:	d80a      	bhi.n	800515e <_printf_i+0x32>
 8005148:	2f00      	cmp	r7, #0
 800514a:	f000 80d1 	beq.w	80052f0 <_printf_i+0x1c4>
 800514e:	2f58      	cmp	r7, #88	@ 0x58
 8005150:	f000 80b8 	beq.w	80052c4 <_printf_i+0x198>
 8005154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800515c:	e03a      	b.n	80051d4 <_printf_i+0xa8>
 800515e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005162:	2b15      	cmp	r3, #21
 8005164:	d8f6      	bhi.n	8005154 <_printf_i+0x28>
 8005166:	a101      	add	r1, pc, #4	@ (adr r1, 800516c <_printf_i+0x40>)
 8005168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051d9 	.word	0x080051d9
 8005174:	08005155 	.word	0x08005155
 8005178:	08005155 	.word	0x08005155
 800517c:	08005155 	.word	0x08005155
 8005180:	08005155 	.word	0x08005155
 8005184:	080051d9 	.word	0x080051d9
 8005188:	08005155 	.word	0x08005155
 800518c:	08005155 	.word	0x08005155
 8005190:	08005155 	.word	0x08005155
 8005194:	08005155 	.word	0x08005155
 8005198:	080052d7 	.word	0x080052d7
 800519c:	08005203 	.word	0x08005203
 80051a0:	08005291 	.word	0x08005291
 80051a4:	08005155 	.word	0x08005155
 80051a8:	08005155 	.word	0x08005155
 80051ac:	080052f9 	.word	0x080052f9
 80051b0:	08005155 	.word	0x08005155
 80051b4:	08005203 	.word	0x08005203
 80051b8:	08005155 	.word	0x08005155
 80051bc:	08005155 	.word	0x08005155
 80051c0:	08005299 	.word	0x08005299
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	1d1a      	adds	r2, r3, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6032      	str	r2, [r6, #0]
 80051cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d4:	2301      	movs	r3, #1
 80051d6:	e09c      	b.n	8005312 <_printf_i+0x1e6>
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	1d19      	adds	r1, r3, #4
 80051de:	6031      	str	r1, [r6, #0]
 80051e0:	0606      	lsls	r6, r0, #24
 80051e2:	d501      	bpl.n	80051e8 <_printf_i+0xbc>
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	e003      	b.n	80051f0 <_printf_i+0xc4>
 80051e8:	0645      	lsls	r5, r0, #25
 80051ea:	d5fb      	bpl.n	80051e4 <_printf_i+0xb8>
 80051ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	da03      	bge.n	80051fc <_printf_i+0xd0>
 80051f4:	232d      	movs	r3, #45	@ 0x2d
 80051f6:	426d      	negs	r5, r5
 80051f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051fc:	4858      	ldr	r0, [pc, #352]	@ (8005360 <_printf_i+0x234>)
 80051fe:	230a      	movs	r3, #10
 8005200:	e011      	b.n	8005226 <_printf_i+0xfa>
 8005202:	6821      	ldr	r1, [r4, #0]
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	0608      	lsls	r0, r1, #24
 8005208:	f853 5b04 	ldr.w	r5, [r3], #4
 800520c:	d402      	bmi.n	8005214 <_printf_i+0xe8>
 800520e:	0649      	lsls	r1, r1, #25
 8005210:	bf48      	it	mi
 8005212:	b2ad      	uxthmi	r5, r5
 8005214:	2f6f      	cmp	r7, #111	@ 0x6f
 8005216:	4852      	ldr	r0, [pc, #328]	@ (8005360 <_printf_i+0x234>)
 8005218:	6033      	str	r3, [r6, #0]
 800521a:	bf14      	ite	ne
 800521c:	230a      	movne	r3, #10
 800521e:	2308      	moveq	r3, #8
 8005220:	2100      	movs	r1, #0
 8005222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005226:	6866      	ldr	r6, [r4, #4]
 8005228:	60a6      	str	r6, [r4, #8]
 800522a:	2e00      	cmp	r6, #0
 800522c:	db05      	blt.n	800523a <_printf_i+0x10e>
 800522e:	6821      	ldr	r1, [r4, #0]
 8005230:	432e      	orrs	r6, r5
 8005232:	f021 0104 	bic.w	r1, r1, #4
 8005236:	6021      	str	r1, [r4, #0]
 8005238:	d04b      	beq.n	80052d2 <_printf_i+0x1a6>
 800523a:	4616      	mov	r6, r2
 800523c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005240:	fb03 5711 	mls	r7, r3, r1, r5
 8005244:	5dc7      	ldrb	r7, [r0, r7]
 8005246:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800524a:	462f      	mov	r7, r5
 800524c:	42bb      	cmp	r3, r7
 800524e:	460d      	mov	r5, r1
 8005250:	d9f4      	bls.n	800523c <_printf_i+0x110>
 8005252:	2b08      	cmp	r3, #8
 8005254:	d10b      	bne.n	800526e <_printf_i+0x142>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	07df      	lsls	r7, r3, #31
 800525a:	d508      	bpl.n	800526e <_printf_i+0x142>
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	6861      	ldr	r1, [r4, #4]
 8005260:	4299      	cmp	r1, r3
 8005262:	bfde      	ittt	le
 8005264:	2330      	movle	r3, #48	@ 0x30
 8005266:	f806 3c01 	strble.w	r3, [r6, #-1]
 800526a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800526e:	1b92      	subs	r2, r2, r6
 8005270:	6122      	str	r2, [r4, #16]
 8005272:	f8cd a000 	str.w	sl, [sp]
 8005276:	464b      	mov	r3, r9
 8005278:	aa03      	add	r2, sp, #12
 800527a:	4621      	mov	r1, r4
 800527c:	4640      	mov	r0, r8
 800527e:	f7ff fee7 	bl	8005050 <_printf_common>
 8005282:	3001      	adds	r0, #1
 8005284:	d14a      	bne.n	800531c <_printf_i+0x1f0>
 8005286:	f04f 30ff 	mov.w	r0, #4294967295
 800528a:	b004      	add	sp, #16
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	f043 0320 	orr.w	r3, r3, #32
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	4832      	ldr	r0, [pc, #200]	@ (8005364 <_printf_i+0x238>)
 800529a:	2778      	movs	r7, #120	@ 0x78
 800529c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	6831      	ldr	r1, [r6, #0]
 80052a4:	061f      	lsls	r7, r3, #24
 80052a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80052aa:	d402      	bmi.n	80052b2 <_printf_i+0x186>
 80052ac:	065f      	lsls	r7, r3, #25
 80052ae:	bf48      	it	mi
 80052b0:	b2ad      	uxthmi	r5, r5
 80052b2:	6031      	str	r1, [r6, #0]
 80052b4:	07d9      	lsls	r1, r3, #31
 80052b6:	bf44      	itt	mi
 80052b8:	f043 0320 	orrmi.w	r3, r3, #32
 80052bc:	6023      	strmi	r3, [r4, #0]
 80052be:	b11d      	cbz	r5, 80052c8 <_printf_i+0x19c>
 80052c0:	2310      	movs	r3, #16
 80052c2:	e7ad      	b.n	8005220 <_printf_i+0xf4>
 80052c4:	4826      	ldr	r0, [pc, #152]	@ (8005360 <_printf_i+0x234>)
 80052c6:	e7e9      	b.n	800529c <_printf_i+0x170>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	f023 0320 	bic.w	r3, r3, #32
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	e7f6      	b.n	80052c0 <_printf_i+0x194>
 80052d2:	4616      	mov	r6, r2
 80052d4:	e7bd      	b.n	8005252 <_printf_i+0x126>
 80052d6:	6833      	ldr	r3, [r6, #0]
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	6961      	ldr	r1, [r4, #20]
 80052dc:	1d18      	adds	r0, r3, #4
 80052de:	6030      	str	r0, [r6, #0]
 80052e0:	062e      	lsls	r6, r5, #24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	d501      	bpl.n	80052ea <_printf_i+0x1be>
 80052e6:	6019      	str	r1, [r3, #0]
 80052e8:	e002      	b.n	80052f0 <_printf_i+0x1c4>
 80052ea:	0668      	lsls	r0, r5, #25
 80052ec:	d5fb      	bpl.n	80052e6 <_printf_i+0x1ba>
 80052ee:	8019      	strh	r1, [r3, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	4616      	mov	r6, r2
 80052f6:	e7bc      	b.n	8005272 <_printf_i+0x146>
 80052f8:	6833      	ldr	r3, [r6, #0]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	6032      	str	r2, [r6, #0]
 80052fe:	681e      	ldr	r6, [r3, #0]
 8005300:	6862      	ldr	r2, [r4, #4]
 8005302:	2100      	movs	r1, #0
 8005304:	4630      	mov	r0, r6
 8005306:	f7fa ff6b 	bl	80001e0 <memchr>
 800530a:	b108      	cbz	r0, 8005310 <_printf_i+0x1e4>
 800530c:	1b80      	subs	r0, r0, r6
 800530e:	6060      	str	r0, [r4, #4]
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	2300      	movs	r3, #0
 8005316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800531a:	e7aa      	b.n	8005272 <_printf_i+0x146>
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	4632      	mov	r2, r6
 8005320:	4649      	mov	r1, r9
 8005322:	4640      	mov	r0, r8
 8005324:	47d0      	blx	sl
 8005326:	3001      	adds	r0, #1
 8005328:	d0ad      	beq.n	8005286 <_printf_i+0x15a>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	079b      	lsls	r3, r3, #30
 800532e:	d413      	bmi.n	8005358 <_printf_i+0x22c>
 8005330:	68e0      	ldr	r0, [r4, #12]
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	4298      	cmp	r0, r3
 8005336:	bfb8      	it	lt
 8005338:	4618      	movlt	r0, r3
 800533a:	e7a6      	b.n	800528a <_printf_i+0x15e>
 800533c:	2301      	movs	r3, #1
 800533e:	4632      	mov	r2, r6
 8005340:	4649      	mov	r1, r9
 8005342:	4640      	mov	r0, r8
 8005344:	47d0      	blx	sl
 8005346:	3001      	adds	r0, #1
 8005348:	d09d      	beq.n	8005286 <_printf_i+0x15a>
 800534a:	3501      	adds	r5, #1
 800534c:	68e3      	ldr	r3, [r4, #12]
 800534e:	9903      	ldr	r1, [sp, #12]
 8005350:	1a5b      	subs	r3, r3, r1
 8005352:	42ab      	cmp	r3, r5
 8005354:	dcf2      	bgt.n	800533c <_printf_i+0x210>
 8005356:	e7eb      	b.n	8005330 <_printf_i+0x204>
 8005358:	2500      	movs	r5, #0
 800535a:	f104 0619 	add.w	r6, r4, #25
 800535e:	e7f5      	b.n	800534c <_printf_i+0x220>
 8005360:	08008d29 	.word	0x08008d29
 8005364:	08008d3a 	.word	0x08008d3a

08005368 <std>:
 8005368:	2300      	movs	r3, #0
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	e9c0 3300 	strd	r3, r3, [r0]
 8005372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005376:	6083      	str	r3, [r0, #8]
 8005378:	8181      	strh	r1, [r0, #12]
 800537a:	6643      	str	r3, [r0, #100]	@ 0x64
 800537c:	81c2      	strh	r2, [r0, #14]
 800537e:	6183      	str	r3, [r0, #24]
 8005380:	4619      	mov	r1, r3
 8005382:	2208      	movs	r2, #8
 8005384:	305c      	adds	r0, #92	@ 0x5c
 8005386:	f000 f916 	bl	80055b6 <memset>
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <std+0x58>)
 800538c:	6263      	str	r3, [r4, #36]	@ 0x24
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <std+0x5c>)
 8005390:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <std+0x60>)
 8005394:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <std+0x64>)
 8005398:	6323      	str	r3, [r4, #48]	@ 0x30
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <std+0x68>)
 800539c:	6224      	str	r4, [r4, #32]
 800539e:	429c      	cmp	r4, r3
 80053a0:	d006      	beq.n	80053b0 <std+0x48>
 80053a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053a6:	4294      	cmp	r4, r2
 80053a8:	d002      	beq.n	80053b0 <std+0x48>
 80053aa:	33d0      	adds	r3, #208	@ 0xd0
 80053ac:	429c      	cmp	r4, r3
 80053ae:	d105      	bne.n	80053bc <std+0x54>
 80053b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b8:	f000 b97a 	b.w	80056b0 <__retarget_lock_init_recursive>
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	bf00      	nop
 80053c0:	08005531 	.word	0x08005531
 80053c4:	08005553 	.word	0x08005553
 80053c8:	0800558b 	.word	0x0800558b
 80053cc:	080055af 	.word	0x080055af
 80053d0:	2000054c 	.word	0x2000054c

080053d4 <stdio_exit_handler>:
 80053d4:	4a02      	ldr	r2, [pc, #8]	@ (80053e0 <stdio_exit_handler+0xc>)
 80053d6:	4903      	ldr	r1, [pc, #12]	@ (80053e4 <stdio_exit_handler+0x10>)
 80053d8:	4803      	ldr	r0, [pc, #12]	@ (80053e8 <stdio_exit_handler+0x14>)
 80053da:	f000 b869 	b.w	80054b0 <_fwalk_sglue>
 80053de:	bf00      	nop
 80053e0:	20000014 	.word	0x20000014
 80053e4:	08007055 	.word	0x08007055
 80053e8:	20000024 	.word	0x20000024

080053ec <cleanup_stdio>:
 80053ec:	6841      	ldr	r1, [r0, #4]
 80053ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005420 <cleanup_stdio+0x34>)
 80053f0:	4299      	cmp	r1, r3
 80053f2:	b510      	push	{r4, lr}
 80053f4:	4604      	mov	r4, r0
 80053f6:	d001      	beq.n	80053fc <cleanup_stdio+0x10>
 80053f8:	f001 fe2c 	bl	8007054 <_fflush_r>
 80053fc:	68a1      	ldr	r1, [r4, #8]
 80053fe:	4b09      	ldr	r3, [pc, #36]	@ (8005424 <cleanup_stdio+0x38>)
 8005400:	4299      	cmp	r1, r3
 8005402:	d002      	beq.n	800540a <cleanup_stdio+0x1e>
 8005404:	4620      	mov	r0, r4
 8005406:	f001 fe25 	bl	8007054 <_fflush_r>
 800540a:	68e1      	ldr	r1, [r4, #12]
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <cleanup_stdio+0x3c>)
 800540e:	4299      	cmp	r1, r3
 8005410:	d004      	beq.n	800541c <cleanup_stdio+0x30>
 8005412:	4620      	mov	r0, r4
 8005414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005418:	f001 be1c 	b.w	8007054 <_fflush_r>
 800541c:	bd10      	pop	{r4, pc}
 800541e:	bf00      	nop
 8005420:	2000054c 	.word	0x2000054c
 8005424:	200005b4 	.word	0x200005b4
 8005428:	2000061c 	.word	0x2000061c

0800542c <global_stdio_init.part.0>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <global_stdio_init.part.0+0x30>)
 8005430:	4c0b      	ldr	r4, [pc, #44]	@ (8005460 <global_stdio_init.part.0+0x34>)
 8005432:	4a0c      	ldr	r2, [pc, #48]	@ (8005464 <global_stdio_init.part.0+0x38>)
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	4620      	mov	r0, r4
 8005438:	2200      	movs	r2, #0
 800543a:	2104      	movs	r1, #4
 800543c:	f7ff ff94 	bl	8005368 <std>
 8005440:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005444:	2201      	movs	r2, #1
 8005446:	2109      	movs	r1, #9
 8005448:	f7ff ff8e 	bl	8005368 <std>
 800544c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005450:	2202      	movs	r2, #2
 8005452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005456:	2112      	movs	r1, #18
 8005458:	f7ff bf86 	b.w	8005368 <std>
 800545c:	20000684 	.word	0x20000684
 8005460:	2000054c 	.word	0x2000054c
 8005464:	080053d5 	.word	0x080053d5

08005468 <__sfp_lock_acquire>:
 8005468:	4801      	ldr	r0, [pc, #4]	@ (8005470 <__sfp_lock_acquire+0x8>)
 800546a:	f000 b922 	b.w	80056b2 <__retarget_lock_acquire_recursive>
 800546e:	bf00      	nop
 8005470:	2000068d 	.word	0x2000068d

08005474 <__sfp_lock_release>:
 8005474:	4801      	ldr	r0, [pc, #4]	@ (800547c <__sfp_lock_release+0x8>)
 8005476:	f000 b91d 	b.w	80056b4 <__retarget_lock_release_recursive>
 800547a:	bf00      	nop
 800547c:	2000068d 	.word	0x2000068d

08005480 <__sinit>:
 8005480:	b510      	push	{r4, lr}
 8005482:	4604      	mov	r4, r0
 8005484:	f7ff fff0 	bl	8005468 <__sfp_lock_acquire>
 8005488:	6a23      	ldr	r3, [r4, #32]
 800548a:	b11b      	cbz	r3, 8005494 <__sinit+0x14>
 800548c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005490:	f7ff bff0 	b.w	8005474 <__sfp_lock_release>
 8005494:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <__sinit+0x28>)
 8005496:	6223      	str	r3, [r4, #32]
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <__sinit+0x2c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f5      	bne.n	800548c <__sinit+0xc>
 80054a0:	f7ff ffc4 	bl	800542c <global_stdio_init.part.0>
 80054a4:	e7f2      	b.n	800548c <__sinit+0xc>
 80054a6:	bf00      	nop
 80054a8:	080053ed 	.word	0x080053ed
 80054ac:	20000684 	.word	0x20000684

080054b0 <_fwalk_sglue>:
 80054b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b4:	4607      	mov	r7, r0
 80054b6:	4688      	mov	r8, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	2600      	movs	r6, #0
 80054bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c0:	f1b9 0901 	subs.w	r9, r9, #1
 80054c4:	d505      	bpl.n	80054d2 <_fwalk_sglue+0x22>
 80054c6:	6824      	ldr	r4, [r4, #0]
 80054c8:	2c00      	cmp	r4, #0
 80054ca:	d1f7      	bne.n	80054bc <_fwalk_sglue+0xc>
 80054cc:	4630      	mov	r0, r6
 80054ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d2:	89ab      	ldrh	r3, [r5, #12]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d907      	bls.n	80054e8 <_fwalk_sglue+0x38>
 80054d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054dc:	3301      	adds	r3, #1
 80054de:	d003      	beq.n	80054e8 <_fwalk_sglue+0x38>
 80054e0:	4629      	mov	r1, r5
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	4306      	orrs	r6, r0
 80054e8:	3568      	adds	r5, #104	@ 0x68
 80054ea:	e7e9      	b.n	80054c0 <_fwalk_sglue+0x10>

080054ec <siprintf>:
 80054ec:	b40e      	push	{r1, r2, r3}
 80054ee:	b510      	push	{r4, lr}
 80054f0:	b09d      	sub	sp, #116	@ 0x74
 80054f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054f4:	9002      	str	r0, [sp, #8]
 80054f6:	9006      	str	r0, [sp, #24]
 80054f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054fc:	480a      	ldr	r0, [pc, #40]	@ (8005528 <siprintf+0x3c>)
 80054fe:	9107      	str	r1, [sp, #28]
 8005500:	9104      	str	r1, [sp, #16]
 8005502:	490a      	ldr	r1, [pc, #40]	@ (800552c <siprintf+0x40>)
 8005504:	f853 2b04 	ldr.w	r2, [r3], #4
 8005508:	9105      	str	r1, [sp, #20]
 800550a:	2400      	movs	r4, #0
 800550c:	a902      	add	r1, sp, #8
 800550e:	6800      	ldr	r0, [r0, #0]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005514:	f001 fc1e 	bl	8006d54 <_svfiprintf_r>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	701c      	strb	r4, [r3, #0]
 800551c:	b01d      	add	sp, #116	@ 0x74
 800551e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005522:	b003      	add	sp, #12
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000020 	.word	0x20000020
 800552c:	ffff0208 	.word	0xffff0208

08005530 <__sread>:
 8005530:	b510      	push	{r4, lr}
 8005532:	460c      	mov	r4, r1
 8005534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005538:	f000 f86c 	bl	8005614 <_read_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	bfab      	itete	ge
 8005540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005542:	89a3      	ldrhlt	r3, [r4, #12]
 8005544:	181b      	addge	r3, r3, r0
 8005546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800554a:	bfac      	ite	ge
 800554c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800554e:	81a3      	strhlt	r3, [r4, #12]
 8005550:	bd10      	pop	{r4, pc}

08005552 <__swrite>:
 8005552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005556:	461f      	mov	r7, r3
 8005558:	898b      	ldrh	r3, [r1, #12]
 800555a:	05db      	lsls	r3, r3, #23
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	4616      	mov	r6, r2
 8005562:	d505      	bpl.n	8005570 <__swrite+0x1e>
 8005564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005568:	2302      	movs	r3, #2
 800556a:	2200      	movs	r2, #0
 800556c:	f000 f840 	bl	80055f0 <_lseek_r>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	4632      	mov	r2, r6
 800557e:	463b      	mov	r3, r7
 8005580:	4628      	mov	r0, r5
 8005582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005586:	f000 b857 	b.w	8005638 <_write_r>

0800558a <__sseek>:
 800558a:	b510      	push	{r4, lr}
 800558c:	460c      	mov	r4, r1
 800558e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005592:	f000 f82d 	bl	80055f0 <_lseek_r>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	bf15      	itete	ne
 800559c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800559e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055a6:	81a3      	strheq	r3, [r4, #12]
 80055a8:	bf18      	it	ne
 80055aa:	81a3      	strhne	r3, [r4, #12]
 80055ac:	bd10      	pop	{r4, pc}

080055ae <__sclose>:
 80055ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b2:	f000 b80d 	b.w	80055d0 <_close_r>

080055b6 <memset>:
 80055b6:	4402      	add	r2, r0
 80055b8:	4603      	mov	r3, r0
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d100      	bne.n	80055c0 <memset+0xa>
 80055be:	4770      	bx	lr
 80055c0:	f803 1b01 	strb.w	r1, [r3], #1
 80055c4:	e7f9      	b.n	80055ba <memset+0x4>
	...

080055c8 <_localeconv_r>:
 80055c8:	4800      	ldr	r0, [pc, #0]	@ (80055cc <_localeconv_r+0x4>)
 80055ca:	4770      	bx	lr
 80055cc:	20000160 	.word	0x20000160

080055d0 <_close_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d06      	ldr	r5, [pc, #24]	@ (80055ec <_close_r+0x1c>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fc fc76 	bl	8001ecc <_close>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_close_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_close_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	20000688 	.word	0x20000688

080055f0 <_lseek_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d07      	ldr	r5, [pc, #28]	@ (8005610 <_lseek_r+0x20>)
 80055f4:	4604      	mov	r4, r0
 80055f6:	4608      	mov	r0, r1
 80055f8:	4611      	mov	r1, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fc fc8b 	bl	8001f1a <_lseek>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_lseek_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_lseek_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000688 	.word	0x20000688

08005614 <_read_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	@ (8005634 <_read_r+0x20>)
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fc fc19 	bl	8001e5a <_read>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_read_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_read_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000688 	.word	0x20000688

08005638 <_write_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d07      	ldr	r5, [pc, #28]	@ (8005658 <_write_r+0x20>)
 800563c:	4604      	mov	r4, r0
 800563e:	4608      	mov	r0, r1
 8005640:	4611      	mov	r1, r2
 8005642:	2200      	movs	r2, #0
 8005644:	602a      	str	r2, [r5, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7fc fc24 	bl	8001e94 <_write>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_write_r+0x1e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_write_r+0x1e>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20000688 	.word	0x20000688

0800565c <__errno>:
 800565c:	4b01      	ldr	r3, [pc, #4]	@ (8005664 <__errno+0x8>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000020 	.word	0x20000020

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4d0d      	ldr	r5, [pc, #52]	@ (80056a0 <__libc_init_array+0x38>)
 800566c:	4c0d      	ldr	r4, [pc, #52]	@ (80056a4 <__libc_init_array+0x3c>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	2600      	movs	r6, #0
 8005674:	42a6      	cmp	r6, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4d0b      	ldr	r5, [pc, #44]	@ (80056a8 <__libc_init_array+0x40>)
 800567a:	4c0c      	ldr	r4, [pc, #48]	@ (80056ac <__libc_init_array+0x44>)
 800567c:	f003 f9d6 	bl	8008a2c <_init>
 8005680:	1b64      	subs	r4, r4, r5
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2600      	movs	r6, #0
 8005686:	42a6      	cmp	r6, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005690:	4798      	blx	r3
 8005692:	3601      	adds	r6, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f855 3b04 	ldr.w	r3, [r5], #4
 800569a:	4798      	blx	r3
 800569c:	3601      	adds	r6, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	080090f0 	.word	0x080090f0
 80056a4:	080090f0 	.word	0x080090f0
 80056a8:	080090f0 	.word	0x080090f0
 80056ac:	080090f4 	.word	0x080090f4

080056b0 <__retarget_lock_init_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_acquire_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <__retarget_lock_release_recursive>:
 80056b4:	4770      	bx	lr
	...

080056b8 <__assert_func>:
 80056b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056ba:	4614      	mov	r4, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <__assert_func+0x2c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4605      	mov	r5, r0
 80056c4:	68d8      	ldr	r0, [r3, #12]
 80056c6:	b14c      	cbz	r4, 80056dc <__assert_func+0x24>
 80056c8:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <__assert_func+0x30>)
 80056ca:	9100      	str	r1, [sp, #0]
 80056cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056d0:	4906      	ldr	r1, [pc, #24]	@ (80056ec <__assert_func+0x34>)
 80056d2:	462b      	mov	r3, r5
 80056d4:	f001 fce6 	bl	80070a4 <fiprintf>
 80056d8:	f001 fd2e 	bl	8007138 <abort>
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <__assert_func+0x38>)
 80056de:	461c      	mov	r4, r3
 80056e0:	e7f3      	b.n	80056ca <__assert_func+0x12>
 80056e2:	bf00      	nop
 80056e4:	20000020 	.word	0x20000020
 80056e8:	08008d4b 	.word	0x08008d4b
 80056ec:	08008d58 	.word	0x08008d58
 80056f0:	08008d86 	.word	0x08008d86

080056f4 <quorem>:
 80056f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f8:	6903      	ldr	r3, [r0, #16]
 80056fa:	690c      	ldr	r4, [r1, #16]
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	4607      	mov	r7, r0
 8005700:	db7e      	blt.n	8005800 <quorem+0x10c>
 8005702:	3c01      	subs	r4, #1
 8005704:	f101 0814 	add.w	r8, r1, #20
 8005708:	00a3      	lsls	r3, r4, #2
 800570a:	f100 0514 	add.w	r5, r0, #20
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800571a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800571e:	3301      	adds	r3, #1
 8005720:	429a      	cmp	r2, r3
 8005722:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005726:	fbb2 f6f3 	udiv	r6, r2, r3
 800572a:	d32e      	bcc.n	800578a <quorem+0x96>
 800572c:	f04f 0a00 	mov.w	sl, #0
 8005730:	46c4      	mov	ip, r8
 8005732:	46ae      	mov	lr, r5
 8005734:	46d3      	mov	fp, sl
 8005736:	f85c 3b04 	ldr.w	r3, [ip], #4
 800573a:	b298      	uxth	r0, r3
 800573c:	fb06 a000 	mla	r0, r6, r0, sl
 8005740:	0c02      	lsrs	r2, r0, #16
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	fb06 2303 	mla	r3, r6, r3, r2
 8005748:	f8de 2000 	ldr.w	r2, [lr]
 800574c:	b280      	uxth	r0, r0
 800574e:	b292      	uxth	r2, r2
 8005750:	1a12      	subs	r2, r2, r0
 8005752:	445a      	add	r2, fp
 8005754:	f8de 0000 	ldr.w	r0, [lr]
 8005758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800575c:	b29b      	uxth	r3, r3
 800575e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005762:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005766:	b292      	uxth	r2, r2
 8005768:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800576c:	45e1      	cmp	r9, ip
 800576e:	f84e 2b04 	str.w	r2, [lr], #4
 8005772:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005776:	d2de      	bcs.n	8005736 <quorem+0x42>
 8005778:	9b00      	ldr	r3, [sp, #0]
 800577a:	58eb      	ldr	r3, [r5, r3]
 800577c:	b92b      	cbnz	r3, 800578a <quorem+0x96>
 800577e:	9b01      	ldr	r3, [sp, #4]
 8005780:	3b04      	subs	r3, #4
 8005782:	429d      	cmp	r5, r3
 8005784:	461a      	mov	r2, r3
 8005786:	d32f      	bcc.n	80057e8 <quorem+0xf4>
 8005788:	613c      	str	r4, [r7, #16]
 800578a:	4638      	mov	r0, r7
 800578c:	f001 f97e 	bl	8006a8c <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	db25      	blt.n	80057e0 <quorem+0xec>
 8005794:	4629      	mov	r1, r5
 8005796:	2000      	movs	r0, #0
 8005798:	f858 2b04 	ldr.w	r2, [r8], #4
 800579c:	f8d1 c000 	ldr.w	ip, [r1]
 80057a0:	fa1f fe82 	uxth.w	lr, r2
 80057a4:	fa1f f38c 	uxth.w	r3, ip
 80057a8:	eba3 030e 	sub.w	r3, r3, lr
 80057ac:	4403      	add	r3, r0
 80057ae:	0c12      	lsrs	r2, r2, #16
 80057b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80057b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057be:	45c1      	cmp	r9, r8
 80057c0:	f841 3b04 	str.w	r3, [r1], #4
 80057c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057c8:	d2e6      	bcs.n	8005798 <quorem+0xa4>
 80057ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057d2:	b922      	cbnz	r2, 80057de <quorem+0xea>
 80057d4:	3b04      	subs	r3, #4
 80057d6:	429d      	cmp	r5, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	d30b      	bcc.n	80057f4 <quorem+0x100>
 80057dc:	613c      	str	r4, [r7, #16]
 80057de:	3601      	adds	r6, #1
 80057e0:	4630      	mov	r0, r6
 80057e2:	b003      	add	sp, #12
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	3b04      	subs	r3, #4
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	d1cb      	bne.n	8005788 <quorem+0x94>
 80057f0:	3c01      	subs	r4, #1
 80057f2:	e7c6      	b.n	8005782 <quorem+0x8e>
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	3b04      	subs	r3, #4
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d1ef      	bne.n	80057dc <quorem+0xe8>
 80057fc:	3c01      	subs	r4, #1
 80057fe:	e7ea      	b.n	80057d6 <quorem+0xe2>
 8005800:	2000      	movs	r0, #0
 8005802:	e7ee      	b.n	80057e2 <quorem+0xee>
 8005804:	0000      	movs	r0, r0
	...

08005808 <_dtoa_r>:
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	69c7      	ldr	r7, [r0, #28]
 800580e:	b097      	sub	sp, #92	@ 0x5c
 8005810:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005814:	ec55 4b10 	vmov	r4, r5, d0
 8005818:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800581a:	9107      	str	r1, [sp, #28]
 800581c:	4681      	mov	r9, r0
 800581e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005820:	9311      	str	r3, [sp, #68]	@ 0x44
 8005822:	b97f      	cbnz	r7, 8005844 <_dtoa_r+0x3c>
 8005824:	2010      	movs	r0, #16
 8005826:	f000 fe09 	bl	800643c <malloc>
 800582a:	4602      	mov	r2, r0
 800582c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005830:	b920      	cbnz	r0, 800583c <_dtoa_r+0x34>
 8005832:	4ba9      	ldr	r3, [pc, #676]	@ (8005ad8 <_dtoa_r+0x2d0>)
 8005834:	21ef      	movs	r1, #239	@ 0xef
 8005836:	48a9      	ldr	r0, [pc, #676]	@ (8005adc <_dtoa_r+0x2d4>)
 8005838:	f7ff ff3e 	bl	80056b8 <__assert_func>
 800583c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005840:	6007      	str	r7, [r0, #0]
 8005842:	60c7      	str	r7, [r0, #12]
 8005844:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	b159      	cbz	r1, 8005864 <_dtoa_r+0x5c>
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	604a      	str	r2, [r1, #4]
 8005850:	2301      	movs	r3, #1
 8005852:	4093      	lsls	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
 8005856:	4648      	mov	r0, r9
 8005858:	f000 fee6 	bl	8006628 <_Bfree>
 800585c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	1e2b      	subs	r3, r5, #0
 8005866:	bfb9      	ittee	lt
 8005868:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800586c:	9305      	strlt	r3, [sp, #20]
 800586e:	2300      	movge	r3, #0
 8005870:	6033      	strge	r3, [r6, #0]
 8005872:	9f05      	ldr	r7, [sp, #20]
 8005874:	4b9a      	ldr	r3, [pc, #616]	@ (8005ae0 <_dtoa_r+0x2d8>)
 8005876:	bfbc      	itt	lt
 8005878:	2201      	movlt	r2, #1
 800587a:	6032      	strlt	r2, [r6, #0]
 800587c:	43bb      	bics	r3, r7
 800587e:	d112      	bne.n	80058a6 <_dtoa_r+0x9e>
 8005880:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005882:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800588c:	4323      	orrs	r3, r4
 800588e:	f000 855a 	beq.w	8006346 <_dtoa_r+0xb3e>
 8005892:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005894:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005af4 <_dtoa_r+0x2ec>
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 855c 	beq.w	8006356 <_dtoa_r+0xb4e>
 800589e:	f10a 0303 	add.w	r3, sl, #3
 80058a2:	f000 bd56 	b.w	8006352 <_dtoa_r+0xb4a>
 80058a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80058aa:	2200      	movs	r2, #0
 80058ac:	ec51 0b17 	vmov	r0, r1, d7
 80058b0:	2300      	movs	r3, #0
 80058b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80058b6:	f7fb f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 80058ba:	4680      	mov	r8, r0
 80058bc:	b158      	cbz	r0, 80058d6 <_dtoa_r+0xce>
 80058be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80058c0:	2301      	movs	r3, #1
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058c6:	b113      	cbz	r3, 80058ce <_dtoa_r+0xc6>
 80058c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80058ca:	4b86      	ldr	r3, [pc, #536]	@ (8005ae4 <_dtoa_r+0x2dc>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005af8 <_dtoa_r+0x2f0>
 80058d2:	f000 bd40 	b.w	8006356 <_dtoa_r+0xb4e>
 80058d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80058da:	aa14      	add	r2, sp, #80	@ 0x50
 80058dc:	a915      	add	r1, sp, #84	@ 0x54
 80058de:	4648      	mov	r0, r9
 80058e0:	f001 f984 	bl	8006bec <__d2b>
 80058e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80058e8:	9002      	str	r0, [sp, #8]
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	d078      	beq.n	80059e0 <_dtoa_r+0x1d8>
 80058ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80058f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005900:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005904:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005908:	4619      	mov	r1, r3
 800590a:	2200      	movs	r2, #0
 800590c:	4b76      	ldr	r3, [pc, #472]	@ (8005ae8 <_dtoa_r+0x2e0>)
 800590e:	f7fa fcc3 	bl	8000298 <__aeabi_dsub>
 8005912:	a36b      	add	r3, pc, #428	@ (adr r3, 8005ac0 <_dtoa_r+0x2b8>)
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f7fa fe76 	bl	8000608 <__aeabi_dmul>
 800591c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005ac8 <_dtoa_r+0x2c0>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f7fa fcbb 	bl	800029c <__adddf3>
 8005926:	4604      	mov	r4, r0
 8005928:	4630      	mov	r0, r6
 800592a:	460d      	mov	r5, r1
 800592c:	f7fa fe02 	bl	8000534 <__aeabi_i2d>
 8005930:	a367      	add	r3, pc, #412	@ (adr r3, 8005ad0 <_dtoa_r+0x2c8>)
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f7fa fe67 	bl	8000608 <__aeabi_dmul>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fa fcab 	bl	800029c <__adddf3>
 8005946:	4604      	mov	r4, r0
 8005948:	460d      	mov	r5, r1
 800594a:	f7fb f90d 	bl	8000b68 <__aeabi_d2iz>
 800594e:	2200      	movs	r2, #0
 8005950:	4607      	mov	r7, r0
 8005952:	2300      	movs	r3, #0
 8005954:	4620      	mov	r0, r4
 8005956:	4629      	mov	r1, r5
 8005958:	f7fb f8c8 	bl	8000aec <__aeabi_dcmplt>
 800595c:	b140      	cbz	r0, 8005970 <_dtoa_r+0x168>
 800595e:	4638      	mov	r0, r7
 8005960:	f7fa fde8 	bl	8000534 <__aeabi_i2d>
 8005964:	4622      	mov	r2, r4
 8005966:	462b      	mov	r3, r5
 8005968:	f7fb f8b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800596c:	b900      	cbnz	r0, 8005970 <_dtoa_r+0x168>
 800596e:	3f01      	subs	r7, #1
 8005970:	2f16      	cmp	r7, #22
 8005972:	d852      	bhi.n	8005a1a <_dtoa_r+0x212>
 8005974:	4b5d      	ldr	r3, [pc, #372]	@ (8005aec <_dtoa_r+0x2e4>)
 8005976:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005982:	f7fb f8b3 	bl	8000aec <__aeabi_dcmplt>
 8005986:	2800      	cmp	r0, #0
 8005988:	d049      	beq.n	8005a1e <_dtoa_r+0x216>
 800598a:	3f01      	subs	r7, #1
 800598c:	2300      	movs	r3, #0
 800598e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005990:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005992:	1b9b      	subs	r3, r3, r6
 8005994:	1e5a      	subs	r2, r3, #1
 8005996:	bf45      	ittet	mi
 8005998:	f1c3 0301 	rsbmi	r3, r3, #1
 800599c:	9300      	strmi	r3, [sp, #0]
 800599e:	2300      	movpl	r3, #0
 80059a0:	2300      	movmi	r3, #0
 80059a2:	9206      	str	r2, [sp, #24]
 80059a4:	bf54      	ite	pl
 80059a6:	9300      	strpl	r3, [sp, #0]
 80059a8:	9306      	strmi	r3, [sp, #24]
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	db39      	blt.n	8005a22 <_dtoa_r+0x21a>
 80059ae:	9b06      	ldr	r3, [sp, #24]
 80059b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80059b2:	443b      	add	r3, r7
 80059b4:	9306      	str	r3, [sp, #24]
 80059b6:	2300      	movs	r3, #0
 80059b8:	9308      	str	r3, [sp, #32]
 80059ba:	9b07      	ldr	r3, [sp, #28]
 80059bc:	2b09      	cmp	r3, #9
 80059be:	d863      	bhi.n	8005a88 <_dtoa_r+0x280>
 80059c0:	2b05      	cmp	r3, #5
 80059c2:	bfc4      	itt	gt
 80059c4:	3b04      	subgt	r3, #4
 80059c6:	9307      	strgt	r3, [sp, #28]
 80059c8:	9b07      	ldr	r3, [sp, #28]
 80059ca:	f1a3 0302 	sub.w	r3, r3, #2
 80059ce:	bfcc      	ite	gt
 80059d0:	2400      	movgt	r4, #0
 80059d2:	2401      	movle	r4, #1
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d863      	bhi.n	8005aa0 <_dtoa_r+0x298>
 80059d8:	e8df f003 	tbb	[pc, r3]
 80059dc:	2b375452 	.word	0x2b375452
 80059e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80059e4:	441e      	add	r6, r3
 80059e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	bfc1      	itttt	gt
 80059ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059f2:	409f      	lslgt	r7, r3
 80059f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059fc:	bfd6      	itet	le
 80059fe:	f1c3 0320 	rsble	r3, r3, #32
 8005a02:	ea47 0003 	orrgt.w	r0, r7, r3
 8005a06:	fa04 f003 	lslle.w	r0, r4, r3
 8005a0a:	f7fa fd83 	bl	8000514 <__aeabi_ui2d>
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a14:	3e01      	subs	r6, #1
 8005a16:	9212      	str	r2, [sp, #72]	@ 0x48
 8005a18:	e776      	b.n	8005908 <_dtoa_r+0x100>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7b7      	b.n	800598e <_dtoa_r+0x186>
 8005a1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005a20:	e7b6      	b.n	8005990 <_dtoa_r+0x188>
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	1bdb      	subs	r3, r3, r7
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	427b      	negs	r3, r7
 8005a2a:	9308      	str	r3, [sp, #32]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005a30:	e7c3      	b.n	80059ba <_dtoa_r+0x1b2>
 8005a32:	2301      	movs	r3, #1
 8005a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a38:	eb07 0b03 	add.w	fp, r7, r3
 8005a3c:	f10b 0301 	add.w	r3, fp, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	bfb8      	it	lt
 8005a46:	2301      	movlt	r3, #1
 8005a48:	e006      	b.n	8005a58 <_dtoa_r+0x250>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dd28      	ble.n	8005aa6 <_dtoa_r+0x29e>
 8005a54:	469b      	mov	fp, r3
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2204      	movs	r2, #4
 8005a60:	f102 0514 	add.w	r5, r2, #20
 8005a64:	429d      	cmp	r5, r3
 8005a66:	d926      	bls.n	8005ab6 <_dtoa_r+0x2ae>
 8005a68:	6041      	str	r1, [r0, #4]
 8005a6a:	4648      	mov	r0, r9
 8005a6c:	f000 fd9c 	bl	80065a8 <_Balloc>
 8005a70:	4682      	mov	sl, r0
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d142      	bne.n	8005afc <_dtoa_r+0x2f4>
 8005a76:	4b1e      	ldr	r3, [pc, #120]	@ (8005af0 <_dtoa_r+0x2e8>)
 8005a78:	4602      	mov	r2, r0
 8005a7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a7e:	e6da      	b.n	8005836 <_dtoa_r+0x2e>
 8005a80:	2300      	movs	r3, #0
 8005a82:	e7e3      	b.n	8005a4c <_dtoa_r+0x244>
 8005a84:	2300      	movs	r3, #0
 8005a86:	e7d5      	b.n	8005a34 <_dtoa_r+0x22c>
 8005a88:	2401      	movs	r4, #1
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9307      	str	r3, [sp, #28]
 8005a8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005a90:	f04f 3bff 	mov.w	fp, #4294967295
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8cd b00c 	str.w	fp, [sp, #12]
 8005a9a:	2312      	movs	r3, #18
 8005a9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a9e:	e7db      	b.n	8005a58 <_dtoa_r+0x250>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa4:	e7f4      	b.n	8005a90 <_dtoa_r+0x288>
 8005aa6:	f04f 0b01 	mov.w	fp, #1
 8005aaa:	f8cd b00c 	str.w	fp, [sp, #12]
 8005aae:	465b      	mov	r3, fp
 8005ab0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005ab4:	e7d0      	b.n	8005a58 <_dtoa_r+0x250>
 8005ab6:	3101      	adds	r1, #1
 8005ab8:	0052      	lsls	r2, r2, #1
 8005aba:	e7d1      	b.n	8005a60 <_dtoa_r+0x258>
 8005abc:	f3af 8000 	nop.w
 8005ac0:	636f4361 	.word	0x636f4361
 8005ac4:	3fd287a7 	.word	0x3fd287a7
 8005ac8:	8b60c8b3 	.word	0x8b60c8b3
 8005acc:	3fc68a28 	.word	0x3fc68a28
 8005ad0:	509f79fb 	.word	0x509f79fb
 8005ad4:	3fd34413 	.word	0x3fd34413
 8005ad8:	08008ca8 	.word	0x08008ca8
 8005adc:	08008d94 	.word	0x08008d94
 8005ae0:	7ff00000 	.word	0x7ff00000
 8005ae4:	08008d28 	.word	0x08008d28
 8005ae8:	3ff80000 	.word	0x3ff80000
 8005aec:	08008ea8 	.word	0x08008ea8
 8005af0:	08008dec 	.word	0x08008dec
 8005af4:	08008d90 	.word	0x08008d90
 8005af8:	08008d27 	.word	0x08008d27
 8005afc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b00:	6018      	str	r0, [r3, #0]
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	2b0e      	cmp	r3, #14
 8005b06:	f200 80a1 	bhi.w	8005c4c <_dtoa_r+0x444>
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	f000 809e 	beq.w	8005c4c <_dtoa_r+0x444>
 8005b10:	2f00      	cmp	r7, #0
 8005b12:	dd33      	ble.n	8005b7c <_dtoa_r+0x374>
 8005b14:	4b9c      	ldr	r3, [pc, #624]	@ (8005d88 <_dtoa_r+0x580>)
 8005b16:	f007 020f 	and.w	r2, r7, #15
 8005b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b1e:	ed93 7b00 	vldr	d7, [r3]
 8005b22:	05f8      	lsls	r0, r7, #23
 8005b24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005b28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b2c:	d516      	bpl.n	8005b5c <_dtoa_r+0x354>
 8005b2e:	4b97      	ldr	r3, [pc, #604]	@ (8005d8c <_dtoa_r+0x584>)
 8005b30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b38:	f7fa fe90 	bl	800085c <__aeabi_ddiv>
 8005b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b40:	f004 040f 	and.w	r4, r4, #15
 8005b44:	2603      	movs	r6, #3
 8005b46:	4d91      	ldr	r5, [pc, #580]	@ (8005d8c <_dtoa_r+0x584>)
 8005b48:	b954      	cbnz	r4, 8005b60 <_dtoa_r+0x358>
 8005b4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b52:	f7fa fe83 	bl	800085c <__aeabi_ddiv>
 8005b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b5a:	e028      	b.n	8005bae <_dtoa_r+0x3a6>
 8005b5c:	2602      	movs	r6, #2
 8005b5e:	e7f2      	b.n	8005b46 <_dtoa_r+0x33e>
 8005b60:	07e1      	lsls	r1, r4, #31
 8005b62:	d508      	bpl.n	8005b76 <_dtoa_r+0x36e>
 8005b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b6c:	f7fa fd4c 	bl	8000608 <__aeabi_dmul>
 8005b70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b74:	3601      	adds	r6, #1
 8005b76:	1064      	asrs	r4, r4, #1
 8005b78:	3508      	adds	r5, #8
 8005b7a:	e7e5      	b.n	8005b48 <_dtoa_r+0x340>
 8005b7c:	f000 80af 	beq.w	8005cde <_dtoa_r+0x4d6>
 8005b80:	427c      	negs	r4, r7
 8005b82:	4b81      	ldr	r3, [pc, #516]	@ (8005d88 <_dtoa_r+0x580>)
 8005b84:	4d81      	ldr	r5, [pc, #516]	@ (8005d8c <_dtoa_r+0x584>)
 8005b86:	f004 020f 	and.w	r2, r4, #15
 8005b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b96:	f7fa fd37 	bl	8000608 <__aeabi_dmul>
 8005b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9e:	1124      	asrs	r4, r4, #4
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2602      	movs	r6, #2
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	f040 808f 	bne.w	8005cc8 <_dtoa_r+0x4c0>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1d3      	bne.n	8005b56 <_dtoa_r+0x34e>
 8005bae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005bb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8094 	beq.w	8005ce2 <_dtoa_r+0x4da>
 8005bba:	4b75      	ldr	r3, [pc, #468]	@ (8005d90 <_dtoa_r+0x588>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa ff93 	bl	8000aec <__aeabi_dcmplt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f000 808b 	beq.w	8005ce2 <_dtoa_r+0x4da>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8087 	beq.w	8005ce2 <_dtoa_r+0x4da>
 8005bd4:	f1bb 0f00 	cmp.w	fp, #0
 8005bd8:	dd34      	ble.n	8005c44 <_dtoa_r+0x43c>
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8005d94 <_dtoa_r+0x58c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa fd11 	bl	8000608 <__aeabi_dmul>
 8005be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bea:	f107 38ff 	add.w	r8, r7, #4294967295
 8005bee:	3601      	adds	r6, #1
 8005bf0:	465c      	mov	r4, fp
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7fa fc9e 	bl	8000534 <__aeabi_i2d>
 8005bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bfc:	f7fa fd04 	bl	8000608 <__aeabi_dmul>
 8005c00:	4b65      	ldr	r3, [pc, #404]	@ (8005d98 <_dtoa_r+0x590>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	f7fa fb4a 	bl	800029c <__adddf3>
 8005c08:	4605      	mov	r5, r0
 8005c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c0e:	2c00      	cmp	r4, #0
 8005c10:	d16a      	bne.n	8005ce8 <_dtoa_r+0x4e0>
 8005c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c16:	4b61      	ldr	r3, [pc, #388]	@ (8005d9c <_dtoa_r+0x594>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f7fa fb3d 	bl	8000298 <__aeabi_dsub>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c26:	462a      	mov	r2, r5
 8005c28:	4633      	mov	r3, r6
 8005c2a:	f7fa ff7d 	bl	8000b28 <__aeabi_dcmpgt>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f040 8298 	bne.w	8006164 <_dtoa_r+0x95c>
 8005c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c38:	462a      	mov	r2, r5
 8005c3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c3e:	f7fa ff55 	bl	8000aec <__aeabi_dcmplt>
 8005c42:	bb38      	cbnz	r0, 8005c94 <_dtoa_r+0x48c>
 8005c44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005c48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f2c0 8157 	blt.w	8005f02 <_dtoa_r+0x6fa>
 8005c54:	2f0e      	cmp	r7, #14
 8005c56:	f300 8154 	bgt.w	8005f02 <_dtoa_r+0x6fa>
 8005c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d88 <_dtoa_r+0x580>)
 8005c5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c60:	ed93 7b00 	vldr	d7, [r3]
 8005c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	ed8d 7b00 	vstr	d7, [sp]
 8005c6c:	f280 80e5 	bge.w	8005e3a <_dtoa_r+0x632>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f300 80e1 	bgt.w	8005e3a <_dtoa_r+0x632>
 8005c78:	d10c      	bne.n	8005c94 <_dtoa_r+0x48c>
 8005c7a:	4b48      	ldr	r3, [pc, #288]	@ (8005d9c <_dtoa_r+0x594>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	ec51 0b17 	vmov	r0, r1, d7
 8005c82:	f7fa fcc1 	bl	8000608 <__aeabi_dmul>
 8005c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c8a:	f7fa ff43 	bl	8000b14 <__aeabi_dcmpge>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f000 8266 	beq.w	8006160 <_dtoa_r+0x958>
 8005c94:	2400      	movs	r4, #0
 8005c96:	4625      	mov	r5, r4
 8005c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c9a:	4656      	mov	r6, sl
 8005c9c:	ea6f 0803 	mvn.w	r8, r3
 8005ca0:	2700      	movs	r7, #0
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4648      	mov	r0, r9
 8005ca6:	f000 fcbf 	bl	8006628 <_Bfree>
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	f000 80bd 	beq.w	8005e2a <_dtoa_r+0x622>
 8005cb0:	b12f      	cbz	r7, 8005cbe <_dtoa_r+0x4b6>
 8005cb2:	42af      	cmp	r7, r5
 8005cb4:	d003      	beq.n	8005cbe <_dtoa_r+0x4b6>
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	4648      	mov	r0, r9
 8005cba:	f000 fcb5 	bl	8006628 <_Bfree>
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4648      	mov	r0, r9
 8005cc2:	f000 fcb1 	bl	8006628 <_Bfree>
 8005cc6:	e0b0      	b.n	8005e2a <_dtoa_r+0x622>
 8005cc8:	07e2      	lsls	r2, r4, #31
 8005cca:	d505      	bpl.n	8005cd8 <_dtoa_r+0x4d0>
 8005ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cd0:	f7fa fc9a 	bl	8000608 <__aeabi_dmul>
 8005cd4:	3601      	adds	r6, #1
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	1064      	asrs	r4, r4, #1
 8005cda:	3508      	adds	r5, #8
 8005cdc:	e762      	b.n	8005ba4 <_dtoa_r+0x39c>
 8005cde:	2602      	movs	r6, #2
 8005ce0:	e765      	b.n	8005bae <_dtoa_r+0x3a6>
 8005ce2:	9c03      	ldr	r4, [sp, #12]
 8005ce4:	46b8      	mov	r8, r7
 8005ce6:	e784      	b.n	8005bf2 <_dtoa_r+0x3ea>
 8005ce8:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <_dtoa_r+0x580>)
 8005cea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cf4:	4454      	add	r4, sl
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	d054      	beq.n	8005da4 <_dtoa_r+0x59c>
 8005cfa:	4929      	ldr	r1, [pc, #164]	@ (8005da0 <_dtoa_r+0x598>)
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f7fa fdad 	bl	800085c <__aeabi_ddiv>
 8005d02:	4633      	mov	r3, r6
 8005d04:	462a      	mov	r2, r5
 8005d06:	f7fa fac7 	bl	8000298 <__aeabi_dsub>
 8005d0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005d0e:	4656      	mov	r6, sl
 8005d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d14:	f7fa ff28 	bl	8000b68 <__aeabi_d2iz>
 8005d18:	4605      	mov	r5, r0
 8005d1a:	f7fa fc0b 	bl	8000534 <__aeabi_i2d>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d26:	f7fa fab7 	bl	8000298 <__aeabi_dsub>
 8005d2a:	3530      	adds	r5, #48	@ 0x30
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d34:	f806 5b01 	strb.w	r5, [r6], #1
 8005d38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d3c:	f7fa fed6 	bl	8000aec <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d172      	bne.n	8005e2a <_dtoa_r+0x622>
 8005d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d48:	4911      	ldr	r1, [pc, #68]	@ (8005d90 <_dtoa_r+0x588>)
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fa faa4 	bl	8000298 <__aeabi_dsub>
 8005d50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d54:	f7fa feca 	bl	8000aec <__aeabi_dcmplt>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f040 80b4 	bne.w	8005ec6 <_dtoa_r+0x6be>
 8005d5e:	42a6      	cmp	r6, r4
 8005d60:	f43f af70 	beq.w	8005c44 <_dtoa_r+0x43c>
 8005d64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005d68:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <_dtoa_r+0x58c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f7fa fc4c 	bl	8000608 <__aeabi_dmul>
 8005d70:	4b08      	ldr	r3, [pc, #32]	@ (8005d94 <_dtoa_r+0x58c>)
 8005d72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005d76:	2200      	movs	r2, #0
 8005d78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d7c:	f7fa fc44 	bl	8000608 <__aeabi_dmul>
 8005d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d84:	e7c4      	b.n	8005d10 <_dtoa_r+0x508>
 8005d86:	bf00      	nop
 8005d88:	08008ea8 	.word	0x08008ea8
 8005d8c:	08008e80 	.word	0x08008e80
 8005d90:	3ff00000 	.word	0x3ff00000
 8005d94:	40240000 	.word	0x40240000
 8005d98:	401c0000 	.word	0x401c0000
 8005d9c:	40140000 	.word	0x40140000
 8005da0:	3fe00000 	.word	0x3fe00000
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	f7fa fc2e 	bl	8000608 <__aeabi_dmul>
 8005dac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005db0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005db2:	4656      	mov	r6, sl
 8005db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005db8:	f7fa fed6 	bl	8000b68 <__aeabi_d2iz>
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	f7fa fbb9 	bl	8000534 <__aeabi_i2d>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dca:	f7fa fa65 	bl	8000298 <__aeabi_dsub>
 8005dce:	3530      	adds	r5, #48	@ 0x30
 8005dd0:	f806 5b01 	strb.w	r5, [r6], #1
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	d124      	bne.n	8005e2e <_dtoa_r+0x626>
 8005de4:	4baf      	ldr	r3, [pc, #700]	@ (80060a4 <_dtoa_r+0x89c>)
 8005de6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005dea:	f7fa fa57 	bl	800029c <__adddf3>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df6:	f7fa fe97 	bl	8000b28 <__aeabi_dcmpgt>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d163      	bne.n	8005ec6 <_dtoa_r+0x6be>
 8005dfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e02:	49a8      	ldr	r1, [pc, #672]	@ (80060a4 <_dtoa_r+0x89c>)
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7fa fa47 	bl	8000298 <__aeabi_dsub>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e12:	f7fa fe6b 	bl	8000aec <__aeabi_dcmplt>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f af14 	beq.w	8005c44 <_dtoa_r+0x43c>
 8005e1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e1e:	1e73      	subs	r3, r6, #1
 8005e20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e26:	2b30      	cmp	r3, #48	@ 0x30
 8005e28:	d0f8      	beq.n	8005e1c <_dtoa_r+0x614>
 8005e2a:	4647      	mov	r7, r8
 8005e2c:	e03b      	b.n	8005ea6 <_dtoa_r+0x69e>
 8005e2e:	4b9e      	ldr	r3, [pc, #632]	@ (80060a8 <_dtoa_r+0x8a0>)
 8005e30:	f7fa fbea 	bl	8000608 <__aeabi_dmul>
 8005e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e38:	e7bc      	b.n	8005db4 <_dtoa_r+0x5ac>
 8005e3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005e3e:	4656      	mov	r6, sl
 8005e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa fd08 	bl	800085c <__aeabi_ddiv>
 8005e4c:	f7fa fe8c 	bl	8000b68 <__aeabi_d2iz>
 8005e50:	4680      	mov	r8, r0
 8005e52:	f7fa fb6f 	bl	8000534 <__aeabi_i2d>
 8005e56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e5a:	f7fa fbd5 	bl	8000608 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005e6a:	f7fa fa15 	bl	8000298 <__aeabi_dsub>
 8005e6e:	f806 4b01 	strb.w	r4, [r6], #1
 8005e72:	9d03      	ldr	r5, [sp, #12]
 8005e74:	eba6 040a 	sub.w	r4, r6, sl
 8005e78:	42a5      	cmp	r5, r4
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	d133      	bne.n	8005ee8 <_dtoa_r+0x6e0>
 8005e80:	f7fa fa0c 	bl	800029c <__adddf3>
 8005e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e88:	4604      	mov	r4, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	f7fa fe4c 	bl	8000b28 <__aeabi_dcmpgt>
 8005e90:	b9c0      	cbnz	r0, 8005ec4 <_dtoa_r+0x6bc>
 8005e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e96:	4620      	mov	r0, r4
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f7fa fe1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e9e:	b110      	cbz	r0, 8005ea6 <_dtoa_r+0x69e>
 8005ea0:	f018 0f01 	tst.w	r8, #1
 8005ea4:	d10e      	bne.n	8005ec4 <_dtoa_r+0x6bc>
 8005ea6:	9902      	ldr	r1, [sp, #8]
 8005ea8:	4648      	mov	r0, r9
 8005eaa:	f000 fbbd 	bl	8006628 <_Bfree>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	7033      	strb	r3, [r6, #0]
 8005eb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005eb4:	3701      	adds	r7, #1
 8005eb6:	601f      	str	r7, [r3, #0]
 8005eb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 824b 	beq.w	8006356 <_dtoa_r+0xb4e>
 8005ec0:	601e      	str	r6, [r3, #0]
 8005ec2:	e248      	b.n	8006356 <_dtoa_r+0xb4e>
 8005ec4:	46b8      	mov	r8, r7
 8005ec6:	4633      	mov	r3, r6
 8005ec8:	461e      	mov	r6, r3
 8005eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ece:	2a39      	cmp	r2, #57	@ 0x39
 8005ed0:	d106      	bne.n	8005ee0 <_dtoa_r+0x6d8>
 8005ed2:	459a      	cmp	sl, r3
 8005ed4:	d1f8      	bne.n	8005ec8 <_dtoa_r+0x6c0>
 8005ed6:	2230      	movs	r2, #48	@ 0x30
 8005ed8:	f108 0801 	add.w	r8, r8, #1
 8005edc:	f88a 2000 	strb.w	r2, [sl]
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	3201      	adds	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e7a0      	b.n	8005e2a <_dtoa_r+0x622>
 8005ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80060a8 <_dtoa_r+0x8a0>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	f7fa fb8c 	bl	8000608 <__aeabi_dmul>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	f7fa fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d09f      	beq.n	8005e40 <_dtoa_r+0x638>
 8005f00:	e7d1      	b.n	8005ea6 <_dtoa_r+0x69e>
 8005f02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	f000 80ea 	beq.w	80060de <_dtoa_r+0x8d6>
 8005f0a:	9a07      	ldr	r2, [sp, #28]
 8005f0c:	2a01      	cmp	r2, #1
 8005f0e:	f300 80cd 	bgt.w	80060ac <_dtoa_r+0x8a4>
 8005f12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	f000 80c1 	beq.w	800609c <_dtoa_r+0x894>
 8005f1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f1e:	9c08      	ldr	r4, [sp, #32]
 8005f20:	9e00      	ldr	r6, [sp, #0]
 8005f22:	9a00      	ldr	r2, [sp, #0]
 8005f24:	441a      	add	r2, r3
 8005f26:	9200      	str	r2, [sp, #0]
 8005f28:	9a06      	ldr	r2, [sp, #24]
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	441a      	add	r2, r3
 8005f2e:	4648      	mov	r0, r9
 8005f30:	9206      	str	r2, [sp, #24]
 8005f32:	f000 fc2d 	bl	8006790 <__i2b>
 8005f36:	4605      	mov	r5, r0
 8005f38:	b166      	cbz	r6, 8005f54 <_dtoa_r+0x74c>
 8005f3a:	9b06      	ldr	r3, [sp, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd09      	ble.n	8005f54 <_dtoa_r+0x74c>
 8005f40:	42b3      	cmp	r3, r6
 8005f42:	9a00      	ldr	r2, [sp, #0]
 8005f44:	bfa8      	it	ge
 8005f46:	4633      	movge	r3, r6
 8005f48:	1ad2      	subs	r2, r2, r3
 8005f4a:	9200      	str	r2, [sp, #0]
 8005f4c:	9a06      	ldr	r2, [sp, #24]
 8005f4e:	1af6      	subs	r6, r6, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	9306      	str	r3, [sp, #24]
 8005f54:	9b08      	ldr	r3, [sp, #32]
 8005f56:	b30b      	cbz	r3, 8005f9c <_dtoa_r+0x794>
 8005f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80c6 	beq.w	80060ec <_dtoa_r+0x8e4>
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	f000 80c0 	beq.w	80060e6 <_dtoa_r+0x8de>
 8005f66:	4629      	mov	r1, r5
 8005f68:	4622      	mov	r2, r4
 8005f6a:	4648      	mov	r0, r9
 8005f6c:	f000 fcc8 	bl	8006900 <__pow5mult>
 8005f70:	9a02      	ldr	r2, [sp, #8]
 8005f72:	4601      	mov	r1, r0
 8005f74:	4605      	mov	r5, r0
 8005f76:	4648      	mov	r0, r9
 8005f78:	f000 fc20 	bl	80067bc <__multiply>
 8005f7c:	9902      	ldr	r1, [sp, #8]
 8005f7e:	4680      	mov	r8, r0
 8005f80:	4648      	mov	r0, r9
 8005f82:	f000 fb51 	bl	8006628 <_Bfree>
 8005f86:	9b08      	ldr	r3, [sp, #32]
 8005f88:	1b1b      	subs	r3, r3, r4
 8005f8a:	9308      	str	r3, [sp, #32]
 8005f8c:	f000 80b1 	beq.w	80060f2 <_dtoa_r+0x8ea>
 8005f90:	9a08      	ldr	r2, [sp, #32]
 8005f92:	4641      	mov	r1, r8
 8005f94:	4648      	mov	r0, r9
 8005f96:	f000 fcb3 	bl	8006900 <__pow5mult>
 8005f9a:	9002      	str	r0, [sp, #8]
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4648      	mov	r0, r9
 8005fa0:	f000 fbf6 	bl	8006790 <__i2b>
 8005fa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 81d8 	beq.w	800635e <_dtoa_r+0xb56>
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	4648      	mov	r0, r9
 8005fb4:	f000 fca4 	bl	8006900 <__pow5mult>
 8005fb8:	9b07      	ldr	r3, [sp, #28]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	f300 809f 	bgt.w	8006100 <_dtoa_r+0x8f8>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 8097 	bne.w	80060f8 <_dtoa_r+0x8f0>
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 8093 	bne.w	80060fc <_dtoa_r+0x8f4>
 8005fd6:	9b05      	ldr	r3, [sp, #20]
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fdc:	0d1b      	lsrs	r3, r3, #20
 8005fde:	051b      	lsls	r3, r3, #20
 8005fe0:	b133      	cbz	r3, 8005ff0 <_dtoa_r+0x7e8>
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	9b06      	ldr	r3, [sp, #24]
 8005fea:	3301      	adds	r3, #1
 8005fec:	9306      	str	r3, [sp, #24]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	9308      	str	r3, [sp, #32]
 8005ff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 81b8 	beq.w	800636a <_dtoa_r+0xb62>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006000:	6918      	ldr	r0, [r3, #16]
 8006002:	f000 fb79 	bl	80066f8 <__hi0bits>
 8006006:	f1c0 0020 	rsb	r0, r0, #32
 800600a:	9b06      	ldr	r3, [sp, #24]
 800600c:	4418      	add	r0, r3
 800600e:	f010 001f 	ands.w	r0, r0, #31
 8006012:	f000 8082 	beq.w	800611a <_dtoa_r+0x912>
 8006016:	f1c0 0320 	rsb	r3, r0, #32
 800601a:	2b04      	cmp	r3, #4
 800601c:	dd73      	ble.n	8006106 <_dtoa_r+0x8fe>
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	f1c0 001c 	rsb	r0, r0, #28
 8006024:	4403      	add	r3, r0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	9b06      	ldr	r3, [sp, #24]
 800602a:	4403      	add	r3, r0
 800602c:	4406      	add	r6, r0
 800602e:	9306      	str	r3, [sp, #24]
 8006030:	9b00      	ldr	r3, [sp, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd05      	ble.n	8006042 <_dtoa_r+0x83a>
 8006036:	9902      	ldr	r1, [sp, #8]
 8006038:	461a      	mov	r2, r3
 800603a:	4648      	mov	r0, r9
 800603c:	f000 fcba 	bl	80069b4 <__lshift>
 8006040:	9002      	str	r0, [sp, #8]
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	dd05      	ble.n	8006054 <_dtoa_r+0x84c>
 8006048:	4621      	mov	r1, r4
 800604a:	461a      	mov	r2, r3
 800604c:	4648      	mov	r0, r9
 800604e:	f000 fcb1 	bl	80069b4 <__lshift>
 8006052:	4604      	mov	r4, r0
 8006054:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d061      	beq.n	800611e <_dtoa_r+0x916>
 800605a:	9802      	ldr	r0, [sp, #8]
 800605c:	4621      	mov	r1, r4
 800605e:	f000 fd15 	bl	8006a8c <__mcmp>
 8006062:	2800      	cmp	r0, #0
 8006064:	da5b      	bge.n	800611e <_dtoa_r+0x916>
 8006066:	2300      	movs	r3, #0
 8006068:	9902      	ldr	r1, [sp, #8]
 800606a:	220a      	movs	r2, #10
 800606c:	4648      	mov	r0, r9
 800606e:	f000 fafd 	bl	800666c <__multadd>
 8006072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006074:	9002      	str	r0, [sp, #8]
 8006076:	f107 38ff 	add.w	r8, r7, #4294967295
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8177 	beq.w	800636e <_dtoa_r+0xb66>
 8006080:	4629      	mov	r1, r5
 8006082:	2300      	movs	r3, #0
 8006084:	220a      	movs	r2, #10
 8006086:	4648      	mov	r0, r9
 8006088:	f000 faf0 	bl	800666c <__multadd>
 800608c:	f1bb 0f00 	cmp.w	fp, #0
 8006090:	4605      	mov	r5, r0
 8006092:	dc6f      	bgt.n	8006174 <_dtoa_r+0x96c>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	2b02      	cmp	r3, #2
 8006098:	dc49      	bgt.n	800612e <_dtoa_r+0x926>
 800609a:	e06b      	b.n	8006174 <_dtoa_r+0x96c>
 800609c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800609e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80060a2:	e73c      	b.n	8005f1e <_dtoa_r+0x716>
 80060a4:	3fe00000 	.word	0x3fe00000
 80060a8:	40240000 	.word	0x40240000
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	1e5c      	subs	r4, r3, #1
 80060b0:	9b08      	ldr	r3, [sp, #32]
 80060b2:	42a3      	cmp	r3, r4
 80060b4:	db09      	blt.n	80060ca <_dtoa_r+0x8c2>
 80060b6:	1b1c      	subs	r4, r3, r4
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f6bf af30 	bge.w	8005f20 <_dtoa_r+0x718>
 80060c0:	9b00      	ldr	r3, [sp, #0]
 80060c2:	9a03      	ldr	r2, [sp, #12]
 80060c4:	1a9e      	subs	r6, r3, r2
 80060c6:	2300      	movs	r3, #0
 80060c8:	e72b      	b.n	8005f22 <_dtoa_r+0x71a>
 80060ca:	9b08      	ldr	r3, [sp, #32]
 80060cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80060ce:	9408      	str	r4, [sp, #32]
 80060d0:	1ae3      	subs	r3, r4, r3
 80060d2:	441a      	add	r2, r3
 80060d4:	9e00      	ldr	r6, [sp, #0]
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80060da:	2400      	movs	r4, #0
 80060dc:	e721      	b.n	8005f22 <_dtoa_r+0x71a>
 80060de:	9c08      	ldr	r4, [sp, #32]
 80060e0:	9e00      	ldr	r6, [sp, #0]
 80060e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80060e4:	e728      	b.n	8005f38 <_dtoa_r+0x730>
 80060e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80060ea:	e751      	b.n	8005f90 <_dtoa_r+0x788>
 80060ec:	9a08      	ldr	r2, [sp, #32]
 80060ee:	9902      	ldr	r1, [sp, #8]
 80060f0:	e750      	b.n	8005f94 <_dtoa_r+0x78c>
 80060f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80060f6:	e751      	b.n	8005f9c <_dtoa_r+0x794>
 80060f8:	2300      	movs	r3, #0
 80060fa:	e779      	b.n	8005ff0 <_dtoa_r+0x7e8>
 80060fc:	9b04      	ldr	r3, [sp, #16]
 80060fe:	e777      	b.n	8005ff0 <_dtoa_r+0x7e8>
 8006100:	2300      	movs	r3, #0
 8006102:	9308      	str	r3, [sp, #32]
 8006104:	e779      	b.n	8005ffa <_dtoa_r+0x7f2>
 8006106:	d093      	beq.n	8006030 <_dtoa_r+0x828>
 8006108:	9a00      	ldr	r2, [sp, #0]
 800610a:	331c      	adds	r3, #28
 800610c:	441a      	add	r2, r3
 800610e:	9200      	str	r2, [sp, #0]
 8006110:	9a06      	ldr	r2, [sp, #24]
 8006112:	441a      	add	r2, r3
 8006114:	441e      	add	r6, r3
 8006116:	9206      	str	r2, [sp, #24]
 8006118:	e78a      	b.n	8006030 <_dtoa_r+0x828>
 800611a:	4603      	mov	r3, r0
 800611c:	e7f4      	b.n	8006108 <_dtoa_r+0x900>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	46b8      	mov	r8, r7
 8006124:	dc20      	bgt.n	8006168 <_dtoa_r+0x960>
 8006126:	469b      	mov	fp, r3
 8006128:	9b07      	ldr	r3, [sp, #28]
 800612a:	2b02      	cmp	r3, #2
 800612c:	dd1e      	ble.n	800616c <_dtoa_r+0x964>
 800612e:	f1bb 0f00 	cmp.w	fp, #0
 8006132:	f47f adb1 	bne.w	8005c98 <_dtoa_r+0x490>
 8006136:	4621      	mov	r1, r4
 8006138:	465b      	mov	r3, fp
 800613a:	2205      	movs	r2, #5
 800613c:	4648      	mov	r0, r9
 800613e:	f000 fa95 	bl	800666c <__multadd>
 8006142:	4601      	mov	r1, r0
 8006144:	4604      	mov	r4, r0
 8006146:	9802      	ldr	r0, [sp, #8]
 8006148:	f000 fca0 	bl	8006a8c <__mcmp>
 800614c:	2800      	cmp	r0, #0
 800614e:	f77f ada3 	ble.w	8005c98 <_dtoa_r+0x490>
 8006152:	4656      	mov	r6, sl
 8006154:	2331      	movs	r3, #49	@ 0x31
 8006156:	f806 3b01 	strb.w	r3, [r6], #1
 800615a:	f108 0801 	add.w	r8, r8, #1
 800615e:	e59f      	b.n	8005ca0 <_dtoa_r+0x498>
 8006160:	9c03      	ldr	r4, [sp, #12]
 8006162:	46b8      	mov	r8, r7
 8006164:	4625      	mov	r5, r4
 8006166:	e7f4      	b.n	8006152 <_dtoa_r+0x94a>
 8006168:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800616c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8101 	beq.w	8006376 <_dtoa_r+0xb6e>
 8006174:	2e00      	cmp	r6, #0
 8006176:	dd05      	ble.n	8006184 <_dtoa_r+0x97c>
 8006178:	4629      	mov	r1, r5
 800617a:	4632      	mov	r2, r6
 800617c:	4648      	mov	r0, r9
 800617e:	f000 fc19 	bl	80069b4 <__lshift>
 8006182:	4605      	mov	r5, r0
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d05c      	beq.n	8006244 <_dtoa_r+0xa3c>
 800618a:	6869      	ldr	r1, [r5, #4]
 800618c:	4648      	mov	r0, r9
 800618e:	f000 fa0b 	bl	80065a8 <_Balloc>
 8006192:	4606      	mov	r6, r0
 8006194:	b928      	cbnz	r0, 80061a2 <_dtoa_r+0x99a>
 8006196:	4b82      	ldr	r3, [pc, #520]	@ (80063a0 <_dtoa_r+0xb98>)
 8006198:	4602      	mov	r2, r0
 800619a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800619e:	f7ff bb4a 	b.w	8005836 <_dtoa_r+0x2e>
 80061a2:	692a      	ldr	r2, [r5, #16]
 80061a4:	3202      	adds	r2, #2
 80061a6:	0092      	lsls	r2, r2, #2
 80061a8:	f105 010c 	add.w	r1, r5, #12
 80061ac:	300c      	adds	r0, #12
 80061ae:	f000 ffb5 	bl	800711c <memcpy>
 80061b2:	2201      	movs	r2, #1
 80061b4:	4631      	mov	r1, r6
 80061b6:	4648      	mov	r0, r9
 80061b8:	f000 fbfc 	bl	80069b4 <__lshift>
 80061bc:	f10a 0301 	add.w	r3, sl, #1
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	eb0a 030b 	add.w	r3, sl, fp
 80061c6:	9308      	str	r3, [sp, #32]
 80061c8:	9b04      	ldr	r3, [sp, #16]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	462f      	mov	r7, r5
 80061d0:	9306      	str	r3, [sp, #24]
 80061d2:	4605      	mov	r5, r0
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	9802      	ldr	r0, [sp, #8]
 80061d8:	4621      	mov	r1, r4
 80061da:	f103 3bff 	add.w	fp, r3, #4294967295
 80061de:	f7ff fa89 	bl	80056f4 <quorem>
 80061e2:	4603      	mov	r3, r0
 80061e4:	3330      	adds	r3, #48	@ 0x30
 80061e6:	9003      	str	r0, [sp, #12]
 80061e8:	4639      	mov	r1, r7
 80061ea:	9802      	ldr	r0, [sp, #8]
 80061ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ee:	f000 fc4d 	bl	8006a8c <__mcmp>
 80061f2:	462a      	mov	r2, r5
 80061f4:	9004      	str	r0, [sp, #16]
 80061f6:	4621      	mov	r1, r4
 80061f8:	4648      	mov	r0, r9
 80061fa:	f000 fc63 	bl	8006ac4 <__mdiff>
 80061fe:	68c2      	ldr	r2, [r0, #12]
 8006200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006202:	4606      	mov	r6, r0
 8006204:	bb02      	cbnz	r2, 8006248 <_dtoa_r+0xa40>
 8006206:	4601      	mov	r1, r0
 8006208:	9802      	ldr	r0, [sp, #8]
 800620a:	f000 fc3f 	bl	8006a8c <__mcmp>
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	4602      	mov	r2, r0
 8006212:	4631      	mov	r1, r6
 8006214:	4648      	mov	r0, r9
 8006216:	920c      	str	r2, [sp, #48]	@ 0x30
 8006218:	9309      	str	r3, [sp, #36]	@ 0x24
 800621a:	f000 fa05 	bl	8006628 <_Bfree>
 800621e:	9b07      	ldr	r3, [sp, #28]
 8006220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006222:	9e00      	ldr	r6, [sp, #0]
 8006224:	ea42 0103 	orr.w	r1, r2, r3
 8006228:	9b06      	ldr	r3, [sp, #24]
 800622a:	4319      	orrs	r1, r3
 800622c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800622e:	d10d      	bne.n	800624c <_dtoa_r+0xa44>
 8006230:	2b39      	cmp	r3, #57	@ 0x39
 8006232:	d027      	beq.n	8006284 <_dtoa_r+0xa7c>
 8006234:	9a04      	ldr	r2, [sp, #16]
 8006236:	2a00      	cmp	r2, #0
 8006238:	dd01      	ble.n	800623e <_dtoa_r+0xa36>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	3331      	adds	r3, #49	@ 0x31
 800623e:	f88b 3000 	strb.w	r3, [fp]
 8006242:	e52e      	b.n	8005ca2 <_dtoa_r+0x49a>
 8006244:	4628      	mov	r0, r5
 8006246:	e7b9      	b.n	80061bc <_dtoa_r+0x9b4>
 8006248:	2201      	movs	r2, #1
 800624a:	e7e2      	b.n	8006212 <_dtoa_r+0xa0a>
 800624c:	9904      	ldr	r1, [sp, #16]
 800624e:	2900      	cmp	r1, #0
 8006250:	db04      	blt.n	800625c <_dtoa_r+0xa54>
 8006252:	9807      	ldr	r0, [sp, #28]
 8006254:	4301      	orrs	r1, r0
 8006256:	9806      	ldr	r0, [sp, #24]
 8006258:	4301      	orrs	r1, r0
 800625a:	d120      	bne.n	800629e <_dtoa_r+0xa96>
 800625c:	2a00      	cmp	r2, #0
 800625e:	ddee      	ble.n	800623e <_dtoa_r+0xa36>
 8006260:	9902      	ldr	r1, [sp, #8]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	4648      	mov	r0, r9
 8006268:	f000 fba4 	bl	80069b4 <__lshift>
 800626c:	4621      	mov	r1, r4
 800626e:	9002      	str	r0, [sp, #8]
 8006270:	f000 fc0c 	bl	8006a8c <__mcmp>
 8006274:	2800      	cmp	r0, #0
 8006276:	9b00      	ldr	r3, [sp, #0]
 8006278:	dc02      	bgt.n	8006280 <_dtoa_r+0xa78>
 800627a:	d1e0      	bne.n	800623e <_dtoa_r+0xa36>
 800627c:	07da      	lsls	r2, r3, #31
 800627e:	d5de      	bpl.n	800623e <_dtoa_r+0xa36>
 8006280:	2b39      	cmp	r3, #57	@ 0x39
 8006282:	d1da      	bne.n	800623a <_dtoa_r+0xa32>
 8006284:	2339      	movs	r3, #57	@ 0x39
 8006286:	f88b 3000 	strb.w	r3, [fp]
 800628a:	4633      	mov	r3, r6
 800628c:	461e      	mov	r6, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006294:	2a39      	cmp	r2, #57	@ 0x39
 8006296:	d04e      	beq.n	8006336 <_dtoa_r+0xb2e>
 8006298:	3201      	adds	r2, #1
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e501      	b.n	8005ca2 <_dtoa_r+0x49a>
 800629e:	2a00      	cmp	r2, #0
 80062a0:	dd03      	ble.n	80062aa <_dtoa_r+0xaa2>
 80062a2:	2b39      	cmp	r3, #57	@ 0x39
 80062a4:	d0ee      	beq.n	8006284 <_dtoa_r+0xa7c>
 80062a6:	3301      	adds	r3, #1
 80062a8:	e7c9      	b.n	800623e <_dtoa_r+0xa36>
 80062aa:	9a00      	ldr	r2, [sp, #0]
 80062ac:	9908      	ldr	r1, [sp, #32]
 80062ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062b2:	428a      	cmp	r2, r1
 80062b4:	d028      	beq.n	8006308 <_dtoa_r+0xb00>
 80062b6:	9902      	ldr	r1, [sp, #8]
 80062b8:	2300      	movs	r3, #0
 80062ba:	220a      	movs	r2, #10
 80062bc:	4648      	mov	r0, r9
 80062be:	f000 f9d5 	bl	800666c <__multadd>
 80062c2:	42af      	cmp	r7, r5
 80062c4:	9002      	str	r0, [sp, #8]
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	f04f 020a 	mov.w	r2, #10
 80062ce:	4639      	mov	r1, r7
 80062d0:	4648      	mov	r0, r9
 80062d2:	d107      	bne.n	80062e4 <_dtoa_r+0xadc>
 80062d4:	f000 f9ca 	bl	800666c <__multadd>
 80062d8:	4607      	mov	r7, r0
 80062da:	4605      	mov	r5, r0
 80062dc:	9b00      	ldr	r3, [sp, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	e777      	b.n	80061d4 <_dtoa_r+0x9cc>
 80062e4:	f000 f9c2 	bl	800666c <__multadd>
 80062e8:	4629      	mov	r1, r5
 80062ea:	4607      	mov	r7, r0
 80062ec:	2300      	movs	r3, #0
 80062ee:	220a      	movs	r2, #10
 80062f0:	4648      	mov	r0, r9
 80062f2:	f000 f9bb 	bl	800666c <__multadd>
 80062f6:	4605      	mov	r5, r0
 80062f8:	e7f0      	b.n	80062dc <_dtoa_r+0xad4>
 80062fa:	f1bb 0f00 	cmp.w	fp, #0
 80062fe:	bfcc      	ite	gt
 8006300:	465e      	movgt	r6, fp
 8006302:	2601      	movle	r6, #1
 8006304:	4456      	add	r6, sl
 8006306:	2700      	movs	r7, #0
 8006308:	9902      	ldr	r1, [sp, #8]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2201      	movs	r2, #1
 800630e:	4648      	mov	r0, r9
 8006310:	f000 fb50 	bl	80069b4 <__lshift>
 8006314:	4621      	mov	r1, r4
 8006316:	9002      	str	r0, [sp, #8]
 8006318:	f000 fbb8 	bl	8006a8c <__mcmp>
 800631c:	2800      	cmp	r0, #0
 800631e:	dcb4      	bgt.n	800628a <_dtoa_r+0xa82>
 8006320:	d102      	bne.n	8006328 <_dtoa_r+0xb20>
 8006322:	9b00      	ldr	r3, [sp, #0]
 8006324:	07db      	lsls	r3, r3, #31
 8006326:	d4b0      	bmi.n	800628a <_dtoa_r+0xa82>
 8006328:	4633      	mov	r3, r6
 800632a:	461e      	mov	r6, r3
 800632c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006330:	2a30      	cmp	r2, #48	@ 0x30
 8006332:	d0fa      	beq.n	800632a <_dtoa_r+0xb22>
 8006334:	e4b5      	b.n	8005ca2 <_dtoa_r+0x49a>
 8006336:	459a      	cmp	sl, r3
 8006338:	d1a8      	bne.n	800628c <_dtoa_r+0xa84>
 800633a:	2331      	movs	r3, #49	@ 0x31
 800633c:	f108 0801 	add.w	r8, r8, #1
 8006340:	f88a 3000 	strb.w	r3, [sl]
 8006344:	e4ad      	b.n	8005ca2 <_dtoa_r+0x49a>
 8006346:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006348:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80063a4 <_dtoa_r+0xb9c>
 800634c:	b11b      	cbz	r3, 8006356 <_dtoa_r+0xb4e>
 800634e:	f10a 0308 	add.w	r3, sl, #8
 8006352:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4650      	mov	r0, sl
 8006358:	b017      	add	sp, #92	@ 0x5c
 800635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635e:	9b07      	ldr	r3, [sp, #28]
 8006360:	2b01      	cmp	r3, #1
 8006362:	f77f ae2e 	ble.w	8005fc2 <_dtoa_r+0x7ba>
 8006366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006368:	9308      	str	r3, [sp, #32]
 800636a:	2001      	movs	r0, #1
 800636c:	e64d      	b.n	800600a <_dtoa_r+0x802>
 800636e:	f1bb 0f00 	cmp.w	fp, #0
 8006372:	f77f aed9 	ble.w	8006128 <_dtoa_r+0x920>
 8006376:	4656      	mov	r6, sl
 8006378:	9802      	ldr	r0, [sp, #8]
 800637a:	4621      	mov	r1, r4
 800637c:	f7ff f9ba 	bl	80056f4 <quorem>
 8006380:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006384:	f806 3b01 	strb.w	r3, [r6], #1
 8006388:	eba6 020a 	sub.w	r2, r6, sl
 800638c:	4593      	cmp	fp, r2
 800638e:	ddb4      	ble.n	80062fa <_dtoa_r+0xaf2>
 8006390:	9902      	ldr	r1, [sp, #8]
 8006392:	2300      	movs	r3, #0
 8006394:	220a      	movs	r2, #10
 8006396:	4648      	mov	r0, r9
 8006398:	f000 f968 	bl	800666c <__multadd>
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	e7eb      	b.n	8006378 <_dtoa_r+0xb70>
 80063a0:	08008dec 	.word	0x08008dec
 80063a4:	08008d87 	.word	0x08008d87

080063a8 <_free_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4605      	mov	r5, r0
 80063ac:	2900      	cmp	r1, #0
 80063ae:	d041      	beq.n	8006434 <_free_r+0x8c>
 80063b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b4:	1f0c      	subs	r4, r1, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfb8      	it	lt
 80063ba:	18e4      	addlt	r4, r4, r3
 80063bc:	f000 f8e8 	bl	8006590 <__malloc_lock>
 80063c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006438 <_free_r+0x90>)
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	b933      	cbnz	r3, 80063d4 <_free_r+0x2c>
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	6014      	str	r4, [r2, #0]
 80063ca:	4628      	mov	r0, r5
 80063cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063d0:	f000 b8e4 	b.w	800659c <__malloc_unlock>
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d908      	bls.n	80063ea <_free_r+0x42>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	1821      	adds	r1, r4, r0
 80063dc:	428b      	cmp	r3, r1
 80063de:	bf01      	itttt	eq
 80063e0:	6819      	ldreq	r1, [r3, #0]
 80063e2:	685b      	ldreq	r3, [r3, #4]
 80063e4:	1809      	addeq	r1, r1, r0
 80063e6:	6021      	streq	r1, [r4, #0]
 80063e8:	e7ed      	b.n	80063c6 <_free_r+0x1e>
 80063ea:	461a      	mov	r2, r3
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b10b      	cbz	r3, 80063f4 <_free_r+0x4c>
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d9fa      	bls.n	80063ea <_free_r+0x42>
 80063f4:	6811      	ldr	r1, [r2, #0]
 80063f6:	1850      	adds	r0, r2, r1
 80063f8:	42a0      	cmp	r0, r4
 80063fa:	d10b      	bne.n	8006414 <_free_r+0x6c>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	4401      	add	r1, r0
 8006400:	1850      	adds	r0, r2, r1
 8006402:	4283      	cmp	r3, r0
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	d1e0      	bne.n	80063ca <_free_r+0x22>
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	6053      	str	r3, [r2, #4]
 800640e:	4408      	add	r0, r1
 8006410:	6010      	str	r0, [r2, #0]
 8006412:	e7da      	b.n	80063ca <_free_r+0x22>
 8006414:	d902      	bls.n	800641c <_free_r+0x74>
 8006416:	230c      	movs	r3, #12
 8006418:	602b      	str	r3, [r5, #0]
 800641a:	e7d6      	b.n	80063ca <_free_r+0x22>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	1821      	adds	r1, r4, r0
 8006420:	428b      	cmp	r3, r1
 8006422:	bf04      	itt	eq
 8006424:	6819      	ldreq	r1, [r3, #0]
 8006426:	685b      	ldreq	r3, [r3, #4]
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	bf04      	itt	eq
 800642c:	1809      	addeq	r1, r1, r0
 800642e:	6021      	streq	r1, [r4, #0]
 8006430:	6054      	str	r4, [r2, #4]
 8006432:	e7ca      	b.n	80063ca <_free_r+0x22>
 8006434:	bd38      	pop	{r3, r4, r5, pc}
 8006436:	bf00      	nop
 8006438:	20000694 	.word	0x20000694

0800643c <malloc>:
 800643c:	4b02      	ldr	r3, [pc, #8]	@ (8006448 <malloc+0xc>)
 800643e:	4601      	mov	r1, r0
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	f000 b825 	b.w	8006490 <_malloc_r>
 8006446:	bf00      	nop
 8006448:	20000020 	.word	0x20000020

0800644c <sbrk_aligned>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4e0f      	ldr	r6, [pc, #60]	@ (800648c <sbrk_aligned+0x40>)
 8006450:	460c      	mov	r4, r1
 8006452:	6831      	ldr	r1, [r6, #0]
 8006454:	4605      	mov	r5, r0
 8006456:	b911      	cbnz	r1, 800645e <sbrk_aligned+0x12>
 8006458:	f000 fe50 	bl	80070fc <_sbrk_r>
 800645c:	6030      	str	r0, [r6, #0]
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 fe4b 	bl	80070fc <_sbrk_r>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d103      	bne.n	8006472 <sbrk_aligned+0x26>
 800646a:	f04f 34ff 	mov.w	r4, #4294967295
 800646e:	4620      	mov	r0, r4
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	1cc4      	adds	r4, r0, #3
 8006474:	f024 0403 	bic.w	r4, r4, #3
 8006478:	42a0      	cmp	r0, r4
 800647a:	d0f8      	beq.n	800646e <sbrk_aligned+0x22>
 800647c:	1a21      	subs	r1, r4, r0
 800647e:	4628      	mov	r0, r5
 8006480:	f000 fe3c 	bl	80070fc <_sbrk_r>
 8006484:	3001      	adds	r0, #1
 8006486:	d1f2      	bne.n	800646e <sbrk_aligned+0x22>
 8006488:	e7ef      	b.n	800646a <sbrk_aligned+0x1e>
 800648a:	bf00      	nop
 800648c:	20000690 	.word	0x20000690

08006490 <_malloc_r>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	1ccd      	adds	r5, r1, #3
 8006496:	f025 0503 	bic.w	r5, r5, #3
 800649a:	3508      	adds	r5, #8
 800649c:	2d0c      	cmp	r5, #12
 800649e:	bf38      	it	cc
 80064a0:	250c      	movcc	r5, #12
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	4606      	mov	r6, r0
 80064a6:	db01      	blt.n	80064ac <_malloc_r+0x1c>
 80064a8:	42a9      	cmp	r1, r5
 80064aa:	d904      	bls.n	80064b6 <_malloc_r+0x26>
 80064ac:	230c      	movs	r3, #12
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	2000      	movs	r0, #0
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800658c <_malloc_r+0xfc>
 80064ba:	f000 f869 	bl	8006590 <__malloc_lock>
 80064be:	f8d8 3000 	ldr.w	r3, [r8]
 80064c2:	461c      	mov	r4, r3
 80064c4:	bb44      	cbnz	r4, 8006518 <_malloc_r+0x88>
 80064c6:	4629      	mov	r1, r5
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff ffbf 	bl	800644c <sbrk_aligned>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	4604      	mov	r4, r0
 80064d2:	d158      	bne.n	8006586 <_malloc_r+0xf6>
 80064d4:	f8d8 4000 	ldr.w	r4, [r8]
 80064d8:	4627      	mov	r7, r4
 80064da:	2f00      	cmp	r7, #0
 80064dc:	d143      	bne.n	8006566 <_malloc_r+0xd6>
 80064de:	2c00      	cmp	r4, #0
 80064e0:	d04b      	beq.n	800657a <_malloc_r+0xea>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	4639      	mov	r1, r7
 80064e6:	4630      	mov	r0, r6
 80064e8:	eb04 0903 	add.w	r9, r4, r3
 80064ec:	f000 fe06 	bl	80070fc <_sbrk_r>
 80064f0:	4581      	cmp	r9, r0
 80064f2:	d142      	bne.n	800657a <_malloc_r+0xea>
 80064f4:	6821      	ldr	r1, [r4, #0]
 80064f6:	1a6d      	subs	r5, r5, r1
 80064f8:	4629      	mov	r1, r5
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff ffa6 	bl	800644c <sbrk_aligned>
 8006500:	3001      	adds	r0, #1
 8006502:	d03a      	beq.n	800657a <_malloc_r+0xea>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	442b      	add	r3, r5
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	f8d8 3000 	ldr.w	r3, [r8]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	bb62      	cbnz	r2, 800656c <_malloc_r+0xdc>
 8006512:	f8c8 7000 	str.w	r7, [r8]
 8006516:	e00f      	b.n	8006538 <_malloc_r+0xa8>
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	1b52      	subs	r2, r2, r5
 800651c:	d420      	bmi.n	8006560 <_malloc_r+0xd0>
 800651e:	2a0b      	cmp	r2, #11
 8006520:	d917      	bls.n	8006552 <_malloc_r+0xc2>
 8006522:	1961      	adds	r1, r4, r5
 8006524:	42a3      	cmp	r3, r4
 8006526:	6025      	str	r5, [r4, #0]
 8006528:	bf18      	it	ne
 800652a:	6059      	strne	r1, [r3, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	bf08      	it	eq
 8006530:	f8c8 1000 	streq.w	r1, [r8]
 8006534:	5162      	str	r2, [r4, r5]
 8006536:	604b      	str	r3, [r1, #4]
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f82f 	bl	800659c <__malloc_unlock>
 800653e:	f104 000b 	add.w	r0, r4, #11
 8006542:	1d23      	adds	r3, r4, #4
 8006544:	f020 0007 	bic.w	r0, r0, #7
 8006548:	1ac2      	subs	r2, r0, r3
 800654a:	bf1c      	itt	ne
 800654c:	1a1b      	subne	r3, r3, r0
 800654e:	50a3      	strne	r3, [r4, r2]
 8006550:	e7af      	b.n	80064b2 <_malloc_r+0x22>
 8006552:	6862      	ldr	r2, [r4, #4]
 8006554:	42a3      	cmp	r3, r4
 8006556:	bf0c      	ite	eq
 8006558:	f8c8 2000 	streq.w	r2, [r8]
 800655c:	605a      	strne	r2, [r3, #4]
 800655e:	e7eb      	b.n	8006538 <_malloc_r+0xa8>
 8006560:	4623      	mov	r3, r4
 8006562:	6864      	ldr	r4, [r4, #4]
 8006564:	e7ae      	b.n	80064c4 <_malloc_r+0x34>
 8006566:	463c      	mov	r4, r7
 8006568:	687f      	ldr	r7, [r7, #4]
 800656a:	e7b6      	b.n	80064da <_malloc_r+0x4a>
 800656c:	461a      	mov	r2, r3
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	42a3      	cmp	r3, r4
 8006572:	d1fb      	bne.n	800656c <_malloc_r+0xdc>
 8006574:	2300      	movs	r3, #0
 8006576:	6053      	str	r3, [r2, #4]
 8006578:	e7de      	b.n	8006538 <_malloc_r+0xa8>
 800657a:	230c      	movs	r3, #12
 800657c:	6033      	str	r3, [r6, #0]
 800657e:	4630      	mov	r0, r6
 8006580:	f000 f80c 	bl	800659c <__malloc_unlock>
 8006584:	e794      	b.n	80064b0 <_malloc_r+0x20>
 8006586:	6005      	str	r5, [r0, #0]
 8006588:	e7d6      	b.n	8006538 <_malloc_r+0xa8>
 800658a:	bf00      	nop
 800658c:	20000694 	.word	0x20000694

08006590 <__malloc_lock>:
 8006590:	4801      	ldr	r0, [pc, #4]	@ (8006598 <__malloc_lock+0x8>)
 8006592:	f7ff b88e 	b.w	80056b2 <__retarget_lock_acquire_recursive>
 8006596:	bf00      	nop
 8006598:	2000068c 	.word	0x2000068c

0800659c <__malloc_unlock>:
 800659c:	4801      	ldr	r0, [pc, #4]	@ (80065a4 <__malloc_unlock+0x8>)
 800659e:	f7ff b889 	b.w	80056b4 <__retarget_lock_release_recursive>
 80065a2:	bf00      	nop
 80065a4:	2000068c 	.word	0x2000068c

080065a8 <_Balloc>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	69c6      	ldr	r6, [r0, #28]
 80065ac:	4604      	mov	r4, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	b976      	cbnz	r6, 80065d0 <_Balloc+0x28>
 80065b2:	2010      	movs	r0, #16
 80065b4:	f7ff ff42 	bl	800643c <malloc>
 80065b8:	4602      	mov	r2, r0
 80065ba:	61e0      	str	r0, [r4, #28]
 80065bc:	b920      	cbnz	r0, 80065c8 <_Balloc+0x20>
 80065be:	4b18      	ldr	r3, [pc, #96]	@ (8006620 <_Balloc+0x78>)
 80065c0:	4818      	ldr	r0, [pc, #96]	@ (8006624 <_Balloc+0x7c>)
 80065c2:	216b      	movs	r1, #107	@ 0x6b
 80065c4:	f7ff f878 	bl	80056b8 <__assert_func>
 80065c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065cc:	6006      	str	r6, [r0, #0]
 80065ce:	60c6      	str	r6, [r0, #12]
 80065d0:	69e6      	ldr	r6, [r4, #28]
 80065d2:	68f3      	ldr	r3, [r6, #12]
 80065d4:	b183      	cbz	r3, 80065f8 <_Balloc+0x50>
 80065d6:	69e3      	ldr	r3, [r4, #28]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065de:	b9b8      	cbnz	r0, 8006610 <_Balloc+0x68>
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f605 	lsl.w	r6, r1, r5
 80065e6:	1d72      	adds	r2, r6, #5
 80065e8:	0092      	lsls	r2, r2, #2
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 fdab 	bl	8007146 <_calloc_r>
 80065f0:	b160      	cbz	r0, 800660c <_Balloc+0x64>
 80065f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065f6:	e00e      	b.n	8006616 <_Balloc+0x6e>
 80065f8:	2221      	movs	r2, #33	@ 0x21
 80065fa:	2104      	movs	r1, #4
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fda2 	bl	8007146 <_calloc_r>
 8006602:	69e3      	ldr	r3, [r4, #28]
 8006604:	60f0      	str	r0, [r6, #12]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e4      	bne.n	80065d6 <_Balloc+0x2e>
 800660c:	2000      	movs	r0, #0
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	6802      	ldr	r2, [r0, #0]
 8006612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006616:	2300      	movs	r3, #0
 8006618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800661c:	e7f7      	b.n	800660e <_Balloc+0x66>
 800661e:	bf00      	nop
 8006620:	08008ca8 	.word	0x08008ca8
 8006624:	08008dfd 	.word	0x08008dfd

08006628 <_Bfree>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	69c6      	ldr	r6, [r0, #28]
 800662c:	4605      	mov	r5, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b976      	cbnz	r6, 8006650 <_Bfree+0x28>
 8006632:	2010      	movs	r0, #16
 8006634:	f7ff ff02 	bl	800643c <malloc>
 8006638:	4602      	mov	r2, r0
 800663a:	61e8      	str	r0, [r5, #28]
 800663c:	b920      	cbnz	r0, 8006648 <_Bfree+0x20>
 800663e:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <_Bfree+0x3c>)
 8006640:	4809      	ldr	r0, [pc, #36]	@ (8006668 <_Bfree+0x40>)
 8006642:	218f      	movs	r1, #143	@ 0x8f
 8006644:	f7ff f838 	bl	80056b8 <__assert_func>
 8006648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800664c:	6006      	str	r6, [r0, #0]
 800664e:	60c6      	str	r6, [r0, #12]
 8006650:	b13c      	cbz	r4, 8006662 <_Bfree+0x3a>
 8006652:	69eb      	ldr	r3, [r5, #28]
 8006654:	6862      	ldr	r2, [r4, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800665c:	6021      	str	r1, [r4, #0]
 800665e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	08008ca8 	.word	0x08008ca8
 8006668:	08008dfd 	.word	0x08008dfd

0800666c <__multadd>:
 800666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	690d      	ldr	r5, [r1, #16]
 8006672:	4607      	mov	r7, r0
 8006674:	460c      	mov	r4, r1
 8006676:	461e      	mov	r6, r3
 8006678:	f101 0c14 	add.w	ip, r1, #20
 800667c:	2000      	movs	r0, #0
 800667e:	f8dc 3000 	ldr.w	r3, [ip]
 8006682:	b299      	uxth	r1, r3
 8006684:	fb02 6101 	mla	r1, r2, r1, r6
 8006688:	0c1e      	lsrs	r6, r3, #16
 800668a:	0c0b      	lsrs	r3, r1, #16
 800668c:	fb02 3306 	mla	r3, r2, r6, r3
 8006690:	b289      	uxth	r1, r1
 8006692:	3001      	adds	r0, #1
 8006694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006698:	4285      	cmp	r5, r0
 800669a:	f84c 1b04 	str.w	r1, [ip], #4
 800669e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066a2:	dcec      	bgt.n	800667e <__multadd+0x12>
 80066a4:	b30e      	cbz	r6, 80066ea <__multadd+0x7e>
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	dc19      	bgt.n	80066e0 <__multadd+0x74>
 80066ac:	6861      	ldr	r1, [r4, #4]
 80066ae:	4638      	mov	r0, r7
 80066b0:	3101      	adds	r1, #1
 80066b2:	f7ff ff79 	bl	80065a8 <_Balloc>
 80066b6:	4680      	mov	r8, r0
 80066b8:	b928      	cbnz	r0, 80066c6 <__multadd+0x5a>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b0c      	ldr	r3, [pc, #48]	@ (80066f0 <__multadd+0x84>)
 80066be:	480d      	ldr	r0, [pc, #52]	@ (80066f4 <__multadd+0x88>)
 80066c0:	21ba      	movs	r1, #186	@ 0xba
 80066c2:	f7fe fff9 	bl	80056b8 <__assert_func>
 80066c6:	6922      	ldr	r2, [r4, #16]
 80066c8:	3202      	adds	r2, #2
 80066ca:	f104 010c 	add.w	r1, r4, #12
 80066ce:	0092      	lsls	r2, r2, #2
 80066d0:	300c      	adds	r0, #12
 80066d2:	f000 fd23 	bl	800711c <memcpy>
 80066d6:	4621      	mov	r1, r4
 80066d8:	4638      	mov	r0, r7
 80066da:	f7ff ffa5 	bl	8006628 <_Bfree>
 80066de:	4644      	mov	r4, r8
 80066e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066e4:	3501      	adds	r5, #1
 80066e6:	615e      	str	r6, [r3, #20]
 80066e8:	6125      	str	r5, [r4, #16]
 80066ea:	4620      	mov	r0, r4
 80066ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f0:	08008dec 	.word	0x08008dec
 80066f4:	08008dfd 	.word	0x08008dfd

080066f8 <__hi0bits>:
 80066f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066fc:	4603      	mov	r3, r0
 80066fe:	bf36      	itet	cc
 8006700:	0403      	lslcc	r3, r0, #16
 8006702:	2000      	movcs	r0, #0
 8006704:	2010      	movcc	r0, #16
 8006706:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800670a:	bf3c      	itt	cc
 800670c:	021b      	lslcc	r3, r3, #8
 800670e:	3008      	addcc	r0, #8
 8006710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006714:	bf3c      	itt	cc
 8006716:	011b      	lslcc	r3, r3, #4
 8006718:	3004      	addcc	r0, #4
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671e:	bf3c      	itt	cc
 8006720:	009b      	lslcc	r3, r3, #2
 8006722:	3002      	addcc	r0, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	db05      	blt.n	8006734 <__hi0bits+0x3c>
 8006728:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800672c:	f100 0001 	add.w	r0, r0, #1
 8006730:	bf08      	it	eq
 8006732:	2020      	moveq	r0, #32
 8006734:	4770      	bx	lr

08006736 <__lo0bits>:
 8006736:	6803      	ldr	r3, [r0, #0]
 8006738:	4602      	mov	r2, r0
 800673a:	f013 0007 	ands.w	r0, r3, #7
 800673e:	d00b      	beq.n	8006758 <__lo0bits+0x22>
 8006740:	07d9      	lsls	r1, r3, #31
 8006742:	d421      	bmi.n	8006788 <__lo0bits+0x52>
 8006744:	0798      	lsls	r0, r3, #30
 8006746:	bf49      	itett	mi
 8006748:	085b      	lsrmi	r3, r3, #1
 800674a:	089b      	lsrpl	r3, r3, #2
 800674c:	2001      	movmi	r0, #1
 800674e:	6013      	strmi	r3, [r2, #0]
 8006750:	bf5c      	itt	pl
 8006752:	6013      	strpl	r3, [r2, #0]
 8006754:	2002      	movpl	r0, #2
 8006756:	4770      	bx	lr
 8006758:	b299      	uxth	r1, r3
 800675a:	b909      	cbnz	r1, 8006760 <__lo0bits+0x2a>
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	2010      	movs	r0, #16
 8006760:	b2d9      	uxtb	r1, r3
 8006762:	b909      	cbnz	r1, 8006768 <__lo0bits+0x32>
 8006764:	3008      	adds	r0, #8
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	0719      	lsls	r1, r3, #28
 800676a:	bf04      	itt	eq
 800676c:	091b      	lsreq	r3, r3, #4
 800676e:	3004      	addeq	r0, #4
 8006770:	0799      	lsls	r1, r3, #30
 8006772:	bf04      	itt	eq
 8006774:	089b      	lsreq	r3, r3, #2
 8006776:	3002      	addeq	r0, #2
 8006778:	07d9      	lsls	r1, r3, #31
 800677a:	d403      	bmi.n	8006784 <__lo0bits+0x4e>
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	f100 0001 	add.w	r0, r0, #1
 8006782:	d003      	beq.n	800678c <__lo0bits+0x56>
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4770      	bx	lr
 8006788:	2000      	movs	r0, #0
 800678a:	4770      	bx	lr
 800678c:	2020      	movs	r0, #32
 800678e:	4770      	bx	lr

08006790 <__i2b>:
 8006790:	b510      	push	{r4, lr}
 8006792:	460c      	mov	r4, r1
 8006794:	2101      	movs	r1, #1
 8006796:	f7ff ff07 	bl	80065a8 <_Balloc>
 800679a:	4602      	mov	r2, r0
 800679c:	b928      	cbnz	r0, 80067aa <__i2b+0x1a>
 800679e:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <__i2b+0x24>)
 80067a0:	4805      	ldr	r0, [pc, #20]	@ (80067b8 <__i2b+0x28>)
 80067a2:	f240 1145 	movw	r1, #325	@ 0x145
 80067a6:	f7fe ff87 	bl	80056b8 <__assert_func>
 80067aa:	2301      	movs	r3, #1
 80067ac:	6144      	str	r4, [r0, #20]
 80067ae:	6103      	str	r3, [r0, #16]
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	bf00      	nop
 80067b4:	08008dec 	.word	0x08008dec
 80067b8:	08008dfd 	.word	0x08008dfd

080067bc <__multiply>:
 80067bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c0:	4617      	mov	r7, r2
 80067c2:	690a      	ldr	r2, [r1, #16]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	bfa8      	it	ge
 80067ca:	463b      	movge	r3, r7
 80067cc:	4689      	mov	r9, r1
 80067ce:	bfa4      	itt	ge
 80067d0:	460f      	movge	r7, r1
 80067d2:	4699      	movge	r9, r3
 80067d4:	693d      	ldr	r5, [r7, #16]
 80067d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	eb05 060a 	add.w	r6, r5, sl
 80067e2:	42b3      	cmp	r3, r6
 80067e4:	b085      	sub	sp, #20
 80067e6:	bfb8      	it	lt
 80067e8:	3101      	addlt	r1, #1
 80067ea:	f7ff fedd 	bl	80065a8 <_Balloc>
 80067ee:	b930      	cbnz	r0, 80067fe <__multiply+0x42>
 80067f0:	4602      	mov	r2, r0
 80067f2:	4b41      	ldr	r3, [pc, #260]	@ (80068f8 <__multiply+0x13c>)
 80067f4:	4841      	ldr	r0, [pc, #260]	@ (80068fc <__multiply+0x140>)
 80067f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067fa:	f7fe ff5d 	bl	80056b8 <__assert_func>
 80067fe:	f100 0414 	add.w	r4, r0, #20
 8006802:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006806:	4623      	mov	r3, r4
 8006808:	2200      	movs	r2, #0
 800680a:	4573      	cmp	r3, lr
 800680c:	d320      	bcc.n	8006850 <__multiply+0x94>
 800680e:	f107 0814 	add.w	r8, r7, #20
 8006812:	f109 0114 	add.w	r1, r9, #20
 8006816:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800681a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	1beb      	subs	r3, r5, r7
 8006822:	3b15      	subs	r3, #21
 8006824:	f023 0303 	bic.w	r3, r3, #3
 8006828:	3304      	adds	r3, #4
 800682a:	3715      	adds	r7, #21
 800682c:	42bd      	cmp	r5, r7
 800682e:	bf38      	it	cc
 8006830:	2304      	movcc	r3, #4
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	9103      	str	r1, [sp, #12]
 8006838:	428b      	cmp	r3, r1
 800683a:	d80c      	bhi.n	8006856 <__multiply+0x9a>
 800683c:	2e00      	cmp	r6, #0
 800683e:	dd03      	ble.n	8006848 <__multiply+0x8c>
 8006840:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006844:	2b00      	cmp	r3, #0
 8006846:	d055      	beq.n	80068f4 <__multiply+0x138>
 8006848:	6106      	str	r6, [r0, #16]
 800684a:	b005      	add	sp, #20
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	f843 2b04 	str.w	r2, [r3], #4
 8006854:	e7d9      	b.n	800680a <__multiply+0x4e>
 8006856:	f8b1 a000 	ldrh.w	sl, [r1]
 800685a:	f1ba 0f00 	cmp.w	sl, #0
 800685e:	d01f      	beq.n	80068a0 <__multiply+0xe4>
 8006860:	46c4      	mov	ip, r8
 8006862:	46a1      	mov	r9, r4
 8006864:	2700      	movs	r7, #0
 8006866:	f85c 2b04 	ldr.w	r2, [ip], #4
 800686a:	f8d9 3000 	ldr.w	r3, [r9]
 800686e:	fa1f fb82 	uxth.w	fp, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	fb0a 330b 	mla	r3, sl, fp, r3
 8006878:	443b      	add	r3, r7
 800687a:	f8d9 7000 	ldr.w	r7, [r9]
 800687e:	0c12      	lsrs	r2, r2, #16
 8006880:	0c3f      	lsrs	r7, r7, #16
 8006882:	fb0a 7202 	mla	r2, sl, r2, r7
 8006886:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800688a:	b29b      	uxth	r3, r3
 800688c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006890:	4565      	cmp	r5, ip
 8006892:	f849 3b04 	str.w	r3, [r9], #4
 8006896:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800689a:	d8e4      	bhi.n	8006866 <__multiply+0xaa>
 800689c:	9b01      	ldr	r3, [sp, #4]
 800689e:	50e7      	str	r7, [r4, r3]
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80068a6:	3104      	adds	r1, #4
 80068a8:	f1b9 0f00 	cmp.w	r9, #0
 80068ac:	d020      	beq.n	80068f0 <__multiply+0x134>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	4647      	mov	r7, r8
 80068b2:	46a4      	mov	ip, r4
 80068b4:	f04f 0a00 	mov.w	sl, #0
 80068b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80068bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80068c0:	fb09 220b 	mla	r2, r9, fp, r2
 80068c4:	4452      	add	r2, sl
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068cc:	f84c 3b04 	str.w	r3, [ip], #4
 80068d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80068d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80068dc:	fb09 330a 	mla	r3, r9, sl, r3
 80068e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80068e4:	42bd      	cmp	r5, r7
 80068e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068ea:	d8e5      	bhi.n	80068b8 <__multiply+0xfc>
 80068ec:	9a01      	ldr	r2, [sp, #4]
 80068ee:	50a3      	str	r3, [r4, r2]
 80068f0:	3404      	adds	r4, #4
 80068f2:	e79f      	b.n	8006834 <__multiply+0x78>
 80068f4:	3e01      	subs	r6, #1
 80068f6:	e7a1      	b.n	800683c <__multiply+0x80>
 80068f8:	08008dec 	.word	0x08008dec
 80068fc:	08008dfd 	.word	0x08008dfd

08006900 <__pow5mult>:
 8006900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006904:	4615      	mov	r5, r2
 8006906:	f012 0203 	ands.w	r2, r2, #3
 800690a:	4607      	mov	r7, r0
 800690c:	460e      	mov	r6, r1
 800690e:	d007      	beq.n	8006920 <__pow5mult+0x20>
 8006910:	4c25      	ldr	r4, [pc, #148]	@ (80069a8 <__pow5mult+0xa8>)
 8006912:	3a01      	subs	r2, #1
 8006914:	2300      	movs	r3, #0
 8006916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800691a:	f7ff fea7 	bl	800666c <__multadd>
 800691e:	4606      	mov	r6, r0
 8006920:	10ad      	asrs	r5, r5, #2
 8006922:	d03d      	beq.n	80069a0 <__pow5mult+0xa0>
 8006924:	69fc      	ldr	r4, [r7, #28]
 8006926:	b97c      	cbnz	r4, 8006948 <__pow5mult+0x48>
 8006928:	2010      	movs	r0, #16
 800692a:	f7ff fd87 	bl	800643c <malloc>
 800692e:	4602      	mov	r2, r0
 8006930:	61f8      	str	r0, [r7, #28]
 8006932:	b928      	cbnz	r0, 8006940 <__pow5mult+0x40>
 8006934:	4b1d      	ldr	r3, [pc, #116]	@ (80069ac <__pow5mult+0xac>)
 8006936:	481e      	ldr	r0, [pc, #120]	@ (80069b0 <__pow5mult+0xb0>)
 8006938:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800693c:	f7fe febc 	bl	80056b8 <__assert_func>
 8006940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006944:	6004      	str	r4, [r0, #0]
 8006946:	60c4      	str	r4, [r0, #12]
 8006948:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800694c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006950:	b94c      	cbnz	r4, 8006966 <__pow5mult+0x66>
 8006952:	f240 2171 	movw	r1, #625	@ 0x271
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff ff1a 	bl	8006790 <__i2b>
 800695c:	2300      	movs	r3, #0
 800695e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006962:	4604      	mov	r4, r0
 8006964:	6003      	str	r3, [r0, #0]
 8006966:	f04f 0900 	mov.w	r9, #0
 800696a:	07eb      	lsls	r3, r5, #31
 800696c:	d50a      	bpl.n	8006984 <__pow5mult+0x84>
 800696e:	4631      	mov	r1, r6
 8006970:	4622      	mov	r2, r4
 8006972:	4638      	mov	r0, r7
 8006974:	f7ff ff22 	bl	80067bc <__multiply>
 8006978:	4631      	mov	r1, r6
 800697a:	4680      	mov	r8, r0
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff fe53 	bl	8006628 <_Bfree>
 8006982:	4646      	mov	r6, r8
 8006984:	106d      	asrs	r5, r5, #1
 8006986:	d00b      	beq.n	80069a0 <__pow5mult+0xa0>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	b938      	cbnz	r0, 800699c <__pow5mult+0x9c>
 800698c:	4622      	mov	r2, r4
 800698e:	4621      	mov	r1, r4
 8006990:	4638      	mov	r0, r7
 8006992:	f7ff ff13 	bl	80067bc <__multiply>
 8006996:	6020      	str	r0, [r4, #0]
 8006998:	f8c0 9000 	str.w	r9, [r0]
 800699c:	4604      	mov	r4, r0
 800699e:	e7e4      	b.n	800696a <__pow5mult+0x6a>
 80069a0:	4630      	mov	r0, r6
 80069a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a6:	bf00      	nop
 80069a8:	08008e74 	.word	0x08008e74
 80069ac:	08008ca8 	.word	0x08008ca8
 80069b0:	08008dfd 	.word	0x08008dfd

080069b4 <__lshift>:
 80069b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b8:	460c      	mov	r4, r1
 80069ba:	6849      	ldr	r1, [r1, #4]
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	4607      	mov	r7, r0
 80069c6:	4691      	mov	r9, r2
 80069c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069cc:	f108 0601 	add.w	r6, r8, #1
 80069d0:	42b3      	cmp	r3, r6
 80069d2:	db0b      	blt.n	80069ec <__lshift+0x38>
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7ff fde7 	bl	80065a8 <_Balloc>
 80069da:	4605      	mov	r5, r0
 80069dc:	b948      	cbnz	r0, 80069f2 <__lshift+0x3e>
 80069de:	4602      	mov	r2, r0
 80069e0:	4b28      	ldr	r3, [pc, #160]	@ (8006a84 <__lshift+0xd0>)
 80069e2:	4829      	ldr	r0, [pc, #164]	@ (8006a88 <__lshift+0xd4>)
 80069e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069e8:	f7fe fe66 	bl	80056b8 <__assert_func>
 80069ec:	3101      	adds	r1, #1
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	e7ee      	b.n	80069d0 <__lshift+0x1c>
 80069f2:	2300      	movs	r3, #0
 80069f4:	f100 0114 	add.w	r1, r0, #20
 80069f8:	f100 0210 	add.w	r2, r0, #16
 80069fc:	4618      	mov	r0, r3
 80069fe:	4553      	cmp	r3, sl
 8006a00:	db33      	blt.n	8006a6a <__lshift+0xb6>
 8006a02:	6920      	ldr	r0, [r4, #16]
 8006a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a08:	f104 0314 	add.w	r3, r4, #20
 8006a0c:	f019 091f 	ands.w	r9, r9, #31
 8006a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a18:	d02b      	beq.n	8006a72 <__lshift+0xbe>
 8006a1a:	f1c9 0e20 	rsb	lr, r9, #32
 8006a1e:	468a      	mov	sl, r1
 8006a20:	2200      	movs	r2, #0
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	fa00 f009 	lsl.w	r0, r0, r9
 8006a28:	4310      	orrs	r0, r2
 8006a2a:	f84a 0b04 	str.w	r0, [sl], #4
 8006a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a32:	459c      	cmp	ip, r3
 8006a34:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a38:	d8f3      	bhi.n	8006a22 <__lshift+0x6e>
 8006a3a:	ebac 0304 	sub.w	r3, ip, r4
 8006a3e:	3b15      	subs	r3, #21
 8006a40:	f023 0303 	bic.w	r3, r3, #3
 8006a44:	3304      	adds	r3, #4
 8006a46:	f104 0015 	add.w	r0, r4, #21
 8006a4a:	4560      	cmp	r0, ip
 8006a4c:	bf88      	it	hi
 8006a4e:	2304      	movhi	r3, #4
 8006a50:	50ca      	str	r2, [r1, r3]
 8006a52:	b10a      	cbz	r2, 8006a58 <__lshift+0xa4>
 8006a54:	f108 0602 	add.w	r6, r8, #2
 8006a58:	3e01      	subs	r6, #1
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	612e      	str	r6, [r5, #16]
 8006a5e:	4621      	mov	r1, r4
 8006a60:	f7ff fde2 	bl	8006628 <_Bfree>
 8006a64:	4628      	mov	r0, r5
 8006a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a6e:	3301      	adds	r3, #1
 8006a70:	e7c5      	b.n	80069fe <__lshift+0x4a>
 8006a72:	3904      	subs	r1, #4
 8006a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a78:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a7c:	459c      	cmp	ip, r3
 8006a7e:	d8f9      	bhi.n	8006a74 <__lshift+0xc0>
 8006a80:	e7ea      	b.n	8006a58 <__lshift+0xa4>
 8006a82:	bf00      	nop
 8006a84:	08008dec 	.word	0x08008dec
 8006a88:	08008dfd 	.word	0x08008dfd

08006a8c <__mcmp>:
 8006a8c:	690a      	ldr	r2, [r1, #16]
 8006a8e:	4603      	mov	r3, r0
 8006a90:	6900      	ldr	r0, [r0, #16]
 8006a92:	1a80      	subs	r0, r0, r2
 8006a94:	b530      	push	{r4, r5, lr}
 8006a96:	d10e      	bne.n	8006ab6 <__mcmp+0x2a>
 8006a98:	3314      	adds	r3, #20
 8006a9a:	3114      	adds	r1, #20
 8006a9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006aa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006aa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006aa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006aac:	4295      	cmp	r5, r2
 8006aae:	d003      	beq.n	8006ab8 <__mcmp+0x2c>
 8006ab0:	d205      	bcs.n	8006abe <__mcmp+0x32>
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	bd30      	pop	{r4, r5, pc}
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d3f3      	bcc.n	8006aa4 <__mcmp+0x18>
 8006abc:	e7fb      	b.n	8006ab6 <__mcmp+0x2a>
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e7f9      	b.n	8006ab6 <__mcmp+0x2a>
	...

08006ac4 <__mdiff>:
 8006ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	4689      	mov	r9, r1
 8006aca:	4606      	mov	r6, r0
 8006acc:	4611      	mov	r1, r2
 8006ace:	4648      	mov	r0, r9
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	f7ff ffdb 	bl	8006a8c <__mcmp>
 8006ad6:	1e05      	subs	r5, r0, #0
 8006ad8:	d112      	bne.n	8006b00 <__mdiff+0x3c>
 8006ada:	4629      	mov	r1, r5
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff fd63 	bl	80065a8 <_Balloc>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	b928      	cbnz	r0, 8006af2 <__mdiff+0x2e>
 8006ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8006be4 <__mdiff+0x120>)
 8006ae8:	f240 2137 	movw	r1, #567	@ 0x237
 8006aec:	483e      	ldr	r0, [pc, #248]	@ (8006be8 <__mdiff+0x124>)
 8006aee:	f7fe fde3 	bl	80056b8 <__assert_func>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006af8:	4610      	mov	r0, r2
 8006afa:	b003      	add	sp, #12
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	bfbc      	itt	lt
 8006b02:	464b      	movlt	r3, r9
 8006b04:	46a1      	movlt	r9, r4
 8006b06:	4630      	mov	r0, r6
 8006b08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b0c:	bfba      	itte	lt
 8006b0e:	461c      	movlt	r4, r3
 8006b10:	2501      	movlt	r5, #1
 8006b12:	2500      	movge	r5, #0
 8006b14:	f7ff fd48 	bl	80065a8 <_Balloc>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	b918      	cbnz	r0, 8006b24 <__mdiff+0x60>
 8006b1c:	4b31      	ldr	r3, [pc, #196]	@ (8006be4 <__mdiff+0x120>)
 8006b1e:	f240 2145 	movw	r1, #581	@ 0x245
 8006b22:	e7e3      	b.n	8006aec <__mdiff+0x28>
 8006b24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b28:	6926      	ldr	r6, [r4, #16]
 8006b2a:	60c5      	str	r5, [r0, #12]
 8006b2c:	f109 0310 	add.w	r3, r9, #16
 8006b30:	f109 0514 	add.w	r5, r9, #20
 8006b34:	f104 0e14 	add.w	lr, r4, #20
 8006b38:	f100 0b14 	add.w	fp, r0, #20
 8006b3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	46d9      	mov	r9, fp
 8006b48:	f04f 0c00 	mov.w	ip, #0
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	fa1f f38a 	uxth.w	r3, sl
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	b283      	uxth	r3, r0
 8006b60:	1acb      	subs	r3, r1, r3
 8006b62:	0c00      	lsrs	r0, r0, #16
 8006b64:	4463      	add	r3, ip
 8006b66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b74:	4576      	cmp	r6, lr
 8006b76:	f849 3b04 	str.w	r3, [r9], #4
 8006b7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b7e:	d8e5      	bhi.n	8006b4c <__mdiff+0x88>
 8006b80:	1b33      	subs	r3, r6, r4
 8006b82:	3b15      	subs	r3, #21
 8006b84:	f023 0303 	bic.w	r3, r3, #3
 8006b88:	3415      	adds	r4, #21
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	bf38      	it	cc
 8006b90:	2304      	movcc	r3, #4
 8006b92:	441d      	add	r5, r3
 8006b94:	445b      	add	r3, fp
 8006b96:	461e      	mov	r6, r3
 8006b98:	462c      	mov	r4, r5
 8006b9a:	4544      	cmp	r4, r8
 8006b9c:	d30e      	bcc.n	8006bbc <__mdiff+0xf8>
 8006b9e:	f108 0103 	add.w	r1, r8, #3
 8006ba2:	1b49      	subs	r1, r1, r5
 8006ba4:	f021 0103 	bic.w	r1, r1, #3
 8006ba8:	3d03      	subs	r5, #3
 8006baa:	45a8      	cmp	r8, r5
 8006bac:	bf38      	it	cc
 8006bae:	2100      	movcc	r1, #0
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bb6:	b191      	cbz	r1, 8006bde <__mdiff+0x11a>
 8006bb8:	6117      	str	r7, [r2, #16]
 8006bba:	e79d      	b.n	8006af8 <__mdiff+0x34>
 8006bbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006bc0:	46e6      	mov	lr, ip
 8006bc2:	0c08      	lsrs	r0, r1, #16
 8006bc4:	fa1c fc81 	uxtah	ip, ip, r1
 8006bc8:	4471      	add	r1, lr
 8006bca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006bce:	b289      	uxth	r1, r1
 8006bd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bd4:	f846 1b04 	str.w	r1, [r6], #4
 8006bd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bdc:	e7dd      	b.n	8006b9a <__mdiff+0xd6>
 8006bde:	3f01      	subs	r7, #1
 8006be0:	e7e7      	b.n	8006bb2 <__mdiff+0xee>
 8006be2:	bf00      	nop
 8006be4:	08008dec 	.word	0x08008dec
 8006be8:	08008dfd 	.word	0x08008dfd

08006bec <__d2b>:
 8006bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	ec59 8b10 	vmov	r8, r9, d0
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	f7ff fcd5 	bl	80065a8 <_Balloc>
 8006bfe:	4604      	mov	r4, r0
 8006c00:	b930      	cbnz	r0, 8006c10 <__d2b+0x24>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b23      	ldr	r3, [pc, #140]	@ (8006c94 <__d2b+0xa8>)
 8006c06:	4824      	ldr	r0, [pc, #144]	@ (8006c98 <__d2b+0xac>)
 8006c08:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c0c:	f7fe fd54 	bl	80056b8 <__assert_func>
 8006c10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c18:	b10d      	cbz	r5, 8006c1e <__d2b+0x32>
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f1b8 0300 	subs.w	r3, r8, #0
 8006c24:	d023      	beq.n	8006c6e <__d2b+0x82>
 8006c26:	4668      	mov	r0, sp
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f7ff fd84 	bl	8006736 <__lo0bits>
 8006c2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c32:	b1d0      	cbz	r0, 8006c6a <__d2b+0x7e>
 8006c34:	f1c0 0320 	rsb	r3, r0, #32
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	40c2      	lsrs	r2, r0
 8006c40:	6163      	str	r3, [r4, #20]
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	61a3      	str	r3, [r4, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2201      	moveq	r2, #1
 8006c4e:	2202      	movne	r2, #2
 8006c50:	6122      	str	r2, [r4, #16]
 8006c52:	b1a5      	cbz	r5, 8006c7e <__d2b+0x92>
 8006c54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c58:	4405      	add	r5, r0
 8006c5a:	603d      	str	r5, [r7, #0]
 8006c5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c60:	6030      	str	r0, [r6, #0]
 8006c62:	4620      	mov	r0, r4
 8006c64:	b003      	add	sp, #12
 8006c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	6161      	str	r1, [r4, #20]
 8006c6c:	e7ea      	b.n	8006c44 <__d2b+0x58>
 8006c6e:	a801      	add	r0, sp, #4
 8006c70:	f7ff fd61 	bl	8006736 <__lo0bits>
 8006c74:	9b01      	ldr	r3, [sp, #4]
 8006c76:	6163      	str	r3, [r4, #20]
 8006c78:	3020      	adds	r0, #32
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	e7e8      	b.n	8006c50 <__d2b+0x64>
 8006c7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c86:	6038      	str	r0, [r7, #0]
 8006c88:	6918      	ldr	r0, [r3, #16]
 8006c8a:	f7ff fd35 	bl	80066f8 <__hi0bits>
 8006c8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c92:	e7e5      	b.n	8006c60 <__d2b+0x74>
 8006c94:	08008dec 	.word	0x08008dec
 8006c98:	08008dfd 	.word	0x08008dfd

08006c9c <__ssputs_r>:
 8006c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	688e      	ldr	r6, [r1, #8]
 8006ca2:	461f      	mov	r7, r3
 8006ca4:	42be      	cmp	r6, r7
 8006ca6:	680b      	ldr	r3, [r1, #0]
 8006ca8:	4682      	mov	sl, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	4690      	mov	r8, r2
 8006cae:	d82d      	bhi.n	8006d0c <__ssputs_r+0x70>
 8006cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cb8:	d026      	beq.n	8006d08 <__ssputs_r+0x6c>
 8006cba:	6965      	ldr	r5, [r4, #20]
 8006cbc:	6909      	ldr	r1, [r1, #16]
 8006cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cc2:	eba3 0901 	sub.w	r9, r3, r1
 8006cc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cca:	1c7b      	adds	r3, r7, #1
 8006ccc:	444b      	add	r3, r9
 8006cce:	106d      	asrs	r5, r5, #1
 8006cd0:	429d      	cmp	r5, r3
 8006cd2:	bf38      	it	cc
 8006cd4:	461d      	movcc	r5, r3
 8006cd6:	0553      	lsls	r3, r2, #21
 8006cd8:	d527      	bpl.n	8006d2a <__ssputs_r+0x8e>
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7ff fbd8 	bl	8006490 <_malloc_r>
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	b360      	cbz	r0, 8006d3e <__ssputs_r+0xa2>
 8006ce4:	6921      	ldr	r1, [r4, #16]
 8006ce6:	464a      	mov	r2, r9
 8006ce8:	f000 fa18 	bl	800711c <memcpy>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	6126      	str	r6, [r4, #16]
 8006cfa:	6165      	str	r5, [r4, #20]
 8006cfc:	444e      	add	r6, r9
 8006cfe:	eba5 0509 	sub.w	r5, r5, r9
 8006d02:	6026      	str	r6, [r4, #0]
 8006d04:	60a5      	str	r5, [r4, #8]
 8006d06:	463e      	mov	r6, r7
 8006d08:	42be      	cmp	r6, r7
 8006d0a:	d900      	bls.n	8006d0e <__ssputs_r+0x72>
 8006d0c:	463e      	mov	r6, r7
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	4632      	mov	r2, r6
 8006d12:	4641      	mov	r1, r8
 8006d14:	f000 f9d8 	bl	80070c8 <memmove>
 8006d18:	68a3      	ldr	r3, [r4, #8]
 8006d1a:	1b9b      	subs	r3, r3, r6
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	4433      	add	r3, r6
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	2000      	movs	r0, #0
 8006d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	f000 fa31 	bl	8007192 <_realloc_r>
 8006d30:	4606      	mov	r6, r0
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d1e0      	bne.n	8006cf8 <__ssputs_r+0x5c>
 8006d36:	6921      	ldr	r1, [r4, #16]
 8006d38:	4650      	mov	r0, sl
 8006d3a:	f7ff fb35 	bl	80063a8 <_free_r>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	f8ca 3000 	str.w	r3, [sl]
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e7e9      	b.n	8006d26 <__ssputs_r+0x8a>
	...

08006d54 <_svfiprintf_r>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	4698      	mov	r8, r3
 8006d5a:	898b      	ldrh	r3, [r1, #12]
 8006d5c:	061b      	lsls	r3, r3, #24
 8006d5e:	b09d      	sub	sp, #116	@ 0x74
 8006d60:	4607      	mov	r7, r0
 8006d62:	460d      	mov	r5, r1
 8006d64:	4614      	mov	r4, r2
 8006d66:	d510      	bpl.n	8006d8a <_svfiprintf_r+0x36>
 8006d68:	690b      	ldr	r3, [r1, #16]
 8006d6a:	b973      	cbnz	r3, 8006d8a <_svfiprintf_r+0x36>
 8006d6c:	2140      	movs	r1, #64	@ 0x40
 8006d6e:	f7ff fb8f 	bl	8006490 <_malloc_r>
 8006d72:	6028      	str	r0, [r5, #0]
 8006d74:	6128      	str	r0, [r5, #16]
 8006d76:	b930      	cbnz	r0, 8006d86 <_svfiprintf_r+0x32>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	b01d      	add	sp, #116	@ 0x74
 8006d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d86:	2340      	movs	r3, #64	@ 0x40
 8006d88:	616b      	str	r3, [r5, #20]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8e:	2320      	movs	r3, #32
 8006d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d98:	2330      	movs	r3, #48	@ 0x30
 8006d9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f38 <_svfiprintf_r+0x1e4>
 8006d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006da2:	f04f 0901 	mov.w	r9, #1
 8006da6:	4623      	mov	r3, r4
 8006da8:	469a      	mov	sl, r3
 8006daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dae:	b10a      	cbz	r2, 8006db4 <_svfiprintf_r+0x60>
 8006db0:	2a25      	cmp	r2, #37	@ 0x25
 8006db2:	d1f9      	bne.n	8006da8 <_svfiprintf_r+0x54>
 8006db4:	ebba 0b04 	subs.w	fp, sl, r4
 8006db8:	d00b      	beq.n	8006dd2 <_svfiprintf_r+0x7e>
 8006dba:	465b      	mov	r3, fp
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ff6b 	bl	8006c9c <__ssputs_r>
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f000 80a7 	beq.w	8006f1a <_svfiprintf_r+0x1c6>
 8006dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dce:	445a      	add	r2, fp
 8006dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 809f 	beq.w	8006f1a <_svfiprintf_r+0x1c6>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295
 8006de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de6:	f10a 0a01 	add.w	sl, sl, #1
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	9307      	str	r3, [sp, #28]
 8006dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006df4:	4654      	mov	r4, sl
 8006df6:	2205      	movs	r2, #5
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	484e      	ldr	r0, [pc, #312]	@ (8006f38 <_svfiprintf_r+0x1e4>)
 8006dfe:	f7f9 f9ef 	bl	80001e0 <memchr>
 8006e02:	9a04      	ldr	r2, [sp, #16]
 8006e04:	b9d8      	cbnz	r0, 8006e3e <_svfiprintf_r+0xea>
 8006e06:	06d0      	lsls	r0, r2, #27
 8006e08:	bf44      	itt	mi
 8006e0a:	2320      	movmi	r3, #32
 8006e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e10:	0711      	lsls	r1, r2, #28
 8006e12:	bf44      	itt	mi
 8006e14:	232b      	movmi	r3, #43	@ 0x2b
 8006e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e20:	d015      	beq.n	8006e4e <_svfiprintf_r+0xfa>
 8006e22:	9a07      	ldr	r2, [sp, #28]
 8006e24:	4654      	mov	r4, sl
 8006e26:	2000      	movs	r0, #0
 8006e28:	f04f 0c0a 	mov.w	ip, #10
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e32:	3b30      	subs	r3, #48	@ 0x30
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	d94b      	bls.n	8006ed0 <_svfiprintf_r+0x17c>
 8006e38:	b1b0      	cbz	r0, 8006e68 <_svfiprintf_r+0x114>
 8006e3a:	9207      	str	r2, [sp, #28]
 8006e3c:	e014      	b.n	8006e68 <_svfiprintf_r+0x114>
 8006e3e:	eba0 0308 	sub.w	r3, r0, r8
 8006e42:	fa09 f303 	lsl.w	r3, r9, r3
 8006e46:	4313      	orrs	r3, r2
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	46a2      	mov	sl, r4
 8006e4c:	e7d2      	b.n	8006df4 <_svfiprintf_r+0xa0>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	1d19      	adds	r1, r3, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	9103      	str	r1, [sp, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bfbb      	ittet	lt
 8006e5a:	425b      	neglt	r3, r3
 8006e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e60:	9307      	strge	r3, [sp, #28]
 8006e62:	9307      	strlt	r3, [sp, #28]
 8006e64:	bfb8      	it	lt
 8006e66:	9204      	strlt	r2, [sp, #16]
 8006e68:	7823      	ldrb	r3, [r4, #0]
 8006e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e6c:	d10a      	bne.n	8006e84 <_svfiprintf_r+0x130>
 8006e6e:	7863      	ldrb	r3, [r4, #1]
 8006e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e72:	d132      	bne.n	8006eda <_svfiprintf_r+0x186>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	9203      	str	r2, [sp, #12]
 8006e7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e80:	3402      	adds	r4, #2
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f48 <_svfiprintf_r+0x1f4>
 8006e88:	7821      	ldrb	r1, [r4, #0]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f7f9 f9a7 	bl	80001e0 <memchr>
 8006e92:	b138      	cbz	r0, 8006ea4 <_svfiprintf_r+0x150>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	eba0 000a 	sub.w	r0, r0, sl
 8006e9a:	2240      	movs	r2, #64	@ 0x40
 8006e9c:	4082      	lsls	r2, r0
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	3401      	adds	r4, #1
 8006ea2:	9304      	str	r3, [sp, #16]
 8006ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea8:	4824      	ldr	r0, [pc, #144]	@ (8006f3c <_svfiprintf_r+0x1e8>)
 8006eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006eae:	2206      	movs	r2, #6
 8006eb0:	f7f9 f996 	bl	80001e0 <memchr>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d036      	beq.n	8006f26 <_svfiprintf_r+0x1d2>
 8006eb8:	4b21      	ldr	r3, [pc, #132]	@ (8006f40 <_svfiprintf_r+0x1ec>)
 8006eba:	bb1b      	cbnz	r3, 8006f04 <_svfiprintf_r+0x1b0>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	3307      	adds	r3, #7
 8006ec0:	f023 0307 	bic.w	r3, r3, #7
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	9303      	str	r3, [sp, #12]
 8006ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eca:	4433      	add	r3, r6
 8006ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ece:	e76a      	b.n	8006da6 <_svfiprintf_r+0x52>
 8006ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	e7a8      	b.n	8006e2c <_svfiprintf_r+0xd8>
 8006eda:	2300      	movs	r3, #0
 8006edc:	3401      	adds	r4, #1
 8006ede:	9305      	str	r3, [sp, #20]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f04f 0c0a 	mov.w	ip, #10
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eec:	3a30      	subs	r2, #48	@ 0x30
 8006eee:	2a09      	cmp	r2, #9
 8006ef0:	d903      	bls.n	8006efa <_svfiprintf_r+0x1a6>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0c6      	beq.n	8006e84 <_svfiprintf_r+0x130>
 8006ef6:	9105      	str	r1, [sp, #20]
 8006ef8:	e7c4      	b.n	8006e84 <_svfiprintf_r+0x130>
 8006efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006efe:	4604      	mov	r4, r0
 8006f00:	2301      	movs	r3, #1
 8006f02:	e7f0      	b.n	8006ee6 <_svfiprintf_r+0x192>
 8006f04:	ab03      	add	r3, sp, #12
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <_svfiprintf_r+0x1f0>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f7fd fe74 	bl	8004bfc <_printf_float>
 8006f14:	1c42      	adds	r2, r0, #1
 8006f16:	4606      	mov	r6, r0
 8006f18:	d1d6      	bne.n	8006ec8 <_svfiprintf_r+0x174>
 8006f1a:	89ab      	ldrh	r3, [r5, #12]
 8006f1c:	065b      	lsls	r3, r3, #25
 8006f1e:	f53f af2d 	bmi.w	8006d7c <_svfiprintf_r+0x28>
 8006f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f24:	e72c      	b.n	8006d80 <_svfiprintf_r+0x2c>
 8006f26:	ab03      	add	r3, sp, #12
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	462a      	mov	r2, r5
 8006f2c:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <_svfiprintf_r+0x1f0>)
 8006f2e:	a904      	add	r1, sp, #16
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7fe f8fb 	bl	800512c <_printf_i>
 8006f36:	e7ed      	b.n	8006f14 <_svfiprintf_r+0x1c0>
 8006f38:	08008e56 	.word	0x08008e56
 8006f3c:	08008e60 	.word	0x08008e60
 8006f40:	08004bfd 	.word	0x08004bfd
 8006f44:	08006c9d 	.word	0x08006c9d
 8006f48:	08008e5c 	.word	0x08008e5c

08006f4c <__sflush_r>:
 8006f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f54:	0716      	lsls	r6, r2, #28
 8006f56:	4605      	mov	r5, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	d454      	bmi.n	8007006 <__sflush_r+0xba>
 8006f5c:	684b      	ldr	r3, [r1, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dc02      	bgt.n	8006f68 <__sflush_r+0x1c>
 8006f62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dd48      	ble.n	8006ffa <__sflush_r+0xae>
 8006f68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	d045      	beq.n	8006ffa <__sflush_r+0xae>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f74:	682f      	ldr	r7, [r5, #0]
 8006f76:	6a21      	ldr	r1, [r4, #32]
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	d030      	beq.n	8006fde <__sflush_r+0x92>
 8006f7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	0759      	lsls	r1, r3, #29
 8006f82:	d505      	bpl.n	8006f90 <__sflush_r+0x44>
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f8a:	b10b      	cbz	r3, 8006f90 <__sflush_r+0x44>
 8006f8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f94:	6a21      	ldr	r1, [r4, #32]
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b0      	blx	r6
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	d106      	bne.n	8006fae <__sflush_r+0x62>
 8006fa0:	6829      	ldr	r1, [r5, #0]
 8006fa2:	291d      	cmp	r1, #29
 8006fa4:	d82b      	bhi.n	8006ffe <__sflush_r+0xb2>
 8006fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8007050 <__sflush_r+0x104>)
 8006fa8:	40ca      	lsrs	r2, r1
 8006faa:	07d6      	lsls	r6, r2, #31
 8006fac:	d527      	bpl.n	8006ffe <__sflush_r+0xb2>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	6062      	str	r2, [r4, #4]
 8006fb2:	04d9      	lsls	r1, r3, #19
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	d504      	bpl.n	8006fc4 <__sflush_r+0x78>
 8006fba:	1c42      	adds	r2, r0, #1
 8006fbc:	d101      	bne.n	8006fc2 <__sflush_r+0x76>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	b903      	cbnz	r3, 8006fc4 <__sflush_r+0x78>
 8006fc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fc6:	602f      	str	r7, [r5, #0]
 8006fc8:	b1b9      	cbz	r1, 8006ffa <__sflush_r+0xae>
 8006fca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fce:	4299      	cmp	r1, r3
 8006fd0:	d002      	beq.n	8006fd8 <__sflush_r+0x8c>
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7ff f9e8 	bl	80063a8 <_free_r>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fdc:	e00d      	b.n	8006ffa <__sflush_r+0xae>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b0      	blx	r6
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	1c50      	adds	r0, r2, #1
 8006fe8:	d1c9      	bne.n	8006f7e <__sflush_r+0x32>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0c6      	beq.n	8006f7e <__sflush_r+0x32>
 8006ff0:	2b1d      	cmp	r3, #29
 8006ff2:	d001      	beq.n	8006ff8 <__sflush_r+0xac>
 8006ff4:	2b16      	cmp	r3, #22
 8006ff6:	d11e      	bne.n	8007036 <__sflush_r+0xea>
 8006ff8:	602f      	str	r7, [r5, #0]
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	e022      	b.n	8007044 <__sflush_r+0xf8>
 8006ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007002:	b21b      	sxth	r3, r3
 8007004:	e01b      	b.n	800703e <__sflush_r+0xf2>
 8007006:	690f      	ldr	r7, [r1, #16]
 8007008:	2f00      	cmp	r7, #0
 800700a:	d0f6      	beq.n	8006ffa <__sflush_r+0xae>
 800700c:	0793      	lsls	r3, r2, #30
 800700e:	680e      	ldr	r6, [r1, #0]
 8007010:	bf08      	it	eq
 8007012:	694b      	ldreq	r3, [r1, #20]
 8007014:	600f      	str	r7, [r1, #0]
 8007016:	bf18      	it	ne
 8007018:	2300      	movne	r3, #0
 800701a:	eba6 0807 	sub.w	r8, r6, r7
 800701e:	608b      	str	r3, [r1, #8]
 8007020:	f1b8 0f00 	cmp.w	r8, #0
 8007024:	dde9      	ble.n	8006ffa <__sflush_r+0xae>
 8007026:	6a21      	ldr	r1, [r4, #32]
 8007028:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800702a:	4643      	mov	r3, r8
 800702c:	463a      	mov	r2, r7
 800702e:	4628      	mov	r0, r5
 8007030:	47b0      	blx	r6
 8007032:	2800      	cmp	r0, #0
 8007034:	dc08      	bgt.n	8007048 <__sflush_r+0xfc>
 8007036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800703e:	81a3      	strh	r3, [r4, #12]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	4407      	add	r7, r0
 800704a:	eba8 0800 	sub.w	r8, r8, r0
 800704e:	e7e7      	b.n	8007020 <__sflush_r+0xd4>
 8007050:	20400001 	.word	0x20400001

08007054 <_fflush_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	690b      	ldr	r3, [r1, #16]
 8007058:	4605      	mov	r5, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b913      	cbnz	r3, 8007064 <_fflush_r+0x10>
 800705e:	2500      	movs	r5, #0
 8007060:	4628      	mov	r0, r5
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	b118      	cbz	r0, 800706e <_fflush_r+0x1a>
 8007066:	6a03      	ldr	r3, [r0, #32]
 8007068:	b90b      	cbnz	r3, 800706e <_fflush_r+0x1a>
 800706a:	f7fe fa09 	bl	8005480 <__sinit>
 800706e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f3      	beq.n	800705e <_fflush_r+0xa>
 8007076:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007078:	07d0      	lsls	r0, r2, #31
 800707a:	d404      	bmi.n	8007086 <_fflush_r+0x32>
 800707c:	0599      	lsls	r1, r3, #22
 800707e:	d402      	bmi.n	8007086 <_fflush_r+0x32>
 8007080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007082:	f7fe fb16 	bl	80056b2 <__retarget_lock_acquire_recursive>
 8007086:	4628      	mov	r0, r5
 8007088:	4621      	mov	r1, r4
 800708a:	f7ff ff5f 	bl	8006f4c <__sflush_r>
 800708e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007090:	07da      	lsls	r2, r3, #31
 8007092:	4605      	mov	r5, r0
 8007094:	d4e4      	bmi.n	8007060 <_fflush_r+0xc>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	059b      	lsls	r3, r3, #22
 800709a:	d4e1      	bmi.n	8007060 <_fflush_r+0xc>
 800709c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800709e:	f7fe fb09 	bl	80056b4 <__retarget_lock_release_recursive>
 80070a2:	e7dd      	b.n	8007060 <_fflush_r+0xc>

080070a4 <fiprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	b503      	push	{r0, r1, lr}
 80070a8:	4601      	mov	r1, r0
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	4805      	ldr	r0, [pc, #20]	@ (80070c4 <fiprintf+0x20>)
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	6800      	ldr	r0, [r0, #0]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	f000 f8d1 	bl	800725c <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	20000020 	.word	0x20000020

080070c8 <memmove>:
 80070c8:	4288      	cmp	r0, r1
 80070ca:	b510      	push	{r4, lr}
 80070cc:	eb01 0402 	add.w	r4, r1, r2
 80070d0:	d902      	bls.n	80070d8 <memmove+0x10>
 80070d2:	4284      	cmp	r4, r0
 80070d4:	4623      	mov	r3, r4
 80070d6:	d807      	bhi.n	80070e8 <memmove+0x20>
 80070d8:	1e43      	subs	r3, r0, #1
 80070da:	42a1      	cmp	r1, r4
 80070dc:	d008      	beq.n	80070f0 <memmove+0x28>
 80070de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e6:	e7f8      	b.n	80070da <memmove+0x12>
 80070e8:	4402      	add	r2, r0
 80070ea:	4601      	mov	r1, r0
 80070ec:	428a      	cmp	r2, r1
 80070ee:	d100      	bne.n	80070f2 <memmove+0x2a>
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070fa:	e7f7      	b.n	80070ec <memmove+0x24>

080070fc <_sbrk_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d06      	ldr	r5, [pc, #24]	@ (8007118 <_sbrk_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	602b      	str	r3, [r5, #0]
 8007108:	f7fa ff14 	bl	8001f34 <_sbrk>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_sbrk_r+0x1a>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_sbrk_r+0x1a>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000688 	.word	0x20000688

0800711c <memcpy>:
 800711c:	440a      	add	r2, r1
 800711e:	4291      	cmp	r1, r2
 8007120:	f100 33ff 	add.w	r3, r0, #4294967295
 8007124:	d100      	bne.n	8007128 <memcpy+0xc>
 8007126:	4770      	bx	lr
 8007128:	b510      	push	{r4, lr}
 800712a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800712e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007132:	4291      	cmp	r1, r2
 8007134:	d1f9      	bne.n	800712a <memcpy+0xe>
 8007136:	bd10      	pop	{r4, pc}

08007138 <abort>:
 8007138:	b508      	push	{r3, lr}
 800713a:	2006      	movs	r0, #6
 800713c:	f000 fa62 	bl	8007604 <raise>
 8007140:	2001      	movs	r0, #1
 8007142:	f7fa fe7f 	bl	8001e44 <_exit>

08007146 <_calloc_r>:
 8007146:	b570      	push	{r4, r5, r6, lr}
 8007148:	fba1 5402 	umull	r5, r4, r1, r2
 800714c:	b934      	cbnz	r4, 800715c <_calloc_r+0x16>
 800714e:	4629      	mov	r1, r5
 8007150:	f7ff f99e 	bl	8006490 <_malloc_r>
 8007154:	4606      	mov	r6, r0
 8007156:	b928      	cbnz	r0, 8007164 <_calloc_r+0x1e>
 8007158:	4630      	mov	r0, r6
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	220c      	movs	r2, #12
 800715e:	6002      	str	r2, [r0, #0]
 8007160:	2600      	movs	r6, #0
 8007162:	e7f9      	b.n	8007158 <_calloc_r+0x12>
 8007164:	462a      	mov	r2, r5
 8007166:	4621      	mov	r1, r4
 8007168:	f7fe fa25 	bl	80055b6 <memset>
 800716c:	e7f4      	b.n	8007158 <_calloc_r+0x12>

0800716e <__ascii_mbtowc>:
 800716e:	b082      	sub	sp, #8
 8007170:	b901      	cbnz	r1, 8007174 <__ascii_mbtowc+0x6>
 8007172:	a901      	add	r1, sp, #4
 8007174:	b142      	cbz	r2, 8007188 <__ascii_mbtowc+0x1a>
 8007176:	b14b      	cbz	r3, 800718c <__ascii_mbtowc+0x1e>
 8007178:	7813      	ldrb	r3, [r2, #0]
 800717a:	600b      	str	r3, [r1, #0]
 800717c:	7812      	ldrb	r2, [r2, #0]
 800717e:	1e10      	subs	r0, r2, #0
 8007180:	bf18      	it	ne
 8007182:	2001      	movne	r0, #1
 8007184:	b002      	add	sp, #8
 8007186:	4770      	bx	lr
 8007188:	4610      	mov	r0, r2
 800718a:	e7fb      	b.n	8007184 <__ascii_mbtowc+0x16>
 800718c:	f06f 0001 	mvn.w	r0, #1
 8007190:	e7f8      	b.n	8007184 <__ascii_mbtowc+0x16>

08007192 <_realloc_r>:
 8007192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007196:	4607      	mov	r7, r0
 8007198:	4614      	mov	r4, r2
 800719a:	460d      	mov	r5, r1
 800719c:	b921      	cbnz	r1, 80071a8 <_realloc_r+0x16>
 800719e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a2:	4611      	mov	r1, r2
 80071a4:	f7ff b974 	b.w	8006490 <_malloc_r>
 80071a8:	b92a      	cbnz	r2, 80071b6 <_realloc_r+0x24>
 80071aa:	f7ff f8fd 	bl	80063a8 <_free_r>
 80071ae:	4625      	mov	r5, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b6:	f000 fa41 	bl	800763c <_malloc_usable_size_r>
 80071ba:	4284      	cmp	r4, r0
 80071bc:	4606      	mov	r6, r0
 80071be:	d802      	bhi.n	80071c6 <_realloc_r+0x34>
 80071c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071c4:	d8f4      	bhi.n	80071b0 <_realloc_r+0x1e>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff f961 	bl	8006490 <_malloc_r>
 80071ce:	4680      	mov	r8, r0
 80071d0:	b908      	cbnz	r0, 80071d6 <_realloc_r+0x44>
 80071d2:	4645      	mov	r5, r8
 80071d4:	e7ec      	b.n	80071b0 <_realloc_r+0x1e>
 80071d6:	42b4      	cmp	r4, r6
 80071d8:	4622      	mov	r2, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	bf28      	it	cs
 80071de:	4632      	movcs	r2, r6
 80071e0:	f7ff ff9c 	bl	800711c <memcpy>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4638      	mov	r0, r7
 80071e8:	f7ff f8de 	bl	80063a8 <_free_r>
 80071ec:	e7f1      	b.n	80071d2 <_realloc_r+0x40>

080071ee <__ascii_wctomb>:
 80071ee:	4603      	mov	r3, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	b141      	cbz	r1, 8007206 <__ascii_wctomb+0x18>
 80071f4:	2aff      	cmp	r2, #255	@ 0xff
 80071f6:	d904      	bls.n	8007202 <__ascii_wctomb+0x14>
 80071f8:	228a      	movs	r2, #138	@ 0x8a
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	4770      	bx	lr
 8007202:	700a      	strb	r2, [r1, #0]
 8007204:	2001      	movs	r0, #1
 8007206:	4770      	bx	lr

08007208 <__sfputc_r>:
 8007208:	6893      	ldr	r3, [r2, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	b410      	push	{r4}
 8007210:	6093      	str	r3, [r2, #8]
 8007212:	da08      	bge.n	8007226 <__sfputc_r+0x1e>
 8007214:	6994      	ldr	r4, [r2, #24]
 8007216:	42a3      	cmp	r3, r4
 8007218:	db01      	blt.n	800721e <__sfputc_r+0x16>
 800721a:	290a      	cmp	r1, #10
 800721c:	d103      	bne.n	8007226 <__sfputc_r+0x1e>
 800721e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007222:	f000 b933 	b.w	800748c <__swbuf_r>
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	1c58      	adds	r0, r3, #1
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	7019      	strb	r1, [r3, #0]
 800722e:	4608      	mov	r0, r1
 8007230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007234:	4770      	bx	lr

08007236 <__sfputs_r>:
 8007236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007238:	4606      	mov	r6, r0
 800723a:	460f      	mov	r7, r1
 800723c:	4614      	mov	r4, r2
 800723e:	18d5      	adds	r5, r2, r3
 8007240:	42ac      	cmp	r4, r5
 8007242:	d101      	bne.n	8007248 <__sfputs_r+0x12>
 8007244:	2000      	movs	r0, #0
 8007246:	e007      	b.n	8007258 <__sfputs_r+0x22>
 8007248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724c:	463a      	mov	r2, r7
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffda 	bl	8007208 <__sfputc_r>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d1f3      	bne.n	8007240 <__sfputs_r+0xa>
 8007258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800725c <_vfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	460d      	mov	r5, r1
 8007262:	b09d      	sub	sp, #116	@ 0x74
 8007264:	4614      	mov	r4, r2
 8007266:	4698      	mov	r8, r3
 8007268:	4606      	mov	r6, r0
 800726a:	b118      	cbz	r0, 8007274 <_vfiprintf_r+0x18>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <_vfiprintf_r+0x18>
 8007270:	f7fe f906 	bl	8005480 <__sinit>
 8007274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	d405      	bmi.n	8007286 <_vfiprintf_r+0x2a>
 800727a:	89ab      	ldrh	r3, [r5, #12]
 800727c:	059a      	lsls	r2, r3, #22
 800727e:	d402      	bmi.n	8007286 <_vfiprintf_r+0x2a>
 8007280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007282:	f7fe fa16 	bl	80056b2 <__retarget_lock_acquire_recursive>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	071b      	lsls	r3, r3, #28
 800728a:	d501      	bpl.n	8007290 <_vfiprintf_r+0x34>
 800728c:	692b      	ldr	r3, [r5, #16]
 800728e:	b99b      	cbnz	r3, 80072b8 <_vfiprintf_r+0x5c>
 8007290:	4629      	mov	r1, r5
 8007292:	4630      	mov	r0, r6
 8007294:	f000 f938 	bl	8007508 <__swsetup_r>
 8007298:	b170      	cbz	r0, 80072b8 <_vfiprintf_r+0x5c>
 800729a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800729c:	07dc      	lsls	r4, r3, #31
 800729e:	d504      	bpl.n	80072aa <_vfiprintf_r+0x4e>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	b01d      	add	sp, #116	@ 0x74
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	89ab      	ldrh	r3, [r5, #12]
 80072ac:	0598      	lsls	r0, r3, #22
 80072ae:	d4f7      	bmi.n	80072a0 <_vfiprintf_r+0x44>
 80072b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072b2:	f7fe f9ff 	bl	80056b4 <__retarget_lock_release_recursive>
 80072b6:	e7f3      	b.n	80072a0 <_vfiprintf_r+0x44>
 80072b8:	2300      	movs	r3, #0
 80072ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80072bc:	2320      	movs	r3, #32
 80072be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c6:	2330      	movs	r3, #48	@ 0x30
 80072c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007478 <_vfiprintf_r+0x21c>
 80072cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072d0:	f04f 0901 	mov.w	r9, #1
 80072d4:	4623      	mov	r3, r4
 80072d6:	469a      	mov	sl, r3
 80072d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072dc:	b10a      	cbz	r2, 80072e2 <_vfiprintf_r+0x86>
 80072de:	2a25      	cmp	r2, #37	@ 0x25
 80072e0:	d1f9      	bne.n	80072d6 <_vfiprintf_r+0x7a>
 80072e2:	ebba 0b04 	subs.w	fp, sl, r4
 80072e6:	d00b      	beq.n	8007300 <_vfiprintf_r+0xa4>
 80072e8:	465b      	mov	r3, fp
 80072ea:	4622      	mov	r2, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ffa1 	bl	8007236 <__sfputs_r>
 80072f4:	3001      	adds	r0, #1
 80072f6:	f000 80a7 	beq.w	8007448 <_vfiprintf_r+0x1ec>
 80072fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fc:	445a      	add	r2, fp
 80072fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007300:	f89a 3000 	ldrb.w	r3, [sl]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 809f 	beq.w	8007448 <_vfiprintf_r+0x1ec>
 800730a:	2300      	movs	r3, #0
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007314:	f10a 0a01 	add.w	sl, sl, #1
 8007318:	9304      	str	r3, [sp, #16]
 800731a:	9307      	str	r3, [sp, #28]
 800731c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007320:	931a      	str	r3, [sp, #104]	@ 0x68
 8007322:	4654      	mov	r4, sl
 8007324:	2205      	movs	r2, #5
 8007326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732a:	4853      	ldr	r0, [pc, #332]	@ (8007478 <_vfiprintf_r+0x21c>)
 800732c:	f7f8 ff58 	bl	80001e0 <memchr>
 8007330:	9a04      	ldr	r2, [sp, #16]
 8007332:	b9d8      	cbnz	r0, 800736c <_vfiprintf_r+0x110>
 8007334:	06d1      	lsls	r1, r2, #27
 8007336:	bf44      	itt	mi
 8007338:	2320      	movmi	r3, #32
 800733a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733e:	0713      	lsls	r3, r2, #28
 8007340:	bf44      	itt	mi
 8007342:	232b      	movmi	r3, #43	@ 0x2b
 8007344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007348:	f89a 3000 	ldrb.w	r3, [sl]
 800734c:	2b2a      	cmp	r3, #42	@ 0x2a
 800734e:	d015      	beq.n	800737c <_vfiprintf_r+0x120>
 8007350:	9a07      	ldr	r2, [sp, #28]
 8007352:	4654      	mov	r4, sl
 8007354:	2000      	movs	r0, #0
 8007356:	f04f 0c0a 	mov.w	ip, #10
 800735a:	4621      	mov	r1, r4
 800735c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007360:	3b30      	subs	r3, #48	@ 0x30
 8007362:	2b09      	cmp	r3, #9
 8007364:	d94b      	bls.n	80073fe <_vfiprintf_r+0x1a2>
 8007366:	b1b0      	cbz	r0, 8007396 <_vfiprintf_r+0x13a>
 8007368:	9207      	str	r2, [sp, #28]
 800736a:	e014      	b.n	8007396 <_vfiprintf_r+0x13a>
 800736c:	eba0 0308 	sub.w	r3, r0, r8
 8007370:	fa09 f303 	lsl.w	r3, r9, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	46a2      	mov	sl, r4
 800737a:	e7d2      	b.n	8007322 <_vfiprintf_r+0xc6>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	1d19      	adds	r1, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	9103      	str	r1, [sp, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfbb      	ittet	lt
 8007388:	425b      	neglt	r3, r3
 800738a:	f042 0202 	orrlt.w	r2, r2, #2
 800738e:	9307      	strge	r3, [sp, #28]
 8007390:	9307      	strlt	r3, [sp, #28]
 8007392:	bfb8      	it	lt
 8007394:	9204      	strlt	r2, [sp, #16]
 8007396:	7823      	ldrb	r3, [r4, #0]
 8007398:	2b2e      	cmp	r3, #46	@ 0x2e
 800739a:	d10a      	bne.n	80073b2 <_vfiprintf_r+0x156>
 800739c:	7863      	ldrb	r3, [r4, #1]
 800739e:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a0:	d132      	bne.n	8007408 <_vfiprintf_r+0x1ac>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	9203      	str	r2, [sp, #12]
 80073aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073ae:	3402      	adds	r4, #2
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007488 <_vfiprintf_r+0x22c>
 80073b6:	7821      	ldrb	r1, [r4, #0]
 80073b8:	2203      	movs	r2, #3
 80073ba:	4650      	mov	r0, sl
 80073bc:	f7f8 ff10 	bl	80001e0 <memchr>
 80073c0:	b138      	cbz	r0, 80073d2 <_vfiprintf_r+0x176>
 80073c2:	9b04      	ldr	r3, [sp, #16]
 80073c4:	eba0 000a 	sub.w	r0, r0, sl
 80073c8:	2240      	movs	r2, #64	@ 0x40
 80073ca:	4082      	lsls	r2, r0
 80073cc:	4313      	orrs	r3, r2
 80073ce:	3401      	adds	r4, #1
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d6:	4829      	ldr	r0, [pc, #164]	@ (800747c <_vfiprintf_r+0x220>)
 80073d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073dc:	2206      	movs	r2, #6
 80073de:	f7f8 feff 	bl	80001e0 <memchr>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d03f      	beq.n	8007466 <_vfiprintf_r+0x20a>
 80073e6:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <_vfiprintf_r+0x224>)
 80073e8:	bb1b      	cbnz	r3, 8007432 <_vfiprintf_r+0x1d6>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	3307      	adds	r3, #7
 80073ee:	f023 0307 	bic.w	r3, r3, #7
 80073f2:	3308      	adds	r3, #8
 80073f4:	9303      	str	r3, [sp, #12]
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	443b      	add	r3, r7
 80073fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fc:	e76a      	b.n	80072d4 <_vfiprintf_r+0x78>
 80073fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007402:	460c      	mov	r4, r1
 8007404:	2001      	movs	r0, #1
 8007406:	e7a8      	b.n	800735a <_vfiprintf_r+0xfe>
 8007408:	2300      	movs	r3, #0
 800740a:	3401      	adds	r4, #1
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	4619      	mov	r1, r3
 8007410:	f04f 0c0a 	mov.w	ip, #10
 8007414:	4620      	mov	r0, r4
 8007416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800741a:	3a30      	subs	r2, #48	@ 0x30
 800741c:	2a09      	cmp	r2, #9
 800741e:	d903      	bls.n	8007428 <_vfiprintf_r+0x1cc>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0c6      	beq.n	80073b2 <_vfiprintf_r+0x156>
 8007424:	9105      	str	r1, [sp, #20]
 8007426:	e7c4      	b.n	80073b2 <_vfiprintf_r+0x156>
 8007428:	fb0c 2101 	mla	r1, ip, r1, r2
 800742c:	4604      	mov	r4, r0
 800742e:	2301      	movs	r3, #1
 8007430:	e7f0      	b.n	8007414 <_vfiprintf_r+0x1b8>
 8007432:	ab03      	add	r3, sp, #12
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	462a      	mov	r2, r5
 8007438:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <_vfiprintf_r+0x228>)
 800743a:	a904      	add	r1, sp, #16
 800743c:	4630      	mov	r0, r6
 800743e:	f7fd fbdd 	bl	8004bfc <_printf_float>
 8007442:	4607      	mov	r7, r0
 8007444:	1c78      	adds	r0, r7, #1
 8007446:	d1d6      	bne.n	80073f6 <_vfiprintf_r+0x19a>
 8007448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d405      	bmi.n	800745a <_vfiprintf_r+0x1fe>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	059a      	lsls	r2, r3, #22
 8007452:	d402      	bmi.n	800745a <_vfiprintf_r+0x1fe>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7fe f92d 	bl	80056b4 <__retarget_lock_release_recursive>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	065b      	lsls	r3, r3, #25
 800745e:	f53f af1f 	bmi.w	80072a0 <_vfiprintf_r+0x44>
 8007462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007464:	e71e      	b.n	80072a4 <_vfiprintf_r+0x48>
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	462a      	mov	r2, r5
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <_vfiprintf_r+0x228>)
 800746e:	a904      	add	r1, sp, #16
 8007470:	4630      	mov	r0, r6
 8007472:	f7fd fe5b 	bl	800512c <_printf_i>
 8007476:	e7e4      	b.n	8007442 <_vfiprintf_r+0x1e6>
 8007478:	08008e56 	.word	0x08008e56
 800747c:	08008e60 	.word	0x08008e60
 8007480:	08004bfd 	.word	0x08004bfd
 8007484:	08007237 	.word	0x08007237
 8007488:	08008e5c 	.word	0x08008e5c

0800748c <__swbuf_r>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	460e      	mov	r6, r1
 8007490:	4614      	mov	r4, r2
 8007492:	4605      	mov	r5, r0
 8007494:	b118      	cbz	r0, 800749e <__swbuf_r+0x12>
 8007496:	6a03      	ldr	r3, [r0, #32]
 8007498:	b90b      	cbnz	r3, 800749e <__swbuf_r+0x12>
 800749a:	f7fd fff1 	bl	8005480 <__sinit>
 800749e:	69a3      	ldr	r3, [r4, #24]
 80074a0:	60a3      	str	r3, [r4, #8]
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	071a      	lsls	r2, r3, #28
 80074a6:	d501      	bpl.n	80074ac <__swbuf_r+0x20>
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	b943      	cbnz	r3, 80074be <__swbuf_r+0x32>
 80074ac:	4621      	mov	r1, r4
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 f82a 	bl	8007508 <__swsetup_r>
 80074b4:	b118      	cbz	r0, 80074be <__swbuf_r+0x32>
 80074b6:	f04f 37ff 	mov.w	r7, #4294967295
 80074ba:	4638      	mov	r0, r7
 80074bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	1a98      	subs	r0, r3, r2
 80074c4:	6963      	ldr	r3, [r4, #20]
 80074c6:	b2f6      	uxtb	r6, r6
 80074c8:	4283      	cmp	r3, r0
 80074ca:	4637      	mov	r7, r6
 80074cc:	dc05      	bgt.n	80074da <__swbuf_r+0x4e>
 80074ce:	4621      	mov	r1, r4
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff fdbf 	bl	8007054 <_fflush_r>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d1ed      	bne.n	80074b6 <__swbuf_r+0x2a>
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	701e      	strb	r6, [r3, #0]
 80074e8:	6962      	ldr	r2, [r4, #20]
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d004      	beq.n	80074fa <__swbuf_r+0x6e>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	07db      	lsls	r3, r3, #31
 80074f4:	d5e1      	bpl.n	80074ba <__swbuf_r+0x2e>
 80074f6:	2e0a      	cmp	r6, #10
 80074f8:	d1df      	bne.n	80074ba <__swbuf_r+0x2e>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7ff fda9 	bl	8007054 <_fflush_r>
 8007502:	2800      	cmp	r0, #0
 8007504:	d0d9      	beq.n	80074ba <__swbuf_r+0x2e>
 8007506:	e7d6      	b.n	80074b6 <__swbuf_r+0x2a>

08007508 <__swsetup_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4b29      	ldr	r3, [pc, #164]	@ (80075b0 <__swsetup_r+0xa8>)
 800750c:	4605      	mov	r5, r0
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	460c      	mov	r4, r1
 8007512:	b118      	cbz	r0, 800751c <__swsetup_r+0x14>
 8007514:	6a03      	ldr	r3, [r0, #32]
 8007516:	b90b      	cbnz	r3, 800751c <__swsetup_r+0x14>
 8007518:	f7fd ffb2 	bl	8005480 <__sinit>
 800751c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007520:	0719      	lsls	r1, r3, #28
 8007522:	d422      	bmi.n	800756a <__swsetup_r+0x62>
 8007524:	06da      	lsls	r2, r3, #27
 8007526:	d407      	bmi.n	8007538 <__swsetup_r+0x30>
 8007528:	2209      	movs	r2, #9
 800752a:	602a      	str	r2, [r5, #0]
 800752c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	f04f 30ff 	mov.w	r0, #4294967295
 8007536:	e033      	b.n	80075a0 <__swsetup_r+0x98>
 8007538:	0758      	lsls	r0, r3, #29
 800753a:	d512      	bpl.n	8007562 <__swsetup_r+0x5a>
 800753c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800753e:	b141      	cbz	r1, 8007552 <__swsetup_r+0x4a>
 8007540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007544:	4299      	cmp	r1, r3
 8007546:	d002      	beq.n	800754e <__swsetup_r+0x46>
 8007548:	4628      	mov	r0, r5
 800754a:	f7fe ff2d 	bl	80063a8 <_free_r>
 800754e:	2300      	movs	r3, #0
 8007550:	6363      	str	r3, [r4, #52]	@ 0x34
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	2300      	movs	r3, #0
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f043 0308 	orr.w	r3, r3, #8
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	b94b      	cbnz	r3, 8007582 <__swsetup_r+0x7a>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007578:	d003      	beq.n	8007582 <__swsetup_r+0x7a>
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 f88b 	bl	8007698 <__smakebuf_r>
 8007582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007586:	f013 0201 	ands.w	r2, r3, #1
 800758a:	d00a      	beq.n	80075a2 <__swsetup_r+0x9a>
 800758c:	2200      	movs	r2, #0
 800758e:	60a2      	str	r2, [r4, #8]
 8007590:	6962      	ldr	r2, [r4, #20]
 8007592:	4252      	negs	r2, r2
 8007594:	61a2      	str	r2, [r4, #24]
 8007596:	6922      	ldr	r2, [r4, #16]
 8007598:	b942      	cbnz	r2, 80075ac <__swsetup_r+0xa4>
 800759a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800759e:	d1c5      	bne.n	800752c <__swsetup_r+0x24>
 80075a0:	bd38      	pop	{r3, r4, r5, pc}
 80075a2:	0799      	lsls	r1, r3, #30
 80075a4:	bf58      	it	pl
 80075a6:	6962      	ldrpl	r2, [r4, #20]
 80075a8:	60a2      	str	r2, [r4, #8]
 80075aa:	e7f4      	b.n	8007596 <__swsetup_r+0x8e>
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7f7      	b.n	80075a0 <__swsetup_r+0x98>
 80075b0:	20000020 	.word	0x20000020

080075b4 <_raise_r>:
 80075b4:	291f      	cmp	r1, #31
 80075b6:	b538      	push	{r3, r4, r5, lr}
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	d904      	bls.n	80075c8 <_raise_r+0x14>
 80075be:	2316      	movs	r3, #22
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075ca:	b112      	cbz	r2, 80075d2 <_raise_r+0x1e>
 80075cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075d0:	b94b      	cbnz	r3, 80075e6 <_raise_r+0x32>
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 f830 	bl	8007638 <_getpid_r>
 80075d8:	4622      	mov	r2, r4
 80075da:	4601      	mov	r1, r0
 80075dc:	4628      	mov	r0, r5
 80075de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e2:	f000 b817 	b.w	8007614 <_kill_r>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00a      	beq.n	8007600 <_raise_r+0x4c>
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	d103      	bne.n	80075f6 <_raise_r+0x42>
 80075ee:	2316      	movs	r3, #22
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	2001      	movs	r0, #1
 80075f4:	e7e7      	b.n	80075c6 <_raise_r+0x12>
 80075f6:	2100      	movs	r1, #0
 80075f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075fc:	4620      	mov	r0, r4
 80075fe:	4798      	blx	r3
 8007600:	2000      	movs	r0, #0
 8007602:	e7e0      	b.n	80075c6 <_raise_r+0x12>

08007604 <raise>:
 8007604:	4b02      	ldr	r3, [pc, #8]	@ (8007610 <raise+0xc>)
 8007606:	4601      	mov	r1, r0
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f7ff bfd3 	b.w	80075b4 <_raise_r>
 800760e:	bf00      	nop
 8007610:	20000020 	.word	0x20000020

08007614 <_kill_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	@ (8007634 <_kill_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f7fa fbff 	bl	8001e24 <_kill>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_kill_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_kill_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	20000688 	.word	0x20000688

08007638 <_getpid_r>:
 8007638:	f7fa bbec 	b.w	8001e14 <_getpid>

0800763c <_malloc_usable_size_r>:
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f18      	subs	r0, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfbc      	itt	lt
 8007646:	580b      	ldrlt	r3, [r1, r0]
 8007648:	18c0      	addlt	r0, r0, r3
 800764a:	4770      	bx	lr

0800764c <__swhatbuf_r>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	460c      	mov	r4, r1
 8007650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007654:	2900      	cmp	r1, #0
 8007656:	b096      	sub	sp, #88	@ 0x58
 8007658:	4615      	mov	r5, r2
 800765a:	461e      	mov	r6, r3
 800765c:	da0d      	bge.n	800767a <__swhatbuf_r+0x2e>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007664:	f04f 0100 	mov.w	r1, #0
 8007668:	bf14      	ite	ne
 800766a:	2340      	movne	r3, #64	@ 0x40
 800766c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007670:	2000      	movs	r0, #0
 8007672:	6031      	str	r1, [r6, #0]
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	b016      	add	sp, #88	@ 0x58
 8007678:	bd70      	pop	{r4, r5, r6, pc}
 800767a:	466a      	mov	r2, sp
 800767c:	f000 f848 	bl	8007710 <_fstat_r>
 8007680:	2800      	cmp	r0, #0
 8007682:	dbec      	blt.n	800765e <__swhatbuf_r+0x12>
 8007684:	9901      	ldr	r1, [sp, #4]
 8007686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800768a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800768e:	4259      	negs	r1, r3
 8007690:	4159      	adcs	r1, r3
 8007692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007696:	e7eb      	b.n	8007670 <__swhatbuf_r+0x24>

08007698 <__smakebuf_r>:
 8007698:	898b      	ldrh	r3, [r1, #12]
 800769a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800769c:	079d      	lsls	r5, r3, #30
 800769e:	4606      	mov	r6, r0
 80076a0:	460c      	mov	r4, r1
 80076a2:	d507      	bpl.n	80076b4 <__smakebuf_r+0x1c>
 80076a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	2301      	movs	r3, #1
 80076ae:	6163      	str	r3, [r4, #20]
 80076b0:	b003      	add	sp, #12
 80076b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b4:	ab01      	add	r3, sp, #4
 80076b6:	466a      	mov	r2, sp
 80076b8:	f7ff ffc8 	bl	800764c <__swhatbuf_r>
 80076bc:	9f00      	ldr	r7, [sp, #0]
 80076be:	4605      	mov	r5, r0
 80076c0:	4639      	mov	r1, r7
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7fe fee4 	bl	8006490 <_malloc_r>
 80076c8:	b948      	cbnz	r0, 80076de <__smakebuf_r+0x46>
 80076ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ce:	059a      	lsls	r2, r3, #22
 80076d0:	d4ee      	bmi.n	80076b0 <__smakebuf_r+0x18>
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	e7e2      	b.n	80076a4 <__smakebuf_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	6020      	str	r0, [r4, #0]
 80076e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ee:	b15b      	cbz	r3, 8007708 <__smakebuf_r+0x70>
 80076f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 f81d 	bl	8007734 <_isatty_r>
 80076fa:	b128      	cbz	r0, 8007708 <__smakebuf_r+0x70>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	431d      	orrs	r5, r3
 800770c:	81a5      	strh	r5, [r4, #12]
 800770e:	e7cf      	b.n	80076b0 <__smakebuf_r+0x18>

08007710 <_fstat_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	@ (8007730 <_fstat_r+0x20>)
 8007714:	2300      	movs	r3, #0
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	4611      	mov	r1, r2
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	f7fa fbe1 	bl	8001ee4 <_fstat>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	d102      	bne.n	800772c <_fstat_r+0x1c>
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	b103      	cbz	r3, 800772c <_fstat_r+0x1c>
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	bd38      	pop	{r3, r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	20000688 	.word	0x20000688

08007734 <_isatty_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d06      	ldr	r5, [pc, #24]	@ (8007750 <_isatty_r+0x1c>)
 8007738:	2300      	movs	r3, #0
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	602b      	str	r3, [r5, #0]
 8007740:	f7fa fbe0 	bl	8001f04 <_isatty>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d102      	bne.n	800774e <_isatty_r+0x1a>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	b103      	cbz	r3, 800774e <_isatty_r+0x1a>
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	20000688 	.word	0x20000688
 8007754:	00000000 	.word	0x00000000

08007758 <exp>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	ed2d 8b02 	vpush	{d8}
 800775e:	ec55 4b10 	vmov	r4, r5, d0
 8007762:	f000 f905 	bl	8007970 <__ieee754_exp>
 8007766:	eeb0 8a40 	vmov.f32	s16, s0
 800776a:	eef0 8a60 	vmov.f32	s17, s1
 800776e:	ec45 4b10 	vmov	d0, r4, r5
 8007772:	f000 f8a9 	bl	80078c8 <finite>
 8007776:	b168      	cbz	r0, 8007794 <exp+0x3c>
 8007778:	a317      	add	r3, pc, #92	@ (adr r3, 80077d8 <exp+0x80>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f9 f9d1 	bl	8000b28 <__aeabi_dcmpgt>
 8007786:	b160      	cbz	r0, 80077a2 <exp+0x4a>
 8007788:	f7fd ff68 	bl	800565c <__errno>
 800778c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80077c8 <exp+0x70>
 8007790:	2322      	movs	r3, #34	@ 0x22
 8007792:	6003      	str	r3, [r0, #0]
 8007794:	eeb0 0a48 	vmov.f32	s0, s16
 8007798:	eef0 0a68 	vmov.f32	s1, s17
 800779c:	ecbd 8b02 	vpop	{d8}
 80077a0:	bd38      	pop	{r3, r4, r5, pc}
 80077a2:	a30f      	add	r3, pc, #60	@ (adr r3, 80077e0 <exp+0x88>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f9 f99e 	bl	8000aec <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0ef      	beq.n	8007794 <exp+0x3c>
 80077b4:	f7fd ff52 	bl	800565c <__errno>
 80077b8:	2322      	movs	r3, #34	@ 0x22
 80077ba:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80077d0 <exp+0x78>
 80077be:	6003      	str	r3, [r0, #0]
 80077c0:	e7e8      	b.n	8007794 <exp+0x3c>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	00000000 	.word	0x00000000
 80077cc:	7ff00000 	.word	0x7ff00000
	...
 80077d8:	fefa39ef 	.word	0xfefa39ef
 80077dc:	40862e42 	.word	0x40862e42
 80077e0:	d52d3051 	.word	0xd52d3051
 80077e4:	c0874910 	.word	0xc0874910

080077e8 <pow>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	ed2d 8b02 	vpush	{d8}
 80077ee:	eeb0 8a40 	vmov.f32	s16, s0
 80077f2:	eef0 8a60 	vmov.f32	s17, s1
 80077f6:	ec55 4b11 	vmov	r4, r5, d1
 80077fa:	f000 fa35 	bl	8007c68 <__ieee754_pow>
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	4620      	mov	r0, r4
 8007804:	4629      	mov	r1, r5
 8007806:	ec57 6b10 	vmov	r6, r7, d0
 800780a:	f7f9 f997 	bl	8000b3c <__aeabi_dcmpun>
 800780e:	2800      	cmp	r0, #0
 8007810:	d13b      	bne.n	800788a <pow+0xa2>
 8007812:	ec51 0b18 	vmov	r0, r1, d8
 8007816:	2200      	movs	r2, #0
 8007818:	2300      	movs	r3, #0
 800781a:	f7f9 f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 800781e:	b1b8      	cbz	r0, 8007850 <pow+0x68>
 8007820:	2200      	movs	r2, #0
 8007822:	2300      	movs	r3, #0
 8007824:	4620      	mov	r0, r4
 8007826:	4629      	mov	r1, r5
 8007828:	f7f9 f956 	bl	8000ad8 <__aeabi_dcmpeq>
 800782c:	2800      	cmp	r0, #0
 800782e:	d146      	bne.n	80078be <pow+0xd6>
 8007830:	ec45 4b10 	vmov	d0, r4, r5
 8007834:	f000 f848 	bl	80078c8 <finite>
 8007838:	b338      	cbz	r0, 800788a <pow+0xa2>
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 f953 	bl	8000aec <__aeabi_dcmplt>
 8007846:	b300      	cbz	r0, 800788a <pow+0xa2>
 8007848:	f7fd ff08 	bl	800565c <__errno>
 800784c:	2322      	movs	r3, #34	@ 0x22
 800784e:	e01b      	b.n	8007888 <pow+0xa0>
 8007850:	ec47 6b10 	vmov	d0, r6, r7
 8007854:	f000 f838 	bl	80078c8 <finite>
 8007858:	b9e0      	cbnz	r0, 8007894 <pow+0xac>
 800785a:	eeb0 0a48 	vmov.f32	s0, s16
 800785e:	eef0 0a68 	vmov.f32	s1, s17
 8007862:	f000 f831 	bl	80078c8 <finite>
 8007866:	b1a8      	cbz	r0, 8007894 <pow+0xac>
 8007868:	ec45 4b10 	vmov	d0, r4, r5
 800786c:	f000 f82c 	bl	80078c8 <finite>
 8007870:	b180      	cbz	r0, 8007894 <pow+0xac>
 8007872:	4632      	mov	r2, r6
 8007874:	463b      	mov	r3, r7
 8007876:	4630      	mov	r0, r6
 8007878:	4639      	mov	r1, r7
 800787a:	f7f9 f95f 	bl	8000b3c <__aeabi_dcmpun>
 800787e:	2800      	cmp	r0, #0
 8007880:	d0e2      	beq.n	8007848 <pow+0x60>
 8007882:	f7fd feeb 	bl	800565c <__errno>
 8007886:	2321      	movs	r3, #33	@ 0x21
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	ecbd 8b02 	vpop	{d8}
 800788e:	ec47 6b10 	vmov	d0, r6, r7
 8007892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007894:	2200      	movs	r2, #0
 8007896:	2300      	movs	r3, #0
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0f2      	beq.n	800788a <pow+0xa2>
 80078a4:	eeb0 0a48 	vmov.f32	s0, s16
 80078a8:	eef0 0a68 	vmov.f32	s1, s17
 80078ac:	f000 f80c 	bl	80078c8 <finite>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0ea      	beq.n	800788a <pow+0xa2>
 80078b4:	ec45 4b10 	vmov	d0, r4, r5
 80078b8:	f000 f806 	bl	80078c8 <finite>
 80078bc:	e7c3      	b.n	8007846 <pow+0x5e>
 80078be:	4f01      	ldr	r7, [pc, #4]	@ (80078c4 <pow+0xdc>)
 80078c0:	2600      	movs	r6, #0
 80078c2:	e7e2      	b.n	800788a <pow+0xa2>
 80078c4:	3ff00000 	.word	0x3ff00000

080078c8 <finite>:
 80078c8:	b082      	sub	sp, #8
 80078ca:	ed8d 0b00 	vstr	d0, [sp]
 80078ce:	9801      	ldr	r0, [sp, #4]
 80078d0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80078d4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80078d8:	0fc0      	lsrs	r0, r0, #31
 80078da:	b002      	add	sp, #8
 80078dc:	4770      	bx	lr
	...

080078e0 <round>:
 80078e0:	ec51 0b10 	vmov	r0, r1, d0
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80078ea:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80078ee:	2a13      	cmp	r2, #19
 80078f0:	460b      	mov	r3, r1
 80078f2:	4605      	mov	r5, r0
 80078f4:	dc1b      	bgt.n	800792e <round+0x4e>
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	da0b      	bge.n	8007912 <round+0x32>
 80078fa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80078fe:	3201      	adds	r2, #1
 8007900:	bf04      	itt	eq
 8007902:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007906:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800790a:	2200      	movs	r2, #0
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	e015      	b.n	800793e <round+0x5e>
 8007912:	4c15      	ldr	r4, [pc, #84]	@ (8007968 <round+0x88>)
 8007914:	4114      	asrs	r4, r2
 8007916:	ea04 0601 	and.w	r6, r4, r1
 800791a:	4306      	orrs	r6, r0
 800791c:	d00f      	beq.n	800793e <round+0x5e>
 800791e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007922:	fa41 f202 	asr.w	r2, r1, r2
 8007926:	4413      	add	r3, r2
 8007928:	ea23 0304 	bic.w	r3, r3, r4
 800792c:	e7ed      	b.n	800790a <round+0x2a>
 800792e:	2a33      	cmp	r2, #51	@ 0x33
 8007930:	dd08      	ble.n	8007944 <round+0x64>
 8007932:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007936:	d102      	bne.n	800793e <round+0x5e>
 8007938:	4602      	mov	r2, r0
 800793a:	f7f8 fcaf 	bl	800029c <__adddf3>
 800793e:	ec41 0b10 	vmov	d0, r0, r1
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8007948:	f04f 34ff 	mov.w	r4, #4294967295
 800794c:	40f4      	lsrs	r4, r6
 800794e:	4204      	tst	r4, r0
 8007950:	d0f5      	beq.n	800793e <round+0x5e>
 8007952:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8007956:	2201      	movs	r2, #1
 8007958:	408a      	lsls	r2, r1
 800795a:	1952      	adds	r2, r2, r5
 800795c:	bf28      	it	cs
 800795e:	3301      	addcs	r3, #1
 8007960:	ea22 0204 	bic.w	r2, r2, r4
 8007964:	e7d2      	b.n	800790c <round+0x2c>
 8007966:	bf00      	nop
 8007968:	000fffff 	.word	0x000fffff
 800796c:	00000000 	.word	0x00000000

08007970 <__ieee754_exp>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	ec55 4b10 	vmov	r4, r5, d0
 8007978:	49b1      	ldr	r1, [pc, #708]	@ (8007c40 <__ieee754_exp+0x2d0>)
 800797a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800797e:	428a      	cmp	r2, r1
 8007980:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007984:	d936      	bls.n	80079f4 <__ieee754_exp+0x84>
 8007986:	49af      	ldr	r1, [pc, #700]	@ (8007c44 <__ieee754_exp+0x2d4>)
 8007988:	428a      	cmp	r2, r1
 800798a:	d914      	bls.n	80079b6 <__ieee754_exp+0x46>
 800798c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007990:	4323      	orrs	r3, r4
 8007992:	4622      	mov	r2, r4
 8007994:	d007      	beq.n	80079a6 <__ieee754_exp+0x36>
 8007996:	462b      	mov	r3, r5
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 fc7e 	bl	800029c <__adddf3>
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	e002      	b.n	80079ac <__ieee754_exp+0x3c>
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	f040 8118 	bne.w	8007bdc <__ieee754_exp+0x26c>
 80079ac:	ec45 4b10 	vmov	d0, r4, r5
 80079b0:	b004      	add	sp, #16
 80079b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b6:	a38c      	add	r3, pc, #560	@ (adr r3, 8007be8 <__ieee754_exp+0x278>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f9 f8b2 	bl	8000b28 <__aeabi_dcmpgt>
 80079c4:	4607      	mov	r7, r0
 80079c6:	b128      	cbz	r0, 80079d4 <__ieee754_exp+0x64>
 80079c8:	2000      	movs	r0, #0
 80079ca:	b004      	add	sp, #16
 80079cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	f000 bf4e 	b.w	8008870 <__math_oflow>
 80079d4:	a386      	add	r3, pc, #536	@ (adr r3, 8007bf0 <__ieee754_exp+0x280>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f9 f885 	bl	8000aec <__aeabi_dcmplt>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f000 8087 	beq.w	8007af6 <__ieee754_exp+0x186>
 80079e8:	4638      	mov	r0, r7
 80079ea:	b004      	add	sp, #16
 80079ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	f000 bf36 	b.w	8008860 <__math_uflow>
 80079f4:	4b94      	ldr	r3, [pc, #592]	@ (8007c48 <__ieee754_exp+0x2d8>)
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f240 80a9 	bls.w	8007b4e <__ieee754_exp+0x1de>
 80079fc:	4b93      	ldr	r3, [pc, #588]	@ (8007c4c <__ieee754_exp+0x2dc>)
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d879      	bhi.n	8007af6 <__ieee754_exp+0x186>
 8007a02:	4b93      	ldr	r3, [pc, #588]	@ (8007c50 <__ieee754_exp+0x2e0>)
 8007a04:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fc42 	bl	8000298 <__aeabi_dsub>
 8007a14:	4b8f      	ldr	r3, [pc, #572]	@ (8007c54 <__ieee754_exp+0x2e4>)
 8007a16:	00f7      	lsls	r7, r6, #3
 8007a18:	443b      	add	r3, r7
 8007a1a:	ed93 7b00 	vldr	d7, [r3]
 8007a1e:	ed8d 7b00 	vstr	d7, [sp]
 8007a22:	f086 0a01 	eor.w	sl, r6, #1
 8007a26:	4680      	mov	r8, r0
 8007a28:	4689      	mov	r9, r1
 8007a2a:	ebaa 0a06 	sub.w	sl, sl, r6
 8007a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a32:	4640      	mov	r0, r8
 8007a34:	4649      	mov	r1, r9
 8007a36:	f7f8 fc2f 	bl	8000298 <__aeabi_dsub>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	460d      	mov	r5, r1
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7f8 fddf 	bl	8000608 <__aeabi_dmul>
 8007a4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007bf8 <__ieee754_exp+0x288>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	a369      	add	r3, pc, #420	@ (adr r3, 8007c00 <__ieee754_exp+0x290>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fc1b 	bl	8000298 <__aeabi_dsub>
 8007a62:	4632      	mov	r2, r6
 8007a64:	463b      	mov	r3, r7
 8007a66:	f7f8 fdcf 	bl	8000608 <__aeabi_dmul>
 8007a6a:	a367      	add	r3, pc, #412	@ (adr r3, 8007c08 <__ieee754_exp+0x298>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 fc14 	bl	800029c <__adddf3>
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	f7f8 fdc6 	bl	8000608 <__aeabi_dmul>
 8007a7c:	a364      	add	r3, pc, #400	@ (adr r3, 8007c10 <__ieee754_exp+0x2a0>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fc09 	bl	8000298 <__aeabi_dsub>
 8007a86:	4632      	mov	r2, r6
 8007a88:	463b      	mov	r3, r7
 8007a8a:	f7f8 fdbd 	bl	8000608 <__aeabi_dmul>
 8007a8e:	a362      	add	r3, pc, #392	@ (adr r3, 8007c18 <__ieee754_exp+0x2a8>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fc02 	bl	800029c <__adddf3>
 8007a98:	4632      	mov	r2, r6
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	f7f8 fdb4 	bl	8000608 <__aeabi_dmul>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fbf6 	bl	8000298 <__aeabi_dsub>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	460f      	mov	r7, r1
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f7f8 fda6 	bl	8000608 <__aeabi_dmul>
 8007abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac0:	f1ba 0f00 	cmp.w	sl, #0
 8007ac4:	d15c      	bne.n	8007b80 <__ieee754_exp+0x210>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f8 fbe2 	bl	8000298 <__aeabi_dsub>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007adc:	f7f8 febe 	bl	800085c <__aeabi_ddiv>
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	f7f8 fbd8 	bl	8000298 <__aeabi_dsub>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	2000      	movs	r0, #0
 8007aee:	495a      	ldr	r1, [pc, #360]	@ (8007c58 <__ieee754_exp+0x2e8>)
 8007af0:	f7f8 fbd2 	bl	8000298 <__aeabi_dsub>
 8007af4:	e754      	b.n	80079a0 <__ieee754_exp+0x30>
 8007af6:	4b59      	ldr	r3, [pc, #356]	@ (8007c5c <__ieee754_exp+0x2ec>)
 8007af8:	4620      	mov	r0, r4
 8007afa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007afe:	4629      	mov	r1, r5
 8007b00:	a347      	add	r3, pc, #284	@ (adr r3, 8007c20 <__ieee754_exp+0x2b0>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd7f 	bl	8000608 <__aeabi_dmul>
 8007b0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b0e:	f7f8 fbc5 	bl	800029c <__adddf3>
 8007b12:	f7f9 f829 	bl	8000b68 <__aeabi_d2iz>
 8007b16:	4682      	mov	sl, r0
 8007b18:	f7f8 fd0c 	bl	8000534 <__aeabi_i2d>
 8007b1c:	a342      	add	r3, pc, #264	@ (adr r3, 8007c28 <__ieee754_exp+0x2b8>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	4606      	mov	r6, r0
 8007b24:	460f      	mov	r7, r1
 8007b26:	f7f8 fd6f 	bl	8000608 <__aeabi_dmul>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fbb1 	bl	8000298 <__aeabi_dsub>
 8007b36:	a33e      	add	r3, pc, #248	@ (adr r3, 8007c30 <__ieee754_exp+0x2c0>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	4689      	mov	r9, r1
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 fd60 	bl	8000608 <__aeabi_dmul>
 8007b48:	e9cd 0100 	strd	r0, r1, [sp]
 8007b4c:	e76f      	b.n	8007a2e <__ieee754_exp+0xbe>
 8007b4e:	4b44      	ldr	r3, [pc, #272]	@ (8007c60 <__ieee754_exp+0x2f0>)
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d810      	bhi.n	8007b76 <__ieee754_exp+0x206>
 8007b54:	a338      	add	r3, pc, #224	@ (adr r3, 8007c38 <__ieee754_exp+0x2c8>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	f7f8 fb9d 	bl	800029c <__adddf3>
 8007b62:	4b3d      	ldr	r3, [pc, #244]	@ (8007c58 <__ieee754_exp+0x2e8>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	f7f8 ffdf 	bl	8000b28 <__aeabi_dcmpgt>
 8007b6a:	b138      	cbz	r0, 8007b7c <__ieee754_exp+0x20c>
 8007b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c58 <__ieee754_exp+0x2e8>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	e712      	b.n	800799c <__ieee754_exp+0x2c>
 8007b76:	f04f 0a00 	mov.w	sl, #0
 8007b7a:	e760      	b.n	8007a3e <__ieee754_exp+0xce>
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	e75e      	b.n	8007a3e <__ieee754_exp+0xce>
 8007b80:	4632      	mov	r2, r6
 8007b82:	463b      	mov	r3, r7
 8007b84:	2000      	movs	r0, #0
 8007b86:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007b8a:	f7f8 fb85 	bl	8000298 <__aeabi_dsub>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b96:	f7f8 fe61 	bl	800085c <__aeabi_ddiv>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba2:	f7f8 fb79 	bl	8000298 <__aeabi_dsub>
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	f7f8 fb75 	bl	8000298 <__aeabi_dsub>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	4928      	ldr	r1, [pc, #160]	@ (8007c58 <__ieee754_exp+0x2e8>)
 8007bb6:	f7f8 fb6f 	bl	8000298 <__aeabi_dsub>
 8007bba:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8007bbe:	4592      	cmp	sl, r2
 8007bc0:	db02      	blt.n	8007bc8 <__ieee754_exp+0x258>
 8007bc2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007bc6:	e6eb      	b.n	80079a0 <__ieee754_exp+0x30>
 8007bc8:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8007bcc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8007bd6:	f7f8 fd17 	bl	8000608 <__aeabi_dmul>
 8007bda:	e6e1      	b.n	80079a0 <__ieee754_exp+0x30>
 8007bdc:	2400      	movs	r4, #0
 8007bde:	2500      	movs	r5, #0
 8007be0:	e6e4      	b.n	80079ac <__ieee754_exp+0x3c>
 8007be2:	bf00      	nop
 8007be4:	f3af 8000 	nop.w
 8007be8:	fefa39ef 	.word	0xfefa39ef
 8007bec:	40862e42 	.word	0x40862e42
 8007bf0:	d52d3051 	.word	0xd52d3051
 8007bf4:	c0874910 	.word	0xc0874910
 8007bf8:	72bea4d0 	.word	0x72bea4d0
 8007bfc:	3e663769 	.word	0x3e663769
 8007c00:	c5d26bf1 	.word	0xc5d26bf1
 8007c04:	3ebbbd41 	.word	0x3ebbbd41
 8007c08:	af25de2c 	.word	0xaf25de2c
 8007c0c:	3f11566a 	.word	0x3f11566a
 8007c10:	16bebd93 	.word	0x16bebd93
 8007c14:	3f66c16c 	.word	0x3f66c16c
 8007c18:	5555553e 	.word	0x5555553e
 8007c1c:	3fc55555 	.word	0x3fc55555
 8007c20:	652b82fe 	.word	0x652b82fe
 8007c24:	3ff71547 	.word	0x3ff71547
 8007c28:	fee00000 	.word	0xfee00000
 8007c2c:	3fe62e42 	.word	0x3fe62e42
 8007c30:	35793c76 	.word	0x35793c76
 8007c34:	3dea39ef 	.word	0x3dea39ef
 8007c38:	8800759c 	.word	0x8800759c
 8007c3c:	7e37e43c 	.word	0x7e37e43c
 8007c40:	40862e41 	.word	0x40862e41
 8007c44:	7fefffff 	.word	0x7fefffff
 8007c48:	3fd62e42 	.word	0x3fd62e42
 8007c4c:	3ff0a2b1 	.word	0x3ff0a2b1
 8007c50:	08009088 	.word	0x08009088
 8007c54:	08009078 	.word	0x08009078
 8007c58:	3ff00000 	.word	0x3ff00000
 8007c5c:	08009098 	.word	0x08009098
 8007c60:	3defffff 	.word	0x3defffff
 8007c64:	00000000 	.word	0x00000000

08007c68 <__ieee754_pow>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	b091      	sub	sp, #68	@ 0x44
 8007c6e:	ed8d 1b00 	vstr	d1, [sp]
 8007c72:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007c76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007c7a:	ea5a 0001 	orrs.w	r0, sl, r1
 8007c7e:	ec57 6b10 	vmov	r6, r7, d0
 8007c82:	d113      	bne.n	8007cac <__ieee754_pow+0x44>
 8007c84:	19b3      	adds	r3, r6, r6
 8007c86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007c8a:	4152      	adcs	r2, r2
 8007c8c:	4298      	cmp	r0, r3
 8007c8e:	4b9a      	ldr	r3, [pc, #616]	@ (8007ef8 <__ieee754_pow+0x290>)
 8007c90:	4193      	sbcs	r3, r2
 8007c92:	f080 84ee 	bcs.w	8008672 <__ieee754_pow+0xa0a>
 8007c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 fafd 	bl	800029c <__adddf3>
 8007ca2:	ec41 0b10 	vmov	d0, r0, r1
 8007ca6:	b011      	add	sp, #68	@ 0x44
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	4a93      	ldr	r2, [pc, #588]	@ (8007efc <__ieee754_pow+0x294>)
 8007cae:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8007cb2:	4295      	cmp	r5, r2
 8007cb4:	46b8      	mov	r8, r7
 8007cb6:	4633      	mov	r3, r6
 8007cb8:	d80a      	bhi.n	8007cd0 <__ieee754_pow+0x68>
 8007cba:	d104      	bne.n	8007cc6 <__ieee754_pow+0x5e>
 8007cbc:	2e00      	cmp	r6, #0
 8007cbe:	d1ea      	bne.n	8007c96 <__ieee754_pow+0x2e>
 8007cc0:	45aa      	cmp	sl, r5
 8007cc2:	d8e8      	bhi.n	8007c96 <__ieee754_pow+0x2e>
 8007cc4:	e001      	b.n	8007cca <__ieee754_pow+0x62>
 8007cc6:	4592      	cmp	sl, r2
 8007cc8:	d802      	bhi.n	8007cd0 <__ieee754_pow+0x68>
 8007cca:	4592      	cmp	sl, r2
 8007ccc:	d10f      	bne.n	8007cee <__ieee754_pow+0x86>
 8007cce:	b171      	cbz	r1, 8007cee <__ieee754_pow+0x86>
 8007cd0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007cd4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007cd8:	ea58 0803 	orrs.w	r8, r8, r3
 8007cdc:	d1db      	bne.n	8007c96 <__ieee754_pow+0x2e>
 8007cde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ce2:	18db      	adds	r3, r3, r3
 8007ce4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007ce8:	4152      	adcs	r2, r2
 8007cea:	4598      	cmp	r8, r3
 8007cec:	e7cf      	b.n	8007c8e <__ieee754_pow+0x26>
 8007cee:	f1b8 0f00 	cmp.w	r8, #0
 8007cf2:	46ab      	mov	fp, r5
 8007cf4:	da43      	bge.n	8007d7e <__ieee754_pow+0x116>
 8007cf6:	4a82      	ldr	r2, [pc, #520]	@ (8007f00 <__ieee754_pow+0x298>)
 8007cf8:	4592      	cmp	sl, r2
 8007cfa:	d856      	bhi.n	8007daa <__ieee754_pow+0x142>
 8007cfc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007d00:	4592      	cmp	sl, r2
 8007d02:	f240 84c5 	bls.w	8008690 <__ieee754_pow+0xa28>
 8007d06:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007d0a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007d0e:	2a14      	cmp	r2, #20
 8007d10:	dd18      	ble.n	8007d44 <__ieee754_pow+0xdc>
 8007d12:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007d16:	fa21 f402 	lsr.w	r4, r1, r2
 8007d1a:	fa04 f202 	lsl.w	r2, r4, r2
 8007d1e:	428a      	cmp	r2, r1
 8007d20:	f040 84b6 	bne.w	8008690 <__ieee754_pow+0xa28>
 8007d24:	f004 0401 	and.w	r4, r4, #1
 8007d28:	f1c4 0402 	rsb	r4, r4, #2
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d159      	bne.n	8007de4 <__ieee754_pow+0x17c>
 8007d30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007d34:	d148      	bne.n	8007dc8 <__ieee754_pow+0x160>
 8007d36:	4632      	mov	r2, r6
 8007d38:	463b      	mov	r3, r7
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	f7f8 fc63 	bl	8000608 <__aeabi_dmul>
 8007d42:	e7ae      	b.n	8007ca2 <__ieee754_pow+0x3a>
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d14c      	bne.n	8007de2 <__ieee754_pow+0x17a>
 8007d48:	f1c2 0214 	rsb	r2, r2, #20
 8007d4c:	fa4a f402 	asr.w	r4, sl, r2
 8007d50:	fa04 f202 	lsl.w	r2, r4, r2
 8007d54:	4552      	cmp	r2, sl
 8007d56:	f040 8498 	bne.w	800868a <__ieee754_pow+0xa22>
 8007d5a:	f004 0401 	and.w	r4, r4, #1
 8007d5e:	f1c4 0402 	rsb	r4, r4, #2
 8007d62:	4a68      	ldr	r2, [pc, #416]	@ (8007f04 <__ieee754_pow+0x29c>)
 8007d64:	4592      	cmp	sl, r2
 8007d66:	d1e3      	bne.n	8007d30 <__ieee754_pow+0xc8>
 8007d68:	f1b9 0f00 	cmp.w	r9, #0
 8007d6c:	f280 8489 	bge.w	8008682 <__ieee754_pow+0xa1a>
 8007d70:	4964      	ldr	r1, [pc, #400]	@ (8007f04 <__ieee754_pow+0x29c>)
 8007d72:	4632      	mov	r2, r6
 8007d74:	463b      	mov	r3, r7
 8007d76:	2000      	movs	r0, #0
 8007d78:	f7f8 fd70 	bl	800085c <__aeabi_ddiv>
 8007d7c:	e791      	b.n	8007ca2 <__ieee754_pow+0x3a>
 8007d7e:	2400      	movs	r4, #0
 8007d80:	bb81      	cbnz	r1, 8007de4 <__ieee754_pow+0x17c>
 8007d82:	4a5e      	ldr	r2, [pc, #376]	@ (8007efc <__ieee754_pow+0x294>)
 8007d84:	4592      	cmp	sl, r2
 8007d86:	d1ec      	bne.n	8007d62 <__ieee754_pow+0xfa>
 8007d88:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8007d8c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007d90:	431a      	orrs	r2, r3
 8007d92:	f000 846e 	beq.w	8008672 <__ieee754_pow+0xa0a>
 8007d96:	4b5c      	ldr	r3, [pc, #368]	@ (8007f08 <__ieee754_pow+0x2a0>)
 8007d98:	429d      	cmp	r5, r3
 8007d9a:	d908      	bls.n	8007dae <__ieee754_pow+0x146>
 8007d9c:	f1b9 0f00 	cmp.w	r9, #0
 8007da0:	f280 846b 	bge.w	800867a <__ieee754_pow+0xa12>
 8007da4:	2000      	movs	r0, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	e77b      	b.n	8007ca2 <__ieee754_pow+0x3a>
 8007daa:	2402      	movs	r4, #2
 8007dac:	e7e8      	b.n	8007d80 <__ieee754_pow+0x118>
 8007dae:	f1b9 0f00 	cmp.w	r9, #0
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f04f 0100 	mov.w	r1, #0
 8007dba:	f6bf af72 	bge.w	8007ca2 <__ieee754_pow+0x3a>
 8007dbe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007dc2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007dc6:	e76c      	b.n	8007ca2 <__ieee754_pow+0x3a>
 8007dc8:	4a50      	ldr	r2, [pc, #320]	@ (8007f0c <__ieee754_pow+0x2a4>)
 8007dca:	4591      	cmp	r9, r2
 8007dcc:	d10a      	bne.n	8007de4 <__ieee754_pow+0x17c>
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	db07      	blt.n	8007de4 <__ieee754_pow+0x17c>
 8007dd4:	ec47 6b10 	vmov	d0, r6, r7
 8007dd8:	b011      	add	sp, #68	@ 0x44
 8007dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dde:	f000 bd4f 	b.w	8008880 <__ieee754_sqrt>
 8007de2:	2400      	movs	r4, #0
 8007de4:	ec47 6b10 	vmov	d0, r6, r7
 8007de8:	9302      	str	r3, [sp, #8]
 8007dea:	f000 fc87 	bl	80086fc <fabs>
 8007dee:	9b02      	ldr	r3, [sp, #8]
 8007df0:	ec51 0b10 	vmov	r0, r1, d0
 8007df4:	bb43      	cbnz	r3, 8007e48 <__ieee754_pow+0x1e0>
 8007df6:	4b43      	ldr	r3, [pc, #268]	@ (8007f04 <__ieee754_pow+0x29c>)
 8007df8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d000      	beq.n	8007e02 <__ieee754_pow+0x19a>
 8007e00:	bb15      	cbnz	r5, 8007e48 <__ieee754_pow+0x1e0>
 8007e02:	f1b9 0f00 	cmp.w	r9, #0
 8007e06:	da05      	bge.n	8007e14 <__ieee754_pow+0x1ac>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	493d      	ldr	r1, [pc, #244]	@ (8007f04 <__ieee754_pow+0x29c>)
 8007e10:	f7f8 fd24 	bl	800085c <__aeabi_ddiv>
 8007e14:	f1b8 0f00 	cmp.w	r8, #0
 8007e18:	f6bf af43 	bge.w	8007ca2 <__ieee754_pow+0x3a>
 8007e1c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007e20:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007e24:	4325      	orrs	r5, r4
 8007e26:	d108      	bne.n	8007e3a <__ieee754_pow+0x1d2>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	f7f8 fa32 	bl	8000298 <__aeabi_dsub>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	e79e      	b.n	8007d78 <__ieee754_pow+0x110>
 8007e3a:	2c01      	cmp	r4, #1
 8007e3c:	f47f af31 	bne.w	8007ca2 <__ieee754_pow+0x3a>
 8007e40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e44:	4619      	mov	r1, r3
 8007e46:	e72c      	b.n	8007ca2 <__ieee754_pow+0x3a>
 8007e48:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	ea53 0204 	orrs.w	r2, r3, r4
 8007e52:	d102      	bne.n	8007e5a <__ieee754_pow+0x1f2>
 8007e54:	4632      	mov	r2, r6
 8007e56:	463b      	mov	r3, r7
 8007e58:	e7e8      	b.n	8007e2c <__ieee754_pow+0x1c4>
 8007e5a:	3c01      	subs	r4, #1
 8007e5c:	431c      	orrs	r4, r3
 8007e5e:	d016      	beq.n	8007e8e <__ieee754_pow+0x226>
 8007e60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ee8 <__ieee754_pow+0x280>
 8007e64:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e6c:	f240 8110 	bls.w	8008090 <__ieee754_pow+0x428>
 8007e70:	4b27      	ldr	r3, [pc, #156]	@ (8007f10 <__ieee754_pow+0x2a8>)
 8007e72:	459a      	cmp	sl, r3
 8007e74:	4b24      	ldr	r3, [pc, #144]	@ (8007f08 <__ieee754_pow+0x2a0>)
 8007e76:	d916      	bls.n	8007ea6 <__ieee754_pow+0x23e>
 8007e78:	429d      	cmp	r5, r3
 8007e7a:	d80b      	bhi.n	8007e94 <__ieee754_pow+0x22c>
 8007e7c:	f1b9 0f00 	cmp.w	r9, #0
 8007e80:	da0b      	bge.n	8007e9a <__ieee754_pow+0x232>
 8007e82:	2000      	movs	r0, #0
 8007e84:	b011      	add	sp, #68	@ 0x44
 8007e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8a:	f000 bcf1 	b.w	8008870 <__math_oflow>
 8007e8e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007ef0 <__ieee754_pow+0x288>
 8007e92:	e7e7      	b.n	8007e64 <__ieee754_pow+0x1fc>
 8007e94:	f1b9 0f00 	cmp.w	r9, #0
 8007e98:	dcf3      	bgt.n	8007e82 <__ieee754_pow+0x21a>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	b011      	add	sp, #68	@ 0x44
 8007e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea2:	f000 bcdd 	b.w	8008860 <__math_uflow>
 8007ea6:	429d      	cmp	r5, r3
 8007ea8:	d20c      	bcs.n	8007ec4 <__ieee754_pow+0x25c>
 8007eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f7f8 fe1b 	bl	8000aec <__aeabi_dcmplt>
 8007eb6:	3800      	subs	r0, #0
 8007eb8:	bf18      	it	ne
 8007eba:	2001      	movne	r0, #1
 8007ebc:	f1b9 0f00 	cmp.w	r9, #0
 8007ec0:	daec      	bge.n	8007e9c <__ieee754_pow+0x234>
 8007ec2:	e7df      	b.n	8007e84 <__ieee754_pow+0x21c>
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f04 <__ieee754_pow+0x29c>)
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	f04f 0200 	mov.w	r2, #0
 8007ecc:	d922      	bls.n	8007f14 <__ieee754_pow+0x2ac>
 8007ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f7f8 fe0a 	bl	8000aec <__aeabi_dcmplt>
 8007ed8:	3800      	subs	r0, #0
 8007eda:	bf18      	it	ne
 8007edc:	2001      	movne	r0, #1
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	dccf      	bgt.n	8007e84 <__ieee754_pow+0x21c>
 8007ee4:	e7da      	b.n	8007e9c <__ieee754_pow+0x234>
 8007ee6:	bf00      	nop
 8007ee8:	00000000 	.word	0x00000000
 8007eec:	3ff00000 	.word	0x3ff00000
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	bff00000 	.word	0xbff00000
 8007ef8:	fff00000 	.word	0xfff00000
 8007efc:	7ff00000 	.word	0x7ff00000
 8007f00:	433fffff 	.word	0x433fffff
 8007f04:	3ff00000 	.word	0x3ff00000
 8007f08:	3fefffff 	.word	0x3fefffff
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	43f00000 	.word	0x43f00000
 8007f14:	4b5a      	ldr	r3, [pc, #360]	@ (8008080 <__ieee754_pow+0x418>)
 8007f16:	f7f8 f9bf 	bl	8000298 <__aeabi_dsub>
 8007f1a:	a351      	add	r3, pc, #324	@ (adr r3, 8008060 <__ieee754_pow+0x3f8>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	f7f8 fb70 	bl	8000608 <__aeabi_dmul>
 8007f28:	a34f      	add	r3, pc, #316	@ (adr r3, 8008068 <__ieee754_pow+0x400>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460f      	mov	r7, r1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 fb67 	bl	8000608 <__aeabi_dmul>
 8007f3a:	4b52      	ldr	r3, [pc, #328]	@ (8008084 <__ieee754_pow+0x41c>)
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	468b      	mov	fp, r1
 8007f40:	2200      	movs	r2, #0
 8007f42:	4620      	mov	r0, r4
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7f8 fb5f 	bl	8000608 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	a148      	add	r1, pc, #288	@ (adr r1, 8008070 <__ieee754_pow+0x408>)
 8007f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f54:	f7f8 f9a0 	bl	8000298 <__aeabi_dsub>
 8007f58:	4622      	mov	r2, r4
 8007f5a:	462b      	mov	r3, r5
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	2000      	movs	r0, #0
 8007f66:	4948      	ldr	r1, [pc, #288]	@ (8008088 <__ieee754_pow+0x420>)
 8007f68:	f7f8 f996 	bl	8000298 <__aeabi_dsub>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	462b      	mov	r3, r5
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 fb46 	bl	8000608 <__aeabi_dmul>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	f7f8 fb40 	bl	8000608 <__aeabi_dmul>
 8007f88:	a33b      	add	r3, pc, #236	@ (adr r3, 8008078 <__ieee754_pow+0x410>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 fb3b 	bl	8000608 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4650      	mov	r0, sl
 8007f98:	4659      	mov	r1, fp
 8007f9a:	f7f8 f97d 	bl	8000298 <__aeabi_dsub>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	4689      	mov	r9, r1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 f977 	bl	800029c <__adddf3>
 8007fae:	2400      	movs	r4, #0
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	f7f8 f96e 	bl	8000298 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7f8 f968 	bl	8000298 <__aeabi_dsub>
 8007fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007fd8:	4606      	mov	r6, r0
 8007fda:	460f      	mov	r7, r1
 8007fdc:	465b      	mov	r3, fp
 8007fde:	4652      	mov	r2, sl
 8007fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fe4:	f7f8 f958 	bl	8000298 <__aeabi_dsub>
 8007fe8:	4622      	mov	r2, r4
 8007fea:	462b      	mov	r3, r5
 8007fec:	f7f8 fb0c 	bl	8000608 <__aeabi_dmul>
 8007ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff4:	4680      	mov	r8, r0
 8007ff6:	4689      	mov	r9, r1
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 fb04 	bl	8000608 <__aeabi_dmul>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4640      	mov	r0, r8
 8008006:	4649      	mov	r1, r9
 8008008:	f7f8 f948 	bl	800029c <__adddf3>
 800800c:	465b      	mov	r3, fp
 800800e:	4606      	mov	r6, r0
 8008010:	460f      	mov	r7, r1
 8008012:	4652      	mov	r2, sl
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 faf6 	bl	8000608 <__aeabi_dmul>
 800801c:	460b      	mov	r3, r1
 800801e:	4602      	mov	r2, r0
 8008020:	4680      	mov	r8, r0
 8008022:	4689      	mov	r9, r1
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 f938 	bl	800029c <__adddf3>
 800802c:	4b17      	ldr	r3, [pc, #92]	@ (800808c <__ieee754_pow+0x424>)
 800802e:	4299      	cmp	r1, r3
 8008030:	4604      	mov	r4, r0
 8008032:	460d      	mov	r5, r1
 8008034:	468b      	mov	fp, r1
 8008036:	f340 820b 	ble.w	8008450 <__ieee754_pow+0x7e8>
 800803a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800803e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008042:	4303      	orrs	r3, r0
 8008044:	f000 81ea 	beq.w	800841c <__ieee754_pow+0x7b4>
 8008048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	2300      	movs	r3, #0
 8008050:	f7f8 fd4c 	bl	8000aec <__aeabi_dcmplt>
 8008054:	3800      	subs	r0, #0
 8008056:	bf18      	it	ne
 8008058:	2001      	movne	r0, #1
 800805a:	e713      	b.n	8007e84 <__ieee754_pow+0x21c>
 800805c:	f3af 8000 	nop.w
 8008060:	60000000 	.word	0x60000000
 8008064:	3ff71547 	.word	0x3ff71547
 8008068:	f85ddf44 	.word	0xf85ddf44
 800806c:	3e54ae0b 	.word	0x3e54ae0b
 8008070:	55555555 	.word	0x55555555
 8008074:	3fd55555 	.word	0x3fd55555
 8008078:	652b82fe 	.word	0x652b82fe
 800807c:	3ff71547 	.word	0x3ff71547
 8008080:	3ff00000 	.word	0x3ff00000
 8008084:	3fd00000 	.word	0x3fd00000
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	408fffff 	.word	0x408fffff
 8008090:	4bd5      	ldr	r3, [pc, #852]	@ (80083e8 <__ieee754_pow+0x780>)
 8008092:	ea08 0303 	and.w	r3, r8, r3
 8008096:	2200      	movs	r2, #0
 8008098:	b92b      	cbnz	r3, 80080a6 <__ieee754_pow+0x43e>
 800809a:	4bd4      	ldr	r3, [pc, #848]	@ (80083ec <__ieee754_pow+0x784>)
 800809c:	f7f8 fab4 	bl	8000608 <__aeabi_dmul>
 80080a0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80080a4:	468b      	mov	fp, r1
 80080a6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80080aa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80080ae:	4413      	add	r3, r2
 80080b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b2:	4bcf      	ldr	r3, [pc, #828]	@ (80083f0 <__ieee754_pow+0x788>)
 80080b4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80080b8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80080bc:	459b      	cmp	fp, r3
 80080be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80080c2:	dd08      	ble.n	80080d6 <__ieee754_pow+0x46e>
 80080c4:	4bcb      	ldr	r3, [pc, #812]	@ (80083f4 <__ieee754_pow+0x78c>)
 80080c6:	459b      	cmp	fp, r3
 80080c8:	f340 81a5 	ble.w	8008416 <__ieee754_pow+0x7ae>
 80080cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ce:	3301      	adds	r3, #1
 80080d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80080d6:	f04f 0a00 	mov.w	sl, #0
 80080da:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80080de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e0:	4bc5      	ldr	r3, [pc, #788]	@ (80083f8 <__ieee754_pow+0x790>)
 80080e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080e6:	ed93 7b00 	vldr	d7, [r3]
 80080ea:	4629      	mov	r1, r5
 80080ec:	ec53 2b17 	vmov	r2, r3, d7
 80080f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080f8:	f7f8 f8ce 	bl	8000298 <__aeabi_dsub>
 80080fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008108:	f7f8 f8c8 	bl	800029c <__adddf3>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	2000      	movs	r0, #0
 8008112:	49ba      	ldr	r1, [pc, #744]	@ (80083fc <__ieee754_pow+0x794>)
 8008114:	f7f8 fba2 	bl	800085c <__aeabi_ddiv>
 8008118:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 fa70 	bl	8000608 <__aeabi_dmul>
 8008128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800812c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008130:	106d      	asrs	r5, r5, #1
 8008132:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008136:	f04f 0b00 	mov.w	fp, #0
 800813a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800813e:	4661      	mov	r1, ip
 8008140:	2200      	movs	r2, #0
 8008142:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008146:	4658      	mov	r0, fp
 8008148:	46e1      	mov	r9, ip
 800814a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800814e:	4614      	mov	r4, r2
 8008150:	461d      	mov	r5, r3
 8008152:	f7f8 fa59 	bl	8000608 <__aeabi_dmul>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4630      	mov	r0, r6
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 f89b 	bl	8000298 <__aeabi_dsub>
 8008162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008166:	4606      	mov	r6, r0
 8008168:	460f      	mov	r7, r1
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 f893 	bl	8000298 <__aeabi_dsub>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800817a:	f7f8 f88d 	bl	8000298 <__aeabi_dsub>
 800817e:	465a      	mov	r2, fp
 8008180:	464b      	mov	r3, r9
 8008182:	f7f8 fa41 	bl	8000608 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 f883 	bl	8000298 <__aeabi_dsub>
 8008192:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008196:	f7f8 fa37 	bl	8000608 <__aeabi_dmul>
 800819a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800819e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081a2:	4610      	mov	r0, r2
 80081a4:	4619      	mov	r1, r3
 80081a6:	f7f8 fa2f 	bl	8000608 <__aeabi_dmul>
 80081aa:	a37d      	add	r3, pc, #500	@ (adr r3, 80083a0 <__ieee754_pow+0x738>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	f7f8 fa28 	bl	8000608 <__aeabi_dmul>
 80081b8:	a37b      	add	r3, pc, #492	@ (adr r3, 80083a8 <__ieee754_pow+0x740>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f86d 	bl	800029c <__adddf3>
 80081c2:	4622      	mov	r2, r4
 80081c4:	462b      	mov	r3, r5
 80081c6:	f7f8 fa1f 	bl	8000608 <__aeabi_dmul>
 80081ca:	a379      	add	r3, pc, #484	@ (adr r3, 80083b0 <__ieee754_pow+0x748>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 f864 	bl	800029c <__adddf3>
 80081d4:	4622      	mov	r2, r4
 80081d6:	462b      	mov	r3, r5
 80081d8:	f7f8 fa16 	bl	8000608 <__aeabi_dmul>
 80081dc:	a376      	add	r3, pc, #472	@ (adr r3, 80083b8 <__ieee754_pow+0x750>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 f85b 	bl	800029c <__adddf3>
 80081e6:	4622      	mov	r2, r4
 80081e8:	462b      	mov	r3, r5
 80081ea:	f7f8 fa0d 	bl	8000608 <__aeabi_dmul>
 80081ee:	a374      	add	r3, pc, #464	@ (adr r3, 80083c0 <__ieee754_pow+0x758>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f8 f852 	bl	800029c <__adddf3>
 80081f8:	4622      	mov	r2, r4
 80081fa:	462b      	mov	r3, r5
 80081fc:	f7f8 fa04 	bl	8000608 <__aeabi_dmul>
 8008200:	a371      	add	r3, pc, #452	@ (adr r3, 80083c8 <__ieee754_pow+0x760>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f8 f849 	bl	800029c <__adddf3>
 800820a:	4622      	mov	r2, r4
 800820c:	4606      	mov	r6, r0
 800820e:	460f      	mov	r7, r1
 8008210:	462b      	mov	r3, r5
 8008212:	4620      	mov	r0, r4
 8008214:	4629      	mov	r1, r5
 8008216:	f7f8 f9f7 	bl	8000608 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4630      	mov	r0, r6
 8008220:	4639      	mov	r1, r7
 8008222:	f7f8 f9f1 	bl	8000608 <__aeabi_dmul>
 8008226:	465a      	mov	r2, fp
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	464b      	mov	r3, r9
 800822e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008232:	f7f8 f833 	bl	800029c <__adddf3>
 8008236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800823a:	f7f8 f9e5 	bl	8000608 <__aeabi_dmul>
 800823e:	4622      	mov	r2, r4
 8008240:	462b      	mov	r3, r5
 8008242:	f7f8 f82b 	bl	800029c <__adddf3>
 8008246:	465a      	mov	r2, fp
 8008248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800824c:	464b      	mov	r3, r9
 800824e:	4658      	mov	r0, fp
 8008250:	4649      	mov	r1, r9
 8008252:	f7f8 f9d9 	bl	8000608 <__aeabi_dmul>
 8008256:	4b6a      	ldr	r3, [pc, #424]	@ (8008400 <__ieee754_pow+0x798>)
 8008258:	2200      	movs	r2, #0
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	f7f8 f81d 	bl	800029c <__adddf3>
 8008262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008266:	f7f8 f819 	bl	800029c <__adddf3>
 800826a:	46d8      	mov	r8, fp
 800826c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008270:	460d      	mov	r5, r1
 8008272:	465a      	mov	r2, fp
 8008274:	460b      	mov	r3, r1
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800827e:	f7f8 f9c3 	bl	8000608 <__aeabi_dmul>
 8008282:	465c      	mov	r4, fp
 8008284:	4680      	mov	r8, r0
 8008286:	4689      	mov	r9, r1
 8008288:	4b5d      	ldr	r3, [pc, #372]	@ (8008400 <__ieee754_pow+0x798>)
 800828a:	2200      	movs	r2, #0
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 f802 	bl	8000298 <__aeabi_dsub>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f7 fffe 	bl	8000298 <__aeabi_dsub>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082a4:	f7f7 fff8 	bl	8000298 <__aeabi_dsub>
 80082a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ac:	f7f8 f9ac 	bl	8000608 <__aeabi_dmul>
 80082b0:	4622      	mov	r2, r4
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	462b      	mov	r3, r5
 80082b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082bc:	f7f8 f9a4 	bl	8000608 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f7 ffe8 	bl	800029c <__adddf3>
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4640      	mov	r0, r8
 80082d6:	4649      	mov	r1, r9
 80082d8:	f7f7 ffe0 	bl	800029c <__adddf3>
 80082dc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80082e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80083d0 <__ieee754_pow+0x768>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	4658      	mov	r0, fp
 80082e8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80082ec:	460d      	mov	r5, r1
 80082ee:	f7f8 f98b 	bl	8000608 <__aeabi_dmul>
 80082f2:	465c      	mov	r4, fp
 80082f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f7 ffca 	bl	8000298 <__aeabi_dsub>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4630      	mov	r0, r6
 800830a:	4639      	mov	r1, r7
 800830c:	f7f7 ffc4 	bl	8000298 <__aeabi_dsub>
 8008310:	a331      	add	r3, pc, #196	@ (adr r3, 80083d8 <__ieee754_pow+0x770>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	a331      	add	r3, pc, #196	@ (adr r3, 80083e0 <__ieee754_pow+0x778>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	4606      	mov	r6, r0
 8008322:	460f      	mov	r7, r1
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f8 f96e 	bl	8000608 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800833a:	4b32      	ldr	r3, [pc, #200]	@ (8008404 <__ieee754_pow+0x79c>)
 800833c:	4413      	add	r3, r2
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f7 ffab 	bl	800029c <__adddf3>
 8008346:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800834a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800834c:	f7f8 f8f2 	bl	8000534 <__aeabi_i2d>
 8008350:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008352:	4b2d      	ldr	r3, [pc, #180]	@ (8008408 <__ieee754_pow+0x7a0>)
 8008354:	4413      	add	r3, r2
 8008356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800835a:	4606      	mov	r6, r0
 800835c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008360:	460f      	mov	r7, r1
 8008362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008366:	f7f7 ff99 	bl	800029c <__adddf3>
 800836a:	4642      	mov	r2, r8
 800836c:	464b      	mov	r3, r9
 800836e:	f7f7 ff95 	bl	800029c <__adddf3>
 8008372:	4632      	mov	r2, r6
 8008374:	463b      	mov	r3, r7
 8008376:	f7f7 ff91 	bl	800029c <__adddf3>
 800837a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800837e:	4632      	mov	r2, r6
 8008380:	463b      	mov	r3, r7
 8008382:	4658      	mov	r0, fp
 8008384:	460d      	mov	r5, r1
 8008386:	f7f7 ff87 	bl	8000298 <__aeabi_dsub>
 800838a:	4642      	mov	r2, r8
 800838c:	464b      	mov	r3, r9
 800838e:	f7f7 ff83 	bl	8000298 <__aeabi_dsub>
 8008392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008396:	f7f7 ff7f 	bl	8000298 <__aeabi_dsub>
 800839a:	465c      	mov	r4, fp
 800839c:	e036      	b.n	800840c <__ieee754_pow+0x7a4>
 800839e:	bf00      	nop
 80083a0:	4a454eef 	.word	0x4a454eef
 80083a4:	3fca7e28 	.word	0x3fca7e28
 80083a8:	93c9db65 	.word	0x93c9db65
 80083ac:	3fcd864a 	.word	0x3fcd864a
 80083b0:	a91d4101 	.word	0xa91d4101
 80083b4:	3fd17460 	.word	0x3fd17460
 80083b8:	518f264d 	.word	0x518f264d
 80083bc:	3fd55555 	.word	0x3fd55555
 80083c0:	db6fabff 	.word	0xdb6fabff
 80083c4:	3fdb6db6 	.word	0x3fdb6db6
 80083c8:	33333303 	.word	0x33333303
 80083cc:	3fe33333 	.word	0x3fe33333
 80083d0:	e0000000 	.word	0xe0000000
 80083d4:	3feec709 	.word	0x3feec709
 80083d8:	dc3a03fd 	.word	0xdc3a03fd
 80083dc:	3feec709 	.word	0x3feec709
 80083e0:	145b01f5 	.word	0x145b01f5
 80083e4:	be3e2fe0 	.word	0xbe3e2fe0
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	43400000 	.word	0x43400000
 80083f0:	0003988e 	.word	0x0003988e
 80083f4:	000bb679 	.word	0x000bb679
 80083f8:	080090c8 	.word	0x080090c8
 80083fc:	3ff00000 	.word	0x3ff00000
 8008400:	40080000 	.word	0x40080000
 8008404:	080090a8 	.word	0x080090a8
 8008408:	080090b8 	.word	0x080090b8
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008414:	e5d6      	b.n	8007fc4 <__ieee754_pow+0x35c>
 8008416:	f04f 0a01 	mov.w	sl, #1
 800841a:	e65e      	b.n	80080da <__ieee754_pow+0x472>
 800841c:	a3b5      	add	r3, pc, #724	@ (adr r3, 80086f4 <__ieee754_pow+0xa8c>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	4630      	mov	r0, r6
 8008424:	4639      	mov	r1, r7
 8008426:	f7f7 ff39 	bl	800029c <__adddf3>
 800842a:	4642      	mov	r2, r8
 800842c:	e9cd 0100 	strd	r0, r1, [sp]
 8008430:	464b      	mov	r3, r9
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f7 ff2f 	bl	8000298 <__aeabi_dsub>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008442:	f7f8 fb71 	bl	8000b28 <__aeabi_dcmpgt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f47f adfe 	bne.w	8008048 <__ieee754_pow+0x3e0>
 800844c:	4ba2      	ldr	r3, [pc, #648]	@ (80086d8 <__ieee754_pow+0xa70>)
 800844e:	e022      	b.n	8008496 <__ieee754_pow+0x82e>
 8008450:	4ca2      	ldr	r4, [pc, #648]	@ (80086dc <__ieee754_pow+0xa74>)
 8008452:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008456:	42a3      	cmp	r3, r4
 8008458:	d919      	bls.n	800848e <__ieee754_pow+0x826>
 800845a:	4ba1      	ldr	r3, [pc, #644]	@ (80086e0 <__ieee754_pow+0xa78>)
 800845c:	440b      	add	r3, r1
 800845e:	4303      	orrs	r3, r0
 8008460:	d009      	beq.n	8008476 <__ieee754_pow+0x80e>
 8008462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	2300      	movs	r3, #0
 800846a:	f7f8 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800846e:	3800      	subs	r0, #0
 8008470:	bf18      	it	ne
 8008472:	2001      	movne	r0, #1
 8008474:	e512      	b.n	8007e9c <__ieee754_pow+0x234>
 8008476:	4642      	mov	r2, r8
 8008478:	464b      	mov	r3, r9
 800847a:	f7f7 ff0d 	bl	8000298 <__aeabi_dsub>
 800847e:	4632      	mov	r2, r6
 8008480:	463b      	mov	r3, r7
 8008482:	f7f8 fb47 	bl	8000b14 <__aeabi_dcmpge>
 8008486:	2800      	cmp	r0, #0
 8008488:	d1eb      	bne.n	8008462 <__ieee754_pow+0x7fa>
 800848a:	4b96      	ldr	r3, [pc, #600]	@ (80086e4 <__ieee754_pow+0xa7c>)
 800848c:	e003      	b.n	8008496 <__ieee754_pow+0x82e>
 800848e:	4a96      	ldr	r2, [pc, #600]	@ (80086e8 <__ieee754_pow+0xa80>)
 8008490:	4293      	cmp	r3, r2
 8008492:	f240 80e7 	bls.w	8008664 <__ieee754_pow+0x9fc>
 8008496:	151b      	asrs	r3, r3, #20
 8008498:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800849c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80084a0:	fa4a fa03 	asr.w	sl, sl, r3
 80084a4:	44da      	add	sl, fp
 80084a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80084aa:	4890      	ldr	r0, [pc, #576]	@ (80086ec <__ieee754_pow+0xa84>)
 80084ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80084b0:	4108      	asrs	r0, r1
 80084b2:	ea00 030a 	and.w	r3, r0, sl
 80084b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80084ba:	f1c1 0114 	rsb	r1, r1, #20
 80084be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80084c2:	fa4a fa01 	asr.w	sl, sl, r1
 80084c6:	f1bb 0f00 	cmp.w	fp, #0
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	bfb8      	it	lt
 80084d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80084d8:	f7f7 fede 	bl	8000298 <__aeabi_dsub>
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	4632      	mov	r2, r6
 80084e2:	463b      	mov	r3, r7
 80084e4:	4640      	mov	r0, r8
 80084e6:	4649      	mov	r1, r9
 80084e8:	f7f7 fed8 	bl	800029c <__adddf3>
 80084ec:	2400      	movs	r4, #0
 80084ee:	a36a      	add	r3, pc, #424	@ (adr r3, 8008698 <__ieee754_pow+0xa30>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	4620      	mov	r0, r4
 80084f6:	460d      	mov	r5, r1
 80084f8:	f7f8 f886 	bl	8000608 <__aeabi_dmul>
 80084fc:	4642      	mov	r2, r8
 80084fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008502:	464b      	mov	r3, r9
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	f7f7 fec6 	bl	8000298 <__aeabi_dsub>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4630      	mov	r0, r6
 8008512:	4639      	mov	r1, r7
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	a361      	add	r3, pc, #388	@ (adr r3, 80086a0 <__ieee754_pow+0xa38>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f8 f873 	bl	8000608 <__aeabi_dmul>
 8008522:	a361      	add	r3, pc, #388	@ (adr r3, 80086a8 <__ieee754_pow+0xa40>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	4680      	mov	r8, r0
 800852a:	4689      	mov	r9, r1
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4640      	mov	r0, r8
 800853a:	4649      	mov	r1, r9
 800853c:	f7f7 feae 	bl	800029c <__adddf3>
 8008540:	4604      	mov	r4, r0
 8008542:	460d      	mov	r5, r1
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800854c:	f7f7 fea6 	bl	800029c <__adddf3>
 8008550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008554:	4680      	mov	r8, r0
 8008556:	4689      	mov	r9, r1
 8008558:	f7f7 fe9e 	bl	8000298 <__aeabi_dsub>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4620      	mov	r0, r4
 8008562:	4629      	mov	r1, r5
 8008564:	f7f7 fe98 	bl	8000298 <__aeabi_dsub>
 8008568:	4642      	mov	r2, r8
 800856a:	4606      	mov	r6, r0
 800856c:	460f      	mov	r7, r1
 800856e:	464b      	mov	r3, r9
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	a34d      	add	r3, pc, #308	@ (adr r3, 80086b0 <__ieee754_pow+0xa48>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	4604      	mov	r4, r0
 8008580:	460d      	mov	r5, r1
 8008582:	f7f8 f841 	bl	8000608 <__aeabi_dmul>
 8008586:	a34c      	add	r3, pc, #304	@ (adr r3, 80086b8 <__ieee754_pow+0xa50>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	4622      	mov	r2, r4
 8008592:	462b      	mov	r3, r5
 8008594:	f7f8 f838 	bl	8000608 <__aeabi_dmul>
 8008598:	a349      	add	r3, pc, #292	@ (adr r3, 80086c0 <__ieee754_pow+0xa58>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe7d 	bl	800029c <__adddf3>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f82f 	bl	8000608 <__aeabi_dmul>
 80085aa:	a347      	add	r3, pc, #284	@ (adr r3, 80086c8 <__ieee754_pow+0xa60>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f7f7 fe72 	bl	8000298 <__aeabi_dsub>
 80085b4:	4622      	mov	r2, r4
 80085b6:	462b      	mov	r3, r5
 80085b8:	f7f8 f826 	bl	8000608 <__aeabi_dmul>
 80085bc:	a344      	add	r3, pc, #272	@ (adr r3, 80086d0 <__ieee754_pow+0xa68>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe6b 	bl	800029c <__adddf3>
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	f7f8 f81d 	bl	8000608 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fe5f 	bl	8000298 <__aeabi_dsub>
 80085da:	4604      	mov	r4, r0
 80085dc:	460d      	mov	r5, r1
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4640      	mov	r0, r8
 80085e4:	4649      	mov	r1, r9
 80085e6:	f7f8 f80f 	bl	8000608 <__aeabi_dmul>
 80085ea:	2200      	movs	r2, #0
 80085ec:	e9cd 0100 	strd	r0, r1, [sp]
 80085f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f7 fe4e 	bl	8000298 <__aeabi_dsub>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008604:	f7f8 f92a 	bl	800085c <__aeabi_ddiv>
 8008608:	4632      	mov	r2, r6
 800860a:	4604      	mov	r4, r0
 800860c:	460d      	mov	r5, r1
 800860e:	463b      	mov	r3, r7
 8008610:	4640      	mov	r0, r8
 8008612:	4649      	mov	r1, r9
 8008614:	f7f7 fff8 	bl	8000608 <__aeabi_dmul>
 8008618:	4632      	mov	r2, r6
 800861a:	463b      	mov	r3, r7
 800861c:	f7f7 fe3e 	bl	800029c <__adddf3>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f7 fe36 	bl	8000298 <__aeabi_dsub>
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	f7f7 fe32 	bl	8000298 <__aeabi_dsub>
 8008634:	460b      	mov	r3, r1
 8008636:	4602      	mov	r2, r0
 8008638:	492d      	ldr	r1, [pc, #180]	@ (80086f0 <__ieee754_pow+0xa88>)
 800863a:	2000      	movs	r0, #0
 800863c:	f7f7 fe2c 	bl	8000298 <__aeabi_dsub>
 8008640:	ec41 0b10 	vmov	d0, r0, r1
 8008644:	ee10 3a90 	vmov	r3, s1
 8008648:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800864c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008650:	da0b      	bge.n	800866a <__ieee754_pow+0xa02>
 8008652:	4650      	mov	r0, sl
 8008654:	f000 f85c 	bl	8008710 <scalbn>
 8008658:	ec51 0b10 	vmov	r0, r1, d0
 800865c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008660:	f7ff bb6d 	b.w	8007d3e <__ieee754_pow+0xd6>
 8008664:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008668:	e73a      	b.n	80084e0 <__ieee754_pow+0x878>
 800866a:	ec51 0b10 	vmov	r0, r1, d0
 800866e:	4619      	mov	r1, r3
 8008670:	e7f4      	b.n	800865c <__ieee754_pow+0x9f4>
 8008672:	491f      	ldr	r1, [pc, #124]	@ (80086f0 <__ieee754_pow+0xa88>)
 8008674:	2000      	movs	r0, #0
 8008676:	f7ff bb14 	b.w	8007ca2 <__ieee754_pow+0x3a>
 800867a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800867e:	f7ff bb10 	b.w	8007ca2 <__ieee754_pow+0x3a>
 8008682:	4630      	mov	r0, r6
 8008684:	4639      	mov	r1, r7
 8008686:	f7ff bb0c 	b.w	8007ca2 <__ieee754_pow+0x3a>
 800868a:	460c      	mov	r4, r1
 800868c:	f7ff bb69 	b.w	8007d62 <__ieee754_pow+0xfa>
 8008690:	2400      	movs	r4, #0
 8008692:	f7ff bb4b 	b.w	8007d2c <__ieee754_pow+0xc4>
 8008696:	bf00      	nop
 8008698:	00000000 	.word	0x00000000
 800869c:	3fe62e43 	.word	0x3fe62e43
 80086a0:	fefa39ef 	.word	0xfefa39ef
 80086a4:	3fe62e42 	.word	0x3fe62e42
 80086a8:	0ca86c39 	.word	0x0ca86c39
 80086ac:	be205c61 	.word	0xbe205c61
 80086b0:	72bea4d0 	.word	0x72bea4d0
 80086b4:	3e663769 	.word	0x3e663769
 80086b8:	c5d26bf1 	.word	0xc5d26bf1
 80086bc:	3ebbbd41 	.word	0x3ebbbd41
 80086c0:	af25de2c 	.word	0xaf25de2c
 80086c4:	3f11566a 	.word	0x3f11566a
 80086c8:	16bebd93 	.word	0x16bebd93
 80086cc:	3f66c16c 	.word	0x3f66c16c
 80086d0:	5555553e 	.word	0x5555553e
 80086d4:	3fc55555 	.word	0x3fc55555
 80086d8:	40900000 	.word	0x40900000
 80086dc:	4090cbff 	.word	0x4090cbff
 80086e0:	3f6f3400 	.word	0x3f6f3400
 80086e4:	4090cc00 	.word	0x4090cc00
 80086e8:	3fe00000 	.word	0x3fe00000
 80086ec:	fff00000 	.word	0xfff00000
 80086f0:	3ff00000 	.word	0x3ff00000
 80086f4:	652b82fe 	.word	0x652b82fe
 80086f8:	3c971547 	.word	0x3c971547

080086fc <fabs>:
 80086fc:	ec51 0b10 	vmov	r0, r1, d0
 8008700:	4602      	mov	r2, r0
 8008702:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008706:	ec43 2b10 	vmov	d0, r2, r3
 800870a:	4770      	bx	lr
 800870c:	0000      	movs	r0, r0
	...

08008710 <scalbn>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	ec55 4b10 	vmov	r4, r5, d0
 8008716:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800871a:	4606      	mov	r6, r0
 800871c:	462b      	mov	r3, r5
 800871e:	b991      	cbnz	r1, 8008746 <scalbn+0x36>
 8008720:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008724:	4323      	orrs	r3, r4
 8008726:	d03b      	beq.n	80087a0 <scalbn+0x90>
 8008728:	4b33      	ldr	r3, [pc, #204]	@ (80087f8 <scalbn+0xe8>)
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	2200      	movs	r2, #0
 8008730:	f7f7 ff6a 	bl	8000608 <__aeabi_dmul>
 8008734:	4b31      	ldr	r3, [pc, #196]	@ (80087fc <scalbn+0xec>)
 8008736:	429e      	cmp	r6, r3
 8008738:	4604      	mov	r4, r0
 800873a:	460d      	mov	r5, r1
 800873c:	da0f      	bge.n	800875e <scalbn+0x4e>
 800873e:	a326      	add	r3, pc, #152	@ (adr r3, 80087d8 <scalbn+0xc8>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	e01e      	b.n	8008784 <scalbn+0x74>
 8008746:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800874a:	4291      	cmp	r1, r2
 800874c:	d10b      	bne.n	8008766 <scalbn+0x56>
 800874e:	4622      	mov	r2, r4
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	f7f7 fda2 	bl	800029c <__adddf3>
 8008758:	4604      	mov	r4, r0
 800875a:	460d      	mov	r5, r1
 800875c:	e020      	b.n	80087a0 <scalbn+0x90>
 800875e:	460b      	mov	r3, r1
 8008760:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008764:	3936      	subs	r1, #54	@ 0x36
 8008766:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800876a:	4296      	cmp	r6, r2
 800876c:	dd0d      	ble.n	800878a <scalbn+0x7a>
 800876e:	2d00      	cmp	r5, #0
 8008770:	a11b      	add	r1, pc, #108	@ (adr r1, 80087e0 <scalbn+0xd0>)
 8008772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008776:	da02      	bge.n	800877e <scalbn+0x6e>
 8008778:	a11b      	add	r1, pc, #108	@ (adr r1, 80087e8 <scalbn+0xd8>)
 800877a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800877e:	a318      	add	r3, pc, #96	@ (adr r3, 80087e0 <scalbn+0xd0>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 ff40 	bl	8000608 <__aeabi_dmul>
 8008788:	e7e6      	b.n	8008758 <scalbn+0x48>
 800878a:	1872      	adds	r2, r6, r1
 800878c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008790:	428a      	cmp	r2, r1
 8008792:	dcec      	bgt.n	800876e <scalbn+0x5e>
 8008794:	2a00      	cmp	r2, #0
 8008796:	dd06      	ble.n	80087a6 <scalbn+0x96>
 8008798:	f36f 531e 	bfc	r3, #20, #11
 800879c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80087a0:	ec45 4b10 	vmov	d0, r4, r5
 80087a4:	bd70      	pop	{r4, r5, r6, pc}
 80087a6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80087aa:	da08      	bge.n	80087be <scalbn+0xae>
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80087d8 <scalbn+0xc8>)
 80087b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b4:	dac3      	bge.n	800873e <scalbn+0x2e>
 80087b6:	a10e      	add	r1, pc, #56	@ (adr r1, 80087f0 <scalbn+0xe0>)
 80087b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087bc:	e7bf      	b.n	800873e <scalbn+0x2e>
 80087be:	3236      	adds	r2, #54	@ 0x36
 80087c0:	f36f 531e 	bfc	r3, #20, #11
 80087c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80087c8:	4620      	mov	r0, r4
 80087ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008800 <scalbn+0xf0>)
 80087cc:	4629      	mov	r1, r5
 80087ce:	2200      	movs	r2, #0
 80087d0:	e7d8      	b.n	8008784 <scalbn+0x74>
 80087d2:	bf00      	nop
 80087d4:	f3af 8000 	nop.w
 80087d8:	c2f8f359 	.word	0xc2f8f359
 80087dc:	01a56e1f 	.word	0x01a56e1f
 80087e0:	8800759c 	.word	0x8800759c
 80087e4:	7e37e43c 	.word	0x7e37e43c
 80087e8:	8800759c 	.word	0x8800759c
 80087ec:	fe37e43c 	.word	0xfe37e43c
 80087f0:	c2f8f359 	.word	0xc2f8f359
 80087f4:	81a56e1f 	.word	0x81a56e1f
 80087f8:	43500000 	.word	0x43500000
 80087fc:	ffff3cb0 	.word	0xffff3cb0
 8008800:	3c900000 	.word	0x3c900000

08008804 <with_errno>:
 8008804:	b510      	push	{r4, lr}
 8008806:	ed2d 8b02 	vpush	{d8}
 800880a:	eeb0 8a40 	vmov.f32	s16, s0
 800880e:	eef0 8a60 	vmov.f32	s17, s1
 8008812:	4604      	mov	r4, r0
 8008814:	f7fc ff22 	bl	800565c <__errno>
 8008818:	eeb0 0a48 	vmov.f32	s0, s16
 800881c:	eef0 0a68 	vmov.f32	s1, s17
 8008820:	ecbd 8b02 	vpop	{d8}
 8008824:	6004      	str	r4, [r0, #0]
 8008826:	bd10      	pop	{r4, pc}

08008828 <xflow>:
 8008828:	4603      	mov	r3, r0
 800882a:	b507      	push	{r0, r1, r2, lr}
 800882c:	ec51 0b10 	vmov	r0, r1, d0
 8008830:	b183      	cbz	r3, 8008854 <xflow+0x2c>
 8008832:	4602      	mov	r2, r0
 8008834:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008838:	e9cd 2300 	strd	r2, r3, [sp]
 800883c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008840:	f7f7 fee2 	bl	8000608 <__aeabi_dmul>
 8008844:	ec41 0b10 	vmov	d0, r0, r1
 8008848:	2022      	movs	r0, #34	@ 0x22
 800884a:	b003      	add	sp, #12
 800884c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008850:	f7ff bfd8 	b.w	8008804 <with_errno>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	e7ee      	b.n	8008838 <xflow+0x10>
 800885a:	0000      	movs	r0, r0
 800885c:	0000      	movs	r0, r0
	...

08008860 <__math_uflow>:
 8008860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008868 <__math_uflow+0x8>
 8008864:	f7ff bfe0 	b.w	8008828 <xflow>
 8008868:	00000000 	.word	0x00000000
 800886c:	10000000 	.word	0x10000000

08008870 <__math_oflow>:
 8008870:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008878 <__math_oflow+0x8>
 8008874:	f7ff bfd8 	b.w	8008828 <xflow>
 8008878:	00000000 	.word	0x00000000
 800887c:	70000000 	.word	0x70000000

08008880 <__ieee754_sqrt>:
 8008880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	4a66      	ldr	r2, [pc, #408]	@ (8008a20 <__ieee754_sqrt+0x1a0>)
 8008886:	ec55 4b10 	vmov	r4, r5, d0
 800888a:	43aa      	bics	r2, r5
 800888c:	462b      	mov	r3, r5
 800888e:	4621      	mov	r1, r4
 8008890:	d110      	bne.n	80088b4 <__ieee754_sqrt+0x34>
 8008892:	4622      	mov	r2, r4
 8008894:	4620      	mov	r0, r4
 8008896:	4629      	mov	r1, r5
 8008898:	f7f7 feb6 	bl	8000608 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4620      	mov	r0, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	f7f7 fcfa 	bl	800029c <__adddf3>
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	ec45 4b10 	vmov	d0, r4, r5
 80088b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	dc0e      	bgt.n	80088d6 <__ieee754_sqrt+0x56>
 80088b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80088bc:	4322      	orrs	r2, r4
 80088be:	d0f5      	beq.n	80088ac <__ieee754_sqrt+0x2c>
 80088c0:	b19d      	cbz	r5, 80088ea <__ieee754_sqrt+0x6a>
 80088c2:	4622      	mov	r2, r4
 80088c4:	4620      	mov	r0, r4
 80088c6:	4629      	mov	r1, r5
 80088c8:	f7f7 fce6 	bl	8000298 <__aeabi_dsub>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	f7f7 ffc4 	bl	800085c <__aeabi_ddiv>
 80088d4:	e7e8      	b.n	80088a8 <__ieee754_sqrt+0x28>
 80088d6:	152a      	asrs	r2, r5, #20
 80088d8:	d115      	bne.n	8008906 <__ieee754_sqrt+0x86>
 80088da:	2000      	movs	r0, #0
 80088dc:	e009      	b.n	80088f2 <__ieee754_sqrt+0x72>
 80088de:	0acb      	lsrs	r3, r1, #11
 80088e0:	3a15      	subs	r2, #21
 80088e2:	0549      	lsls	r1, r1, #21
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0fa      	beq.n	80088de <__ieee754_sqrt+0x5e>
 80088e8:	e7f7      	b.n	80088da <__ieee754_sqrt+0x5a>
 80088ea:	462a      	mov	r2, r5
 80088ec:	e7fa      	b.n	80088e4 <__ieee754_sqrt+0x64>
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	3001      	adds	r0, #1
 80088f2:	02dc      	lsls	r4, r3, #11
 80088f4:	d5fb      	bpl.n	80088ee <__ieee754_sqrt+0x6e>
 80088f6:	1e44      	subs	r4, r0, #1
 80088f8:	1b12      	subs	r2, r2, r4
 80088fa:	f1c0 0420 	rsb	r4, r0, #32
 80088fe:	fa21 f404 	lsr.w	r4, r1, r4
 8008902:	4323      	orrs	r3, r4
 8008904:	4081      	lsls	r1, r0
 8008906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800890a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800890e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008912:	07d2      	lsls	r2, r2, #31
 8008914:	bf5c      	itt	pl
 8008916:	005b      	lslpl	r3, r3, #1
 8008918:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800891c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008920:	bf58      	it	pl
 8008922:	0049      	lslpl	r1, r1, #1
 8008924:	2600      	movs	r6, #0
 8008926:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800892a:	107f      	asrs	r7, r7, #1
 800892c:	0049      	lsls	r1, r1, #1
 800892e:	2016      	movs	r0, #22
 8008930:	4632      	mov	r2, r6
 8008932:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008936:	1915      	adds	r5, r2, r4
 8008938:	429d      	cmp	r5, r3
 800893a:	bfde      	ittt	le
 800893c:	192a      	addle	r2, r5, r4
 800893e:	1b5b      	suble	r3, r3, r5
 8008940:	1936      	addle	r6, r6, r4
 8008942:	0fcd      	lsrs	r5, r1, #31
 8008944:	3801      	subs	r0, #1
 8008946:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800894a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800894e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008952:	d1f0      	bne.n	8008936 <__ieee754_sqrt+0xb6>
 8008954:	4605      	mov	r5, r0
 8008956:	2420      	movs	r4, #32
 8008958:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800895c:	4293      	cmp	r3, r2
 800895e:	eb0c 0e00 	add.w	lr, ip, r0
 8008962:	dc02      	bgt.n	800896a <__ieee754_sqrt+0xea>
 8008964:	d113      	bne.n	800898e <__ieee754_sqrt+0x10e>
 8008966:	458e      	cmp	lr, r1
 8008968:	d811      	bhi.n	800898e <__ieee754_sqrt+0x10e>
 800896a:	f1be 0f00 	cmp.w	lr, #0
 800896e:	eb0e 000c 	add.w	r0, lr, ip
 8008972:	da3f      	bge.n	80089f4 <__ieee754_sqrt+0x174>
 8008974:	2800      	cmp	r0, #0
 8008976:	db3d      	blt.n	80089f4 <__ieee754_sqrt+0x174>
 8008978:	f102 0801 	add.w	r8, r2, #1
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	458e      	cmp	lr, r1
 8008980:	bf88      	it	hi
 8008982:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008986:	eba1 010e 	sub.w	r1, r1, lr
 800898a:	4465      	add	r5, ip
 800898c:	4642      	mov	r2, r8
 800898e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008992:	3c01      	subs	r4, #1
 8008994:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008998:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800899c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80089a0:	d1dc      	bne.n	800895c <__ieee754_sqrt+0xdc>
 80089a2:	4319      	orrs	r1, r3
 80089a4:	d01b      	beq.n	80089de <__ieee754_sqrt+0x15e>
 80089a6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008a24 <__ieee754_sqrt+0x1a4>
 80089aa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008a28 <__ieee754_sqrt+0x1a8>
 80089ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80089b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80089b6:	f7f7 fc6f 	bl	8000298 <__aeabi_dsub>
 80089ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	f7f8 f89b 	bl	8000b00 <__aeabi_dcmple>
 80089ca:	b140      	cbz	r0, 80089de <__ieee754_sqrt+0x15e>
 80089cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80089d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80089d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80089d8:	d10e      	bne.n	80089f8 <__ieee754_sqrt+0x178>
 80089da:	3601      	adds	r6, #1
 80089dc:	4625      	mov	r5, r4
 80089de:	1073      	asrs	r3, r6, #1
 80089e0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80089e4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80089e8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80089ec:	086b      	lsrs	r3, r5, #1
 80089ee:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80089f2:	e759      	b.n	80088a8 <__ieee754_sqrt+0x28>
 80089f4:	4690      	mov	r8, r2
 80089f6:	e7c1      	b.n	800897c <__ieee754_sqrt+0xfc>
 80089f8:	f7f7 fc50 	bl	800029c <__adddf3>
 80089fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4640      	mov	r0, r8
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f8 f870 	bl	8000aec <__aeabi_dcmplt>
 8008a0c:	b120      	cbz	r0, 8008a18 <__ieee754_sqrt+0x198>
 8008a0e:	1cab      	adds	r3, r5, #2
 8008a10:	bf08      	it	eq
 8008a12:	3601      	addeq	r6, #1
 8008a14:	3502      	adds	r5, #2
 8008a16:	e7e2      	b.n	80089de <__ieee754_sqrt+0x15e>
 8008a18:	1c6b      	adds	r3, r5, #1
 8008a1a:	f023 0501 	bic.w	r5, r3, #1
 8008a1e:	e7de      	b.n	80089de <__ieee754_sqrt+0x15e>
 8008a20:	7ff00000 	.word	0x7ff00000
 8008a24:	080090e0 	.word	0x080090e0
 8008a28:	080090d8 	.word	0x080090d8

08008a2c <_init>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr

08008a38 <_fini>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr
